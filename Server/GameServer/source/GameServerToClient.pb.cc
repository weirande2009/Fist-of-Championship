// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameServerToClient.proto

#include "GameServerToClient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ChampionFist {
PROTOBUF_CONSTEXPR S_Connect::S_Connect(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_ConnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ConnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ConnectDefaultTypeInternal() {}
  union {
    S_Connect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ConnectDefaultTypeInternal _S_Connect_default_instance_;
PROTOBUF_CONSTEXPR S_Load::S_Load(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_LoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LoadDefaultTypeInternal() {}
  union {
    S_Load _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LoadDefaultTypeInternal _S_Load_default_instance_;
PROTOBUF_CONSTEXPR S_Exit::S_Exit(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_ExitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ExitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ExitDefaultTypeInternal() {}
  union {
    S_Exit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ExitDefaultTypeInternal _S_Exit_default_instance_;
PROTOBUF_CONSTEXPR S_Begin::S_Begin(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_BeginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BeginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BeginDefaultTypeInternal() {}
  union {
    S_Begin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BeginDefaultTypeInternal _S_Begin_default_instance_;
PROTOBUF_CONSTEXPR S_End::S_End(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_EndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EndDefaultTypeInternal() {}
  union {
    S_End _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EndDefaultTypeInternal _S_End_default_instance_;
}  // namespace ChampionFist
static ::_pb::Metadata file_level_metadata_GameServerToClient_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_GameServerToClient_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_GameServerToClient_2eproto = nullptr;

const uint32_t TableStruct_GameServerToClient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Connect, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Load, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Load, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Exit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Exit, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Begin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Begin, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_End, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_End, state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ChampionFist::S_Connect)},
  { 7, -1, -1, sizeof(::ChampionFist::S_Load)},
  { 14, -1, -1, sizeof(::ChampionFist::S_Exit)},
  { 21, -1, -1, sizeof(::ChampionFist::S_Begin)},
  { 28, -1, -1, sizeof(::ChampionFist::S_End)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ChampionFist::_S_Connect_default_instance_._instance,
  &::ChampionFist::_S_Load_default_instance_._instance,
  &::ChampionFist::_S_Exit_default_instance_._instance,
  &::ChampionFist::_S_Begin_default_instance_._instance,
  &::ChampionFist::_S_End_default_instance_._instance,
};

const char descriptor_table_protodef_GameServerToClient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030GameServerToClient.proto\022\014ChampionFist"
  "\"\032\n\tS_Connect\022\r\n\005state\030\001 \001(\005\"\027\n\006S_Load\022\r"
  "\n\005state\030\001 \001(\005\"\027\n\006S_Exit\022\r\n\005state\030\001 \001(\005\"\030"
  "\n\007S_Begin\022\r\n\005state\030\001 \001(\005\"\026\n\005S_End\022\r\n\005sta"
  "te\030\001 \001(\005*p\n\021ServerCommandType\022\013\n\007S_EMPTY"
  "\020\000\022\r\n\tS_CONNECT\020\001\022\n\n\006S_LOAD\020\002\022\013\n\007S_BEGIN"
  "\020\003\022\n\n\006S_EXIT\020\004\022\017\n\013S_OPERATION\020\005\022\t\n\005S_END"
  "\020\006b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_GameServerToClient_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_GameServerToClient_2eproto = {
    false, false, 290, descriptor_table_protodef_GameServerToClient_2eproto,
    "GameServerToClient.proto",
    &descriptor_table_GameServerToClient_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_GameServerToClient_2eproto::offsets,
    file_level_metadata_GameServerToClient_2eproto, file_level_enum_descriptors_GameServerToClient_2eproto,
    file_level_service_descriptors_GameServerToClient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_GameServerToClient_2eproto_getter() {
  return &descriptor_table_GameServerToClient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_GameServerToClient_2eproto(&descriptor_table_GameServerToClient_2eproto);
namespace ChampionFist {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameServerToClient_2eproto);
  return file_level_enum_descriptors_GameServerToClient_2eproto[0];
}
bool ServerCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class S_Connect::_Internal {
 public:
};

S_Connect::S_Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_Connect)
}
S_Connect::S_Connect(const S_Connect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_Connect)
}

inline void S_Connect::SharedCtor() {
state_ = 0;
}

S_Connect::~S_Connect() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_Connect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Connect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Connect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_Connect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Connect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Connect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_Connect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_Connect)
  return target;
}

size_t S_Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_Connect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Connect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Connect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Connect::GetClassData() const { return &_class_data_; }

void S_Connect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Connect *>(to)->MergeFrom(
      static_cast<const S_Connect &>(from));
}


void S_Connect::MergeFrom(const S_Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_Connect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Connect::CopyFrom(const S_Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Connect::IsInitialized() const {
  return true;
}

void S_Connect::InternalSwap(S_Connect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Connect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GameServerToClient_2eproto_getter, &descriptor_table_GameServerToClient_2eproto_once,
      file_level_metadata_GameServerToClient_2eproto[0]);
}

// ===================================================================

class S_Load::_Internal {
 public:
};

S_Load::S_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_Load)
}
S_Load::S_Load(const S_Load& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_Load)
}

inline void S_Load::SharedCtor() {
state_ = 0;
}

S_Load::~S_Load() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_Load)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Load::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Load::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Load::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_Load)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Load::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Load::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_Load)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_Load)
  return target;
}

size_t S_Load::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_Load)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Load::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Load::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Load::GetClassData() const { return &_class_data_; }

void S_Load::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Load *>(to)->MergeFrom(
      static_cast<const S_Load &>(from));
}


void S_Load::MergeFrom(const S_Load& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_Load)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Load::CopyFrom(const S_Load& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Load::IsInitialized() const {
  return true;
}

void S_Load::InternalSwap(S_Load* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Load::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GameServerToClient_2eproto_getter, &descriptor_table_GameServerToClient_2eproto_once,
      file_level_metadata_GameServerToClient_2eproto[1]);
}

// ===================================================================

class S_Exit::_Internal {
 public:
};

S_Exit::S_Exit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_Exit)
}
S_Exit::S_Exit(const S_Exit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_Exit)
}

inline void S_Exit::SharedCtor() {
state_ = 0;
}

S_Exit::~S_Exit() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_Exit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Exit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Exit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Exit::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_Exit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Exit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Exit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_Exit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_Exit)
  return target;
}

size_t S_Exit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_Exit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Exit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Exit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Exit::GetClassData() const { return &_class_data_; }

void S_Exit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Exit *>(to)->MergeFrom(
      static_cast<const S_Exit &>(from));
}


void S_Exit::MergeFrom(const S_Exit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_Exit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Exit::CopyFrom(const S_Exit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_Exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Exit::IsInitialized() const {
  return true;
}

void S_Exit::InternalSwap(S_Exit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Exit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GameServerToClient_2eproto_getter, &descriptor_table_GameServerToClient_2eproto_once,
      file_level_metadata_GameServerToClient_2eproto[2]);
}

// ===================================================================

class S_Begin::_Internal {
 public:
};

S_Begin::S_Begin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_Begin)
}
S_Begin::S_Begin(const S_Begin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_Begin)
}

inline void S_Begin::SharedCtor() {
state_ = 0;
}

S_Begin::~S_Begin() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_Begin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Begin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Begin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Begin::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_Begin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Begin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Begin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_Begin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_Begin)
  return target;
}

size_t S_Begin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_Begin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Begin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Begin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Begin::GetClassData() const { return &_class_data_; }

void S_Begin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Begin *>(to)->MergeFrom(
      static_cast<const S_Begin &>(from));
}


void S_Begin::MergeFrom(const S_Begin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_Begin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Begin::CopyFrom(const S_Begin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_Begin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Begin::IsInitialized() const {
  return true;
}

void S_Begin::InternalSwap(S_Begin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Begin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GameServerToClient_2eproto_getter, &descriptor_table_GameServerToClient_2eproto_once,
      file_level_metadata_GameServerToClient_2eproto[3]);
}

// ===================================================================

class S_End::_Internal {
 public:
};

S_End::S_End(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_End)
}
S_End::S_End(const S_End& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_End)
}

inline void S_End::SharedCtor() {
state_ = 0;
}

S_End::~S_End() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_End)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_End::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_End::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_End::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_End)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_End::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_End::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_End)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_End)
  return target;
}

size_t S_End::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_End)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_End::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_End::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_End::GetClassData() const { return &_class_data_; }

void S_End::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_End *>(to)->MergeFrom(
      static_cast<const S_End &>(from));
}


void S_End::MergeFrom(const S_End& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_End)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_End::CopyFrom(const S_End& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_End)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_End::IsInitialized() const {
  return true;
}

void S_End::InternalSwap(S_End* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_End::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GameServerToClient_2eproto_getter, &descriptor_table_GameServerToClient_2eproto_once,
      file_level_metadata_GameServerToClient_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ChampionFist
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChampionFist::S_Connect*
Arena::CreateMaybeMessage< ::ChampionFist::S_Connect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_Connect >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_Load*
Arena::CreateMaybeMessage< ::ChampionFist::S_Load >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_Load >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_Exit*
Arena::CreateMaybeMessage< ::ChampionFist::S_Exit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_Exit >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_Begin*
Arena::CreateMaybeMessage< ::ChampionFist::S_Begin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_Begin >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_End*
Arena::CreateMaybeMessage< ::ChampionFist::S_End >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_End >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
