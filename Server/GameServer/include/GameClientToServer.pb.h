// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameClientToServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameClientToServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameClientToServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameClientToServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameClientToServer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameClientToServer_2eproto;
namespace ChampionFist {
class C_Connect;
struct C_ConnectDefaultTypeInternal;
extern C_ConnectDefaultTypeInternal _C_Connect_default_instance_;
}  // namespace ChampionFist
PROTOBUF_NAMESPACE_OPEN
template<> ::ChampionFist::C_Connect* Arena::CreateMaybeMessage<::ChampionFist::C_Connect>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChampionFist {

enum ClientCommandType : int {
  C_EMPTY = 0,
  C_CONNECT = 1,
  C_LOAD = 2,
  C_EXIT = 3,
  C_OPERATION = 4,
  C_START = 5,
  C_END = 6,
  ClientCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ClientCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ClientCommandType_IsValid(int value);
constexpr ClientCommandType ClientCommandType_MIN = C_EMPTY;
constexpr ClientCommandType ClientCommandType_MAX = C_END;
constexpr int ClientCommandType_ARRAYSIZE = ClientCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommandType_descriptor();
template<typename T>
inline const std::string& ClientCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientCommandType_descriptor(), enum_t_value);
}
inline bool ClientCommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientCommandType>(
    ClientCommandType_descriptor(), name, value);
}
// ===================================================================

class C_Connect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.C_Connect) */ {
 public:
  inline C_Connect() : C_Connect(nullptr) {}
  ~C_Connect() override;
  explicit PROTOBUF_CONSTEXPR C_Connect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Connect(const C_Connect& from);
  C_Connect(C_Connect&& from) noexcept
    : C_Connect() {
    *this = ::std::move(from);
  }

  inline C_Connect& operator=(const C_Connect& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Connect& operator=(C_Connect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Connect& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Connect* internal_default_instance() {
    return reinterpret_cast<const C_Connect*>(
               &_C_Connect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_Connect& a, C_Connect& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Connect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Connect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Connect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Connect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Connect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Connect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Connect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.C_Connect";
  }
  protected:
  explicit C_Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSeatNoFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 seat_no = 2;
  void clear_seat_no();
  int32_t seat_no() const;
  void set_seat_no(int32_t value);
  private:
  int32_t _internal_seat_no() const;
  void _internal_set_seat_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.C_Connect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t seat_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameClientToServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_Connect

// string name = 1;
inline void C_Connect::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& C_Connect::name() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_Connect.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_Connect::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChampionFist.C_Connect.name)
}
inline std::string* C_Connect::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ChampionFist.C_Connect.name)
  return _s;
}
inline const std::string& C_Connect::_internal_name() const {
  return name_.Get();
}
inline void C_Connect::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_Connect::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_Connect::release_name() {
  // @@protoc_insertion_point(field_release:ChampionFist.C_Connect.name)
  return name_.Release();
}
inline void C_Connect::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChampionFist.C_Connect.name)
}

// int32 seat_no = 2;
inline void C_Connect::clear_seat_no() {
  seat_no_ = 0;
}
inline int32_t C_Connect::_internal_seat_no() const {
  return seat_no_;
}
inline int32_t C_Connect::seat_no() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_Connect.seat_no)
  return _internal_seat_no();
}
inline void C_Connect::_internal_set_seat_no(int32_t value) {
  
  seat_no_ = value;
}
inline void C_Connect::set_seat_no(int32_t value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:ChampionFist.C_Connect.seat_no)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ChampionFist

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChampionFist::ClientCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChampionFist::ClientCommandType>() {
  return ::ChampionFist::ClientCommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameClientToServer_2eproto
