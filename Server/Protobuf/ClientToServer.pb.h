// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientToServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ClientToServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ClientToServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ClientToServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ClientToServer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ClientToServer_2eproto;
namespace ChampionFist {
class C_AddFriend;
struct C_AddFriendDefaultTypeInternal;
extern C_AddFriendDefaultTypeInternal _C_AddFriend_default_instance_;
class C_CreateRoom;
struct C_CreateRoomDefaultTypeInternal;
extern C_CreateRoomDefaultTypeInternal _C_CreateRoom_default_instance_;
class C_EnterRoom;
struct C_EnterRoomDefaultTypeInternal;
extern C_EnterRoomDefaultTypeInternal _C_EnterRoom_default_instance_;
class C_HallRoom;
struct C_HallRoomDefaultTypeInternal;
extern C_HallRoomDefaultTypeInternal _C_HallRoom_default_instance_;
class C_Login;
struct C_LoginDefaultTypeInternal;
extern C_LoginDefaultTypeInternal _C_Login_default_instance_;
class C_ModChar;
struct C_ModCharDefaultTypeInternal;
extern C_ModCharDefaultTypeInternal _C_ModChar_default_instance_;
class C_Register;
struct C_RegisterDefaultTypeInternal;
extern C_RegisterDefaultTypeInternal _C_Register_default_instance_;
class C_ReplyFriend;
struct C_ReplyFriendDefaultTypeInternal;
extern C_ReplyFriendDefaultTypeInternal _C_ReplyFriend_default_instance_;
class C_RoomInfo;
struct C_RoomInfoDefaultTypeInternal;
extern C_RoomInfoDefaultTypeInternal _C_RoomInfo_default_instance_;
}  // namespace ChampionFist
PROTOBUF_NAMESPACE_OPEN
template<> ::ChampionFist::C_AddFriend* Arena::CreateMaybeMessage<::ChampionFist::C_AddFriend>(Arena*);
template<> ::ChampionFist::C_CreateRoom* Arena::CreateMaybeMessage<::ChampionFist::C_CreateRoom>(Arena*);
template<> ::ChampionFist::C_EnterRoom* Arena::CreateMaybeMessage<::ChampionFist::C_EnterRoom>(Arena*);
template<> ::ChampionFist::C_HallRoom* Arena::CreateMaybeMessage<::ChampionFist::C_HallRoom>(Arena*);
template<> ::ChampionFist::C_Login* Arena::CreateMaybeMessage<::ChampionFist::C_Login>(Arena*);
template<> ::ChampionFist::C_ModChar* Arena::CreateMaybeMessage<::ChampionFist::C_ModChar>(Arena*);
template<> ::ChampionFist::C_Register* Arena::CreateMaybeMessage<::ChampionFist::C_Register>(Arena*);
template<> ::ChampionFist::C_ReplyFriend* Arena::CreateMaybeMessage<::ChampionFist::C_ReplyFriend>(Arena*);
template<> ::ChampionFist::C_RoomInfo* Arena::CreateMaybeMessage<::ChampionFist::C_RoomInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChampionFist {

enum ClientCommandType : int {
  C_EMPTY = 0,
  C_LOGIN = 1,
  C_REGISTER = 2,
  C_HALL_ROOM = 3,
  C_FRIEND = 4,
  C_ENTER_ROOM = 5,
  C_ROOM_INFO = 6,
  C_MODIFY_CHAR = 7,
  C_READY = 8,
  C_CANCEL_READY = 9,
  C_START_GAME = 10,
  C_EXIT_LOGIN = 11,
  C_QUIT = 12,
  C_EXIT_ROOM = 13,
  C_CREATE_ROOM = 14,
  C_ADD_FRIEND = 15,
  C_REPLY_FRIEND = 16,
  ClientCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ClientCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ClientCommandType_IsValid(int value);
constexpr ClientCommandType ClientCommandType_MIN = C_EMPTY;
constexpr ClientCommandType ClientCommandType_MAX = C_REPLY_FRIEND;
constexpr int ClientCommandType_ARRAYSIZE = ClientCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommandType_descriptor();
template<typename T>
inline const std::string& ClientCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientCommandType_descriptor(), enum_t_value);
}
inline bool ClientCommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientCommandType>(
    ClientCommandType_descriptor(), name, value);
}
// ===================================================================

class C_Login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.C_Login) */ {
 public:
  inline C_Login() : C_Login(nullptr) {}
  ~C_Login() override;
  explicit PROTOBUF_CONSTEXPR C_Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Login(const C_Login& from);
  C_Login(C_Login&& from) noexcept
    : C_Login() {
    *this = ::std::move(from);
  }

  inline C_Login& operator=(const C_Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Login& operator=(C_Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Login* internal_default_instance() {
    return reinterpret_cast<const C_Login*>(
               &_C_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_Login& a, C_Login& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Login& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.C_Login";
  }
  protected:
  explicit C_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordMd5FieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password_md5 = 2;
  void clear_password_md5();
  const std::string& password_md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password_md5();
  PROTOBUF_NODISCARD std::string* release_password_md5();
  void set_allocated_password_md5(std::string* password_md5);
  private:
  const std::string& _internal_password_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_md5(const std::string& value);
  std::string* _internal_mutable_password_md5();
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.C_Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_md5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToServer_2eproto;
};
// -------------------------------------------------------------------

class C_Register final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.C_Register) */ {
 public:
  inline C_Register() : C_Register(nullptr) {}
  ~C_Register() override;
  explicit PROTOBUF_CONSTEXPR C_Register(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Register(const C_Register& from);
  C_Register(C_Register&& from) noexcept
    : C_Register() {
    *this = ::std::move(from);
  }

  inline C_Register& operator=(const C_Register& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Register& operator=(C_Register&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Register& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Register* internal_default_instance() {
    return reinterpret_cast<const C_Register*>(
               &_C_Register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_Register& a, C_Register& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Register* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Register* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Register* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Register>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Register& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Register& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Register* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.C_Register";
  }
  protected:
  explicit C_Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordMd5FieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password_md5 = 2;
  void clear_password_md5();
  const std::string& password_md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password_md5();
  PROTOBUF_NODISCARD std::string* release_password_md5();
  void set_allocated_password_md5(std::string* password_md5);
  private:
  const std::string& _internal_password_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_md5(const std::string& value);
  std::string* _internal_mutable_password_md5();
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.C_Register)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_md5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToServer_2eproto;
};
// -------------------------------------------------------------------

class C_HallRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.C_HallRoom) */ {
 public:
  inline C_HallRoom() : C_HallRoom(nullptr) {}
  ~C_HallRoom() override;
  explicit PROTOBUF_CONSTEXPR C_HallRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_HallRoom(const C_HallRoom& from);
  C_HallRoom(C_HallRoom&& from) noexcept
    : C_HallRoom() {
    *this = ::std::move(from);
  }

  inline C_HallRoom& operator=(const C_HallRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_HallRoom& operator=(C_HallRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_HallRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_HallRoom* internal_default_instance() {
    return reinterpret_cast<const C_HallRoom*>(
               &_C_HallRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_HallRoom& a, C_HallRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(C_HallRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_HallRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_HallRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_HallRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_HallRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_HallRoom& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_HallRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.C_HallRoom";
  }
  protected:
  explicit C_HallRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
  };
  // int32 page = 1;
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.C_HallRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToServer_2eproto;
};
// -------------------------------------------------------------------

class C_EnterRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.C_EnterRoom) */ {
 public:
  inline C_EnterRoom() : C_EnterRoom(nullptr) {}
  ~C_EnterRoom() override;
  explicit PROTOBUF_CONSTEXPR C_EnterRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_EnterRoom(const C_EnterRoom& from);
  C_EnterRoom(C_EnterRoom&& from) noexcept
    : C_EnterRoom() {
    *this = ::std::move(from);
  }

  inline C_EnterRoom& operator=(const C_EnterRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_EnterRoom& operator=(C_EnterRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_EnterRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_EnterRoom* internal_default_instance() {
    return reinterpret_cast<const C_EnterRoom*>(
               &_C_EnterRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_EnterRoom& a, C_EnterRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(C_EnterRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_EnterRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_EnterRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_EnterRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_EnterRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_EnterRoom& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_EnterRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.C_EnterRoom";
  }
  protected:
  explicit C_EnterRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNoFieldNumber = 1,
  };
  // string room_no = 1;
  void clear_room_no();
  const std::string& room_no() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_no(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_no();
  PROTOBUF_NODISCARD std::string* release_room_no();
  void set_allocated_room_no(std::string* room_no);
  private:
  const std::string& _internal_room_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_no(const std::string& value);
  std::string* _internal_mutable_room_no();
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.C_EnterRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToServer_2eproto;
};
// -------------------------------------------------------------------

class C_RoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.C_RoomInfo) */ {
 public:
  inline C_RoomInfo() : C_RoomInfo(nullptr) {}
  ~C_RoomInfo() override;
  explicit PROTOBUF_CONSTEXPR C_RoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_RoomInfo(const C_RoomInfo& from);
  C_RoomInfo(C_RoomInfo&& from) noexcept
    : C_RoomInfo() {
    *this = ::std::move(from);
  }

  inline C_RoomInfo& operator=(const C_RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_RoomInfo& operator=(C_RoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_RoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_RoomInfo* internal_default_instance() {
    return reinterpret_cast<const C_RoomInfo*>(
               &_C_RoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_RoomInfo& a, C_RoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(C_RoomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_RoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_RoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_RoomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_RoomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_RoomInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_RoomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.C_RoomInfo";
  }
  protected:
  explicit C_RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNoFieldNumber = 1,
  };
  // string room_no = 1;
  void clear_room_no();
  const std::string& room_no() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_no(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_no();
  PROTOBUF_NODISCARD std::string* release_room_no();
  void set_allocated_room_no(std::string* room_no);
  private:
  const std::string& _internal_room_no() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_no(const std::string& value);
  std::string* _internal_mutable_room_no();
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.C_RoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToServer_2eproto;
};
// -------------------------------------------------------------------

class C_ModChar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.C_ModChar) */ {
 public:
  inline C_ModChar() : C_ModChar(nullptr) {}
  ~C_ModChar() override;
  explicit PROTOBUF_CONSTEXPR C_ModChar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ModChar(const C_ModChar& from);
  C_ModChar(C_ModChar&& from) noexcept
    : C_ModChar() {
    *this = ::std::move(from);
  }

  inline C_ModChar& operator=(const C_ModChar& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ModChar& operator=(C_ModChar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ModChar& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ModChar* internal_default_instance() {
    return reinterpret_cast<const C_ModChar*>(
               &_C_ModChar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_ModChar& a, C_ModChar& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ModChar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ModChar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ModChar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ModChar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ModChar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_ModChar& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ModChar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.C_ModChar";
  }
  protected:
  explicit C_ModChar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharTypeFieldNumber = 1,
  };
  // int32 char_type = 1;
  void clear_char_type();
  int32_t char_type() const;
  void set_char_type(int32_t value);
  private:
  int32_t _internal_char_type() const;
  void _internal_set_char_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.C_ModChar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t char_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToServer_2eproto;
};
// -------------------------------------------------------------------

class C_CreateRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.C_CreateRoom) */ {
 public:
  inline C_CreateRoom() : C_CreateRoom(nullptr) {}
  ~C_CreateRoom() override;
  explicit PROTOBUF_CONSTEXPR C_CreateRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CreateRoom(const C_CreateRoom& from);
  C_CreateRoom(C_CreateRoom&& from) noexcept
    : C_CreateRoom() {
    *this = ::std::move(from);
  }

  inline C_CreateRoom& operator=(const C_CreateRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CreateRoom& operator=(C_CreateRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CreateRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CreateRoom* internal_default_instance() {
    return reinterpret_cast<const C_CreateRoom*>(
               &_C_CreateRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_CreateRoom& a, C_CreateRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CreateRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CreateRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CreateRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CreateRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CreateRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_CreateRoom& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CreateRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.C_CreateRoom";
  }
  protected:
  explicit C_CreateRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
  };
  // string room_name = 1;
  void clear_room_name();
  const std::string& room_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.C_CreateRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToServer_2eproto;
};
// -------------------------------------------------------------------

class C_AddFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.C_AddFriend) */ {
 public:
  inline C_AddFriend() : C_AddFriend(nullptr) {}
  ~C_AddFriend() override;
  explicit PROTOBUF_CONSTEXPR C_AddFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_AddFriend(const C_AddFriend& from);
  C_AddFriend(C_AddFriend&& from) noexcept
    : C_AddFriend() {
    *this = ::std::move(from);
  }

  inline C_AddFriend& operator=(const C_AddFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_AddFriend& operator=(C_AddFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_AddFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_AddFriend* internal_default_instance() {
    return reinterpret_cast<const C_AddFriend*>(
               &_C_AddFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_AddFriend& a, C_AddFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(C_AddFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_AddFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_AddFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_AddFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_AddFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_AddFriend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_AddFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.C_AddFriend";
  }
  protected:
  explicit C_AddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendNameFieldNumber = 1,
  };
  // string friend_name = 1;
  void clear_friend_name();
  const std::string& friend_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friend_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friend_name();
  PROTOBUF_NODISCARD std::string* release_friend_name();
  void set_allocated_friend_name(std::string* friend_name);
  private:
  const std::string& _internal_friend_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friend_name(const std::string& value);
  std::string* _internal_mutable_friend_name();
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.C_AddFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToServer_2eproto;
};
// -------------------------------------------------------------------

class C_ReplyFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.C_ReplyFriend) */ {
 public:
  inline C_ReplyFriend() : C_ReplyFriend(nullptr) {}
  ~C_ReplyFriend() override;
  explicit PROTOBUF_CONSTEXPR C_ReplyFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ReplyFriend(const C_ReplyFriend& from);
  C_ReplyFriend(C_ReplyFriend&& from) noexcept
    : C_ReplyFriend() {
    *this = ::std::move(from);
  }

  inline C_ReplyFriend& operator=(const C_ReplyFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ReplyFriend& operator=(C_ReplyFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ReplyFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ReplyFriend* internal_default_instance() {
    return reinterpret_cast<const C_ReplyFriend*>(
               &_C_ReplyFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_ReplyFriend& a, C_ReplyFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ReplyFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ReplyFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ReplyFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ReplyFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ReplyFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_ReplyFriend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ReplyFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.C_ReplyFriend";
  }
  protected:
  explicit C_ReplyFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendNameFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string friend_name = 1;
  void clear_friend_name();
  const std::string& friend_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friend_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friend_name();
  PROTOBUF_NODISCARD std::string* release_friend_name();
  void set_allocated_friend_name(std::string* friend_name);
  private:
  const std::string& _internal_friend_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friend_name(const std::string& value);
  std::string* _internal_mutable_friend_name();
  public:

  // int32 state = 2;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.C_ReplyFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_name_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientToServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_Login

// string name = 1;
inline void C_Login::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& C_Login::name() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_Login.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_Login::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChampionFist.C_Login.name)
}
inline std::string* C_Login::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ChampionFist.C_Login.name)
  return _s;
}
inline const std::string& C_Login::_internal_name() const {
  return name_.Get();
}
inline void C_Login::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_Login::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_Login::release_name() {
  // @@protoc_insertion_point(field_release:ChampionFist.C_Login.name)
  return name_.Release();
}
inline void C_Login::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChampionFist.C_Login.name)
}

// string password_md5 = 2;
inline void C_Login::clear_password_md5() {
  password_md5_.ClearToEmpty();
}
inline const std::string& C_Login::password_md5() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_Login.password_md5)
  return _internal_password_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_Login::set_password_md5(ArgT0&& arg0, ArgT... args) {
 
 password_md5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChampionFist.C_Login.password_md5)
}
inline std::string* C_Login::mutable_password_md5() {
  std::string* _s = _internal_mutable_password_md5();
  // @@protoc_insertion_point(field_mutable:ChampionFist.C_Login.password_md5)
  return _s;
}
inline const std::string& C_Login::_internal_password_md5() const {
  return password_md5_.Get();
}
inline void C_Login::_internal_set_password_md5(const std::string& value) {
  
  password_md5_.Set(value, GetArenaForAllocation());
}
inline std::string* C_Login::_internal_mutable_password_md5() {
  
  return password_md5_.Mutable(GetArenaForAllocation());
}
inline std::string* C_Login::release_password_md5() {
  // @@protoc_insertion_point(field_release:ChampionFist.C_Login.password_md5)
  return password_md5_.Release();
}
inline void C_Login::set_allocated_password_md5(std::string* password_md5) {
  if (password_md5 != nullptr) {
    
  } else {
    
  }
  password_md5_.SetAllocated(password_md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_md5_.IsDefault()) {
    password_md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChampionFist.C_Login.password_md5)
}

// -------------------------------------------------------------------

// C_Register

// string name = 1;
inline void C_Register::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& C_Register::name() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_Register.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_Register::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChampionFist.C_Register.name)
}
inline std::string* C_Register::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ChampionFist.C_Register.name)
  return _s;
}
inline const std::string& C_Register::_internal_name() const {
  return name_.Get();
}
inline void C_Register::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_Register::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_Register::release_name() {
  // @@protoc_insertion_point(field_release:ChampionFist.C_Register.name)
  return name_.Release();
}
inline void C_Register::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChampionFist.C_Register.name)
}

// string password_md5 = 2;
inline void C_Register::clear_password_md5() {
  password_md5_.ClearToEmpty();
}
inline const std::string& C_Register::password_md5() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_Register.password_md5)
  return _internal_password_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_Register::set_password_md5(ArgT0&& arg0, ArgT... args) {
 
 password_md5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChampionFist.C_Register.password_md5)
}
inline std::string* C_Register::mutable_password_md5() {
  std::string* _s = _internal_mutable_password_md5();
  // @@protoc_insertion_point(field_mutable:ChampionFist.C_Register.password_md5)
  return _s;
}
inline const std::string& C_Register::_internal_password_md5() const {
  return password_md5_.Get();
}
inline void C_Register::_internal_set_password_md5(const std::string& value) {
  
  password_md5_.Set(value, GetArenaForAllocation());
}
inline std::string* C_Register::_internal_mutable_password_md5() {
  
  return password_md5_.Mutable(GetArenaForAllocation());
}
inline std::string* C_Register::release_password_md5() {
  // @@protoc_insertion_point(field_release:ChampionFist.C_Register.password_md5)
  return password_md5_.Release();
}
inline void C_Register::set_allocated_password_md5(std::string* password_md5) {
  if (password_md5 != nullptr) {
    
  } else {
    
  }
  password_md5_.SetAllocated(password_md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_md5_.IsDefault()) {
    password_md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChampionFist.C_Register.password_md5)
}

// -------------------------------------------------------------------

// C_HallRoom

// int32 page = 1;
inline void C_HallRoom::clear_page() {
  page_ = 0;
}
inline int32_t C_HallRoom::_internal_page() const {
  return page_;
}
inline int32_t C_HallRoom::page() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_HallRoom.page)
  return _internal_page();
}
inline void C_HallRoom::_internal_set_page(int32_t value) {
  
  page_ = value;
}
inline void C_HallRoom::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:ChampionFist.C_HallRoom.page)
}

// -------------------------------------------------------------------

// C_EnterRoom

// string room_no = 1;
inline void C_EnterRoom::clear_room_no() {
  room_no_.ClearToEmpty();
}
inline const std::string& C_EnterRoom::room_no() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_EnterRoom.room_no)
  return _internal_room_no();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_EnterRoom::set_room_no(ArgT0&& arg0, ArgT... args) {
 
 room_no_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChampionFist.C_EnterRoom.room_no)
}
inline std::string* C_EnterRoom::mutable_room_no() {
  std::string* _s = _internal_mutable_room_no();
  // @@protoc_insertion_point(field_mutable:ChampionFist.C_EnterRoom.room_no)
  return _s;
}
inline const std::string& C_EnterRoom::_internal_room_no() const {
  return room_no_.Get();
}
inline void C_EnterRoom::_internal_set_room_no(const std::string& value) {
  
  room_no_.Set(value, GetArenaForAllocation());
}
inline std::string* C_EnterRoom::_internal_mutable_room_no() {
  
  return room_no_.Mutable(GetArenaForAllocation());
}
inline std::string* C_EnterRoom::release_room_no() {
  // @@protoc_insertion_point(field_release:ChampionFist.C_EnterRoom.room_no)
  return room_no_.Release();
}
inline void C_EnterRoom::set_allocated_room_no(std::string* room_no) {
  if (room_no != nullptr) {
    
  } else {
    
  }
  room_no_.SetAllocated(room_no, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_no_.IsDefault()) {
    room_no_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChampionFist.C_EnterRoom.room_no)
}

// -------------------------------------------------------------------

// C_RoomInfo

// string room_no = 1;
inline void C_RoomInfo::clear_room_no() {
  room_no_.ClearToEmpty();
}
inline const std::string& C_RoomInfo::room_no() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_RoomInfo.room_no)
  return _internal_room_no();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_RoomInfo::set_room_no(ArgT0&& arg0, ArgT... args) {
 
 room_no_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChampionFist.C_RoomInfo.room_no)
}
inline std::string* C_RoomInfo::mutable_room_no() {
  std::string* _s = _internal_mutable_room_no();
  // @@protoc_insertion_point(field_mutable:ChampionFist.C_RoomInfo.room_no)
  return _s;
}
inline const std::string& C_RoomInfo::_internal_room_no() const {
  return room_no_.Get();
}
inline void C_RoomInfo::_internal_set_room_no(const std::string& value) {
  
  room_no_.Set(value, GetArenaForAllocation());
}
inline std::string* C_RoomInfo::_internal_mutable_room_no() {
  
  return room_no_.Mutable(GetArenaForAllocation());
}
inline std::string* C_RoomInfo::release_room_no() {
  // @@protoc_insertion_point(field_release:ChampionFist.C_RoomInfo.room_no)
  return room_no_.Release();
}
inline void C_RoomInfo::set_allocated_room_no(std::string* room_no) {
  if (room_no != nullptr) {
    
  } else {
    
  }
  room_no_.SetAllocated(room_no, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_no_.IsDefault()) {
    room_no_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChampionFist.C_RoomInfo.room_no)
}

// -------------------------------------------------------------------

// C_ModChar

// int32 char_type = 1;
inline void C_ModChar::clear_char_type() {
  char_type_ = 0;
}
inline int32_t C_ModChar::_internal_char_type() const {
  return char_type_;
}
inline int32_t C_ModChar::char_type() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_ModChar.char_type)
  return _internal_char_type();
}
inline void C_ModChar::_internal_set_char_type(int32_t value) {
  
  char_type_ = value;
}
inline void C_ModChar::set_char_type(int32_t value) {
  _internal_set_char_type(value);
  // @@protoc_insertion_point(field_set:ChampionFist.C_ModChar.char_type)
}

// -------------------------------------------------------------------

// C_CreateRoom

// string room_name = 1;
inline void C_CreateRoom::clear_room_name() {
  room_name_.ClearToEmpty();
}
inline const std::string& C_CreateRoom::room_name() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_CreateRoom.room_name)
  return _internal_room_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CreateRoom::set_room_name(ArgT0&& arg0, ArgT... args) {
 
 room_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChampionFist.C_CreateRoom.room_name)
}
inline std::string* C_CreateRoom::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:ChampionFist.C_CreateRoom.room_name)
  return _s;
}
inline const std::string& C_CreateRoom::_internal_room_name() const {
  return room_name_.Get();
}
inline void C_CreateRoom::_internal_set_room_name(const std::string& value) {
  
  room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CreateRoom::_internal_mutable_room_name() {
  
  return room_name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CreateRoom::release_room_name() {
  // @@protoc_insertion_point(field_release:ChampionFist.C_CreateRoom.room_name)
  return room_name_.Release();
}
inline void C_CreateRoom::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    
  } else {
    
  }
  room_name_.SetAllocated(room_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_name_.IsDefault()) {
    room_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChampionFist.C_CreateRoom.room_name)
}

// -------------------------------------------------------------------

// C_AddFriend

// string friend_name = 1;
inline void C_AddFriend::clear_friend_name() {
  friend_name_.ClearToEmpty();
}
inline const std::string& C_AddFriend::friend_name() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_AddFriend.friend_name)
  return _internal_friend_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_AddFriend::set_friend_name(ArgT0&& arg0, ArgT... args) {
 
 friend_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChampionFist.C_AddFriend.friend_name)
}
inline std::string* C_AddFriend::mutable_friend_name() {
  std::string* _s = _internal_mutable_friend_name();
  // @@protoc_insertion_point(field_mutable:ChampionFist.C_AddFriend.friend_name)
  return _s;
}
inline const std::string& C_AddFriend::_internal_friend_name() const {
  return friend_name_.Get();
}
inline void C_AddFriend::_internal_set_friend_name(const std::string& value) {
  
  friend_name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_AddFriend::_internal_mutable_friend_name() {
  
  return friend_name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_AddFriend::release_friend_name() {
  // @@protoc_insertion_point(field_release:ChampionFist.C_AddFriend.friend_name)
  return friend_name_.Release();
}
inline void C_AddFriend::set_allocated_friend_name(std::string* friend_name) {
  if (friend_name != nullptr) {
    
  } else {
    
  }
  friend_name_.SetAllocated(friend_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (friend_name_.IsDefault()) {
    friend_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChampionFist.C_AddFriend.friend_name)
}

// -------------------------------------------------------------------

// C_ReplyFriend

// string friend_name = 1;
inline void C_ReplyFriend::clear_friend_name() {
  friend_name_.ClearToEmpty();
}
inline const std::string& C_ReplyFriend::friend_name() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_ReplyFriend.friend_name)
  return _internal_friend_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ReplyFriend::set_friend_name(ArgT0&& arg0, ArgT... args) {
 
 friend_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChampionFist.C_ReplyFriend.friend_name)
}
inline std::string* C_ReplyFriend::mutable_friend_name() {
  std::string* _s = _internal_mutable_friend_name();
  // @@protoc_insertion_point(field_mutable:ChampionFist.C_ReplyFriend.friend_name)
  return _s;
}
inline const std::string& C_ReplyFriend::_internal_friend_name() const {
  return friend_name_.Get();
}
inline void C_ReplyFriend::_internal_set_friend_name(const std::string& value) {
  
  friend_name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_ReplyFriend::_internal_mutable_friend_name() {
  
  return friend_name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_ReplyFriend::release_friend_name() {
  // @@protoc_insertion_point(field_release:ChampionFist.C_ReplyFriend.friend_name)
  return friend_name_.Release();
}
inline void C_ReplyFriend::set_allocated_friend_name(std::string* friend_name) {
  if (friend_name != nullptr) {
    
  } else {
    
  }
  friend_name_.SetAllocated(friend_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (friend_name_.IsDefault()) {
    friend_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChampionFist.C_ReplyFriend.friend_name)
}

// int32 state = 2;
inline void C_ReplyFriend::clear_state() {
  state_ = 0;
}
inline int32_t C_ReplyFriend::_internal_state() const {
  return state_;
}
inline int32_t C_ReplyFriend::state() const {
  // @@protoc_insertion_point(field_get:ChampionFist.C_ReplyFriend.state)
  return _internal_state();
}
inline void C_ReplyFriend::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void C_ReplyFriend::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ChampionFist.C_ReplyFriend.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChampionFist

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChampionFist::ClientCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChampionFist::ClientCommandType>() {
  return ::ChampionFist::ClientCommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ClientToServer_2eproto
