// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientToServer.proto

#include "ClientToServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ChampionFist {
PROTOBUF_CONSTEXPR C_Login::C_Login(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , password_md5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct C_LoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LoginDefaultTypeInternal() {}
  union {
    C_Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LoginDefaultTypeInternal _C_Login_default_instance_;
PROTOBUF_CONSTEXPR C_Register::C_Register(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , password_md5_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct C_RegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_RegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_RegisterDefaultTypeInternal() {}
  union {
    C_Register _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_RegisterDefaultTypeInternal _C_Register_default_instance_;
PROTOBUF_CONSTEXPR C_EnterRoom::C_EnterRoom(
    ::_pbi::ConstantInitialized)
  : room_no_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct C_EnterRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_EnterRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_EnterRoomDefaultTypeInternal() {}
  union {
    C_EnterRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_EnterRoomDefaultTypeInternal _C_EnterRoom_default_instance_;
PROTOBUF_CONSTEXPR C_RoomInfo::C_RoomInfo(
    ::_pbi::ConstantInitialized)
  : room_no_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct C_RoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_RoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_RoomInfoDefaultTypeInternal() {}
  union {
    C_RoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_RoomInfoDefaultTypeInternal _C_RoomInfo_default_instance_;
PROTOBUF_CONSTEXPR C_ModChar::C_ModChar(
    ::_pbi::ConstantInitialized)
  : char_type_(0){}
struct C_ModCharDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ModCharDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ModCharDefaultTypeInternal() {}
  union {
    C_ModChar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ModCharDefaultTypeInternal _C_ModChar_default_instance_;
PROTOBUF_CONSTEXPR C_CreateRoom::C_CreateRoom(
    ::_pbi::ConstantInitialized)
  : room_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct C_CreateRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CreateRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CreateRoomDefaultTypeInternal() {}
  union {
    C_CreateRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CreateRoomDefaultTypeInternal _C_CreateRoom_default_instance_;
PROTOBUF_CONSTEXPR C_AddFriend::C_AddFriend(
    ::_pbi::ConstantInitialized)
  : friend_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct C_AddFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AddFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AddFriendDefaultTypeInternal() {}
  union {
    C_AddFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AddFriendDefaultTypeInternal _C_AddFriend_default_instance_;
PROTOBUF_CONSTEXPR C_ReplyFriend::C_ReplyFriend(
    ::_pbi::ConstantInitialized)
  : friend_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , state_(0){}
struct C_ReplyFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ReplyFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ReplyFriendDefaultTypeInternal() {}
  union {
    C_ReplyFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ReplyFriendDefaultTypeInternal _C_ReplyFriend_default_instance_;
}  // namespace ChampionFist
static ::_pb::Metadata file_level_metadata_ClientToServer_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ClientToServer_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ClientToServer_2eproto = nullptr;

const uint32_t TableStruct_ClientToServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_Login, name_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_Login, password_md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_Register, name_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_Register, password_md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_EnterRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_EnterRoom, room_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_RoomInfo, room_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_ModChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_ModChar, char_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_CreateRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_CreateRoom, room_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_AddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_AddFriend, friend_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_ReplyFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_ReplyFriend, friend_name_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::C_ReplyFriend, state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ChampionFist::C_Login)},
  { 8, -1, -1, sizeof(::ChampionFist::C_Register)},
  { 16, -1, -1, sizeof(::ChampionFist::C_EnterRoom)},
  { 23, -1, -1, sizeof(::ChampionFist::C_RoomInfo)},
  { 30, -1, -1, sizeof(::ChampionFist::C_ModChar)},
  { 37, -1, -1, sizeof(::ChampionFist::C_CreateRoom)},
  { 44, -1, -1, sizeof(::ChampionFist::C_AddFriend)},
  { 51, -1, -1, sizeof(::ChampionFist::C_ReplyFriend)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ChampionFist::_C_Login_default_instance_._instance,
  &::ChampionFist::_C_Register_default_instance_._instance,
  &::ChampionFist::_C_EnterRoom_default_instance_._instance,
  &::ChampionFist::_C_RoomInfo_default_instance_._instance,
  &::ChampionFist::_C_ModChar_default_instance_._instance,
  &::ChampionFist::_C_CreateRoom_default_instance_._instance,
  &::ChampionFist::_C_AddFriend_default_instance_._instance,
  &::ChampionFist::_C_ReplyFriend_default_instance_._instance,
};

const char descriptor_table_protodef_ClientToServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ClientToServer.proto\022\014ChampionFist\"-\n\007"
  "C_Login\022\014\n\004name\030\001 \001(\t\022\024\n\014password_md5\030\002 "
  "\001(\t\"0\n\nC_Register\022\014\n\004name\030\001 \001(\t\022\024\n\014passw"
  "ord_md5\030\002 \001(\t\"\036\n\013C_EnterRoom\022\017\n\007room_no\030"
  "\001 \001(\t\"\035\n\nC_RoomInfo\022\017\n\007room_no\030\001 \001(\t\"\036\n\t"
  "C_ModChar\022\021\n\tchar_type\030\001 \001(\005\"!\n\014C_Create"
  "Room\022\021\n\troom_name\030\001 \001(\t\"\"\n\013C_AddFriend\022\023"
  "\n\013friend_name\030\001 \001(\t\"3\n\rC_ReplyFriend\022\023\n\013"
  "friend_name\030\001 \001(\t\022\r\n\005state\030\002 \001(\005*\255\002\n\021Cli"
  "entCommandType\022\013\n\007C_EMPTY\020\000\022\013\n\007C_LOGIN\020\001"
  "\022\016\n\nC_REGISTER\020\002\022\017\n\013C_HALL_ROOM\020\003\022\014\n\010C_F"
  "RIEND\020\004\022\020\n\014C_ENTER_ROOM\020\005\022\017\n\013C_ROOM_INFO"
  "\020\006\022\021\n\rC_MODIFY_CHAR\020\007\022\013\n\007C_READY\020\010\022\022\n\016C_"
  "CANCEL_READY\020\t\022\020\n\014C_START_GAME\020\n\022\020\n\014C_EX"
  "IT_LOGIN\020\013\022\n\n\006C_QUIT\020\014\022\017\n\013C_EXIT_ROOM\020\r\022"
  "\021\n\rC_CREATE_ROOM\020\016\022\020\n\014C_ADD_FRIEND\020\017\022\022\n\016"
  "C_REPLY_FRIEND\020\020b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ClientToServer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ClientToServer_2eproto = {
    false, false, 664, descriptor_table_protodef_ClientToServer_2eproto,
    "ClientToServer.proto",
    &descriptor_table_ClientToServer_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_ClientToServer_2eproto::offsets,
    file_level_metadata_ClientToServer_2eproto, file_level_enum_descriptors_ClientToServer_2eproto,
    file_level_service_descriptors_ClientToServer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ClientToServer_2eproto_getter() {
  return &descriptor_table_ClientToServer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ClientToServer_2eproto(&descriptor_table_ClientToServer_2eproto);
namespace ChampionFist {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ClientToServer_2eproto);
  return file_level_enum_descriptors_ClientToServer_2eproto[0];
}
bool ClientCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class C_Login::_Internal {
 public:
};

C_Login::C_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.C_Login)
}
C_Login::C_Login(const C_Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  password_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password_md5().empty()) {
    password_md5_.Set(from._internal_password_md5(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChampionFist.C_Login)
}

inline void C_Login::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_md5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_md5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_Login::~C_Login() {
  // @@protoc_insertion_point(destructor:ChampionFist.C_Login)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  password_md5_.Destroy();
}

void C_Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.C_Login)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  password_md5_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Login::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.C_Login.name"));
        } else
          goto handle_unusual;
        continue;
      // string password_md5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.C_Login.password_md5"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Login::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.C_Login)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.C_Login.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_md5().data(), static_cast<int>(this->_internal_password_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.C_Login.password_md5");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.C_Login)
  return target;
}

size_t C_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.C_Login)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_md5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Login::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Login::GetClassData() const { return &_class_data_; }

void C_Login::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Login *>(to)->MergeFrom(
      static_cast<const C_Login &>(from));
}


void C_Login::MergeFrom(const C_Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.C_Login)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_password_md5().empty()) {
    _internal_set_password_md5(from._internal_password_md5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Login::CopyFrom(const C_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.C_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Login::IsInitialized() const {
  return true;
}

void C_Login::InternalSwap(C_Login* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &password_md5_, lhs_arena,
      &other->password_md5_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Login::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientToServer_2eproto_getter, &descriptor_table_ClientToServer_2eproto_once,
      file_level_metadata_ClientToServer_2eproto[0]);
}

// ===================================================================

class C_Register::_Internal {
 public:
};

C_Register::C_Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.C_Register)
}
C_Register::C_Register(const C_Register& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  password_md5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_md5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password_md5().empty()) {
    password_md5_.Set(from._internal_password_md5(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChampionFist.C_Register)
}

inline void C_Register::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_md5_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_md5_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_Register::~C_Register() {
  // @@protoc_insertion_point(destructor:ChampionFist.C_Register)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Register::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  password_md5_.Destroy();
}

void C_Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.C_Register)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  password_md5_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Register::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.C_Register.name"));
        } else
          goto handle_unusual;
        continue;
      // string password_md5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password_md5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.C_Register.password_md5"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Register::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.C_Register)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.C_Register.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_md5().data(), static_cast<int>(this->_internal_password_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.C_Register.password_md5");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.C_Register)
  return target;
}

size_t C_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.C_Register)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password_md5 = 2;
  if (!this->_internal_password_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_md5());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Register::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Register::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Register::GetClassData() const { return &_class_data_; }

void C_Register::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Register *>(to)->MergeFrom(
      static_cast<const C_Register &>(from));
}


void C_Register::MergeFrom(const C_Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.C_Register)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_password_md5().empty()) {
    _internal_set_password_md5(from._internal_password_md5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Register::CopyFrom(const C_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.C_Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Register::IsInitialized() const {
  return true;
}

void C_Register::InternalSwap(C_Register* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &password_md5_, lhs_arena,
      &other->password_md5_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Register::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientToServer_2eproto_getter, &descriptor_table_ClientToServer_2eproto_once,
      file_level_metadata_ClientToServer_2eproto[1]);
}

// ===================================================================

class C_EnterRoom::_Internal {
 public:
};

C_EnterRoom::C_EnterRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.C_EnterRoom)
}
C_EnterRoom::C_EnterRoom(const C_EnterRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_no_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_no_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_no().empty()) {
    room_no_.Set(from._internal_room_no(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChampionFist.C_EnterRoom)
}

inline void C_EnterRoom::SharedCtor() {
room_no_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_no_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_EnterRoom::~C_EnterRoom() {
  // @@protoc_insertion_point(destructor:ChampionFist.C_EnterRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_EnterRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_no_.Destroy();
}

void C_EnterRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_EnterRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.C_EnterRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_no_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_EnterRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_no();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.C_EnterRoom.room_no"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_EnterRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.C_EnterRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_no = 1;
  if (!this->_internal_room_no().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_no().data(), static_cast<int>(this->_internal_room_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.C_EnterRoom.room_no");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.C_EnterRoom)
  return target;
}

size_t C_EnterRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.C_EnterRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_no = 1;
  if (!this->_internal_room_no().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_EnterRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_EnterRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_EnterRoom::GetClassData() const { return &_class_data_; }

void C_EnterRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_EnterRoom *>(to)->MergeFrom(
      static_cast<const C_EnterRoom &>(from));
}


void C_EnterRoom::MergeFrom(const C_EnterRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.C_EnterRoom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_no().empty()) {
    _internal_set_room_no(from._internal_room_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_EnterRoom::CopyFrom(const C_EnterRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.C_EnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_EnterRoom::IsInitialized() const {
  return true;
}

void C_EnterRoom::InternalSwap(C_EnterRoom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_no_, lhs_arena,
      &other->room_no_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_EnterRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientToServer_2eproto_getter, &descriptor_table_ClientToServer_2eproto_once,
      file_level_metadata_ClientToServer_2eproto[2]);
}

// ===================================================================

class C_RoomInfo::_Internal {
 public:
};

C_RoomInfo::C_RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.C_RoomInfo)
}
C_RoomInfo::C_RoomInfo(const C_RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_no_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_no_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_no().empty()) {
    room_no_.Set(from._internal_room_no(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChampionFist.C_RoomInfo)
}

inline void C_RoomInfo::SharedCtor() {
room_no_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_no_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_RoomInfo::~C_RoomInfo() {
  // @@protoc_insertion_point(destructor:ChampionFist.C_RoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_RoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_no_.Destroy();
}

void C_RoomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.C_RoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_no_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_RoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_no();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.C_RoomInfo.room_no"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_RoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.C_RoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_no = 1;
  if (!this->_internal_room_no().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_no().data(), static_cast<int>(this->_internal_room_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.C_RoomInfo.room_no");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.C_RoomInfo)
  return target;
}

size_t C_RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.C_RoomInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_no = 1;
  if (!this->_internal_room_no().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_RoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_RoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_RoomInfo::GetClassData() const { return &_class_data_; }

void C_RoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_RoomInfo *>(to)->MergeFrom(
      static_cast<const C_RoomInfo &>(from));
}


void C_RoomInfo::MergeFrom(const C_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.C_RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_no().empty()) {
    _internal_set_room_no(from._internal_room_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_RoomInfo::CopyFrom(const C_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.C_RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_RoomInfo::IsInitialized() const {
  return true;
}

void C_RoomInfo::InternalSwap(C_RoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_no_, lhs_arena,
      &other->room_no_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_RoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientToServer_2eproto_getter, &descriptor_table_ClientToServer_2eproto_once,
      file_level_metadata_ClientToServer_2eproto[3]);
}

// ===================================================================

class C_ModChar::_Internal {
 public:
};

C_ModChar::C_ModChar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.C_ModChar)
}
C_ModChar::C_ModChar(const C_ModChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  char_type_ = from.char_type_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.C_ModChar)
}

inline void C_ModChar::SharedCtor() {
char_type_ = 0;
}

C_ModChar::~C_ModChar() {
  // @@protoc_insertion_point(destructor:ChampionFist.C_ModChar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ModChar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ModChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ModChar::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.C_ModChar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  char_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ModChar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 char_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          char_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ModChar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.C_ModChar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 char_type = 1;
  if (this->_internal_char_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_char_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.C_ModChar)
  return target;
}

size_t C_ModChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.C_ModChar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 char_type = 1;
  if (this->_internal_char_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_char_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ModChar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ModChar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ModChar::GetClassData() const { return &_class_data_; }

void C_ModChar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ModChar *>(to)->MergeFrom(
      static_cast<const C_ModChar &>(from));
}


void C_ModChar::MergeFrom(const C_ModChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.C_ModChar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_char_type() != 0) {
    _internal_set_char_type(from._internal_char_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ModChar::CopyFrom(const C_ModChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.C_ModChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ModChar::IsInitialized() const {
  return true;
}

void C_ModChar::InternalSwap(C_ModChar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(char_type_, other->char_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ModChar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientToServer_2eproto_getter, &descriptor_table_ClientToServer_2eproto_once,
      file_level_metadata_ClientToServer_2eproto[4]);
}

// ===================================================================

class C_CreateRoom::_Internal {
 public:
};

C_CreateRoom::C_CreateRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.C_CreateRoom)
}
C_CreateRoom::C_CreateRoom(const C_CreateRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    room_name_.Set(from._internal_room_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChampionFist.C_CreateRoom)
}

inline void C_CreateRoom::SharedCtor() {
room_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CreateRoom::~C_CreateRoom() {
  // @@protoc_insertion_point(destructor:ChampionFist.C_CreateRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CreateRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_name_.Destroy();
}

void C_CreateRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CreateRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.C_CreateRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CreateRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.C_CreateRoom.room_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CreateRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.C_CreateRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.C_CreateRoom.room_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.C_CreateRoom)
  return target;
}

size_t C_CreateRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.C_CreateRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 1;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CreateRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CreateRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CreateRoom::GetClassData() const { return &_class_data_; }

void C_CreateRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CreateRoom *>(to)->MergeFrom(
      static_cast<const C_CreateRoom &>(from));
}


void C_CreateRoom::MergeFrom(const C_CreateRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.C_CreateRoom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _internal_set_room_name(from._internal_room_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CreateRoom::CopyFrom(const C_CreateRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.C_CreateRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CreateRoom::IsInitialized() const {
  return true;
}

void C_CreateRoom::InternalSwap(C_CreateRoom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_name_, lhs_arena,
      &other->room_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CreateRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientToServer_2eproto_getter, &descriptor_table_ClientToServer_2eproto_once,
      file_level_metadata_ClientToServer_2eproto[5]);
}

// ===================================================================

class C_AddFriend::_Internal {
 public:
};

C_AddFriend::C_AddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.C_AddFriend)
}
C_AddFriend::C_AddFriend(const C_AddFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  friend_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    friend_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_friend_name().empty()) {
    friend_name_.Set(from._internal_friend_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChampionFist.C_AddFriend)
}

inline void C_AddFriend::SharedCtor() {
friend_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  friend_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_AddFriend::~C_AddFriend() {
  // @@protoc_insertion_point(destructor:ChampionFist.C_AddFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AddFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  friend_name_.Destroy();
}

void C_AddFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_AddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.C_AddFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AddFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string friend_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_friend_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.C_AddFriend.friend_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AddFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.C_AddFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string friend_name = 1;
  if (!this->_internal_friend_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_friend_name().data(), static_cast<int>(this->_internal_friend_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.C_AddFriend.friend_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_friend_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.C_AddFriend)
  return target;
}

size_t C_AddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.C_AddFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string friend_name = 1;
  if (!this->_internal_friend_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_friend_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AddFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_AddFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AddFriend::GetClassData() const { return &_class_data_; }

void C_AddFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_AddFriend *>(to)->MergeFrom(
      static_cast<const C_AddFriend &>(from));
}


void C_AddFriend::MergeFrom(const C_AddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.C_AddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_friend_name().empty()) {
    _internal_set_friend_name(from._internal_friend_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AddFriend::CopyFrom(const C_AddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.C_AddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AddFriend::IsInitialized() const {
  return true;
}

void C_AddFriend::InternalSwap(C_AddFriend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &friend_name_, lhs_arena,
      &other->friend_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AddFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientToServer_2eproto_getter, &descriptor_table_ClientToServer_2eproto_once,
      file_level_metadata_ClientToServer_2eproto[6]);
}

// ===================================================================

class C_ReplyFriend::_Internal {
 public:
};

C_ReplyFriend::C_ReplyFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.C_ReplyFriend)
}
C_ReplyFriend::C_ReplyFriend(const C_ReplyFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  friend_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    friend_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_friend_name().empty()) {
    friend_name_.Set(from._internal_friend_name(), 
      GetArenaForAllocation());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.C_ReplyFriend)
}

inline void C_ReplyFriend::SharedCtor() {
friend_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  friend_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
state_ = 0;
}

C_ReplyFriend::~C_ReplyFriend() {
  // @@protoc_insertion_point(destructor:ChampionFist.C_ReplyFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ReplyFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  friend_name_.Destroy();
}

void C_ReplyFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ReplyFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.C_ReplyFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_name_.ClearToEmpty();
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ReplyFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string friend_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_friend_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.C_ReplyFriend.friend_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ReplyFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.C_ReplyFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string friend_name = 1;
  if (!this->_internal_friend_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_friend_name().data(), static_cast<int>(this->_internal_friend_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.C_ReplyFriend.friend_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_friend_name(), target);
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.C_ReplyFriend)
  return target;
}

size_t C_ReplyFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.C_ReplyFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string friend_name = 1;
  if (!this->_internal_friend_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_friend_name());
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ReplyFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ReplyFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ReplyFriend::GetClassData() const { return &_class_data_; }

void C_ReplyFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ReplyFriend *>(to)->MergeFrom(
      static_cast<const C_ReplyFriend &>(from));
}


void C_ReplyFriend::MergeFrom(const C_ReplyFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.C_ReplyFriend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_friend_name().empty()) {
    _internal_set_friend_name(from._internal_friend_name());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ReplyFriend::CopyFrom(const C_ReplyFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.C_ReplyFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ReplyFriend::IsInitialized() const {
  return true;
}

void C_ReplyFriend::InternalSwap(C_ReplyFriend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &friend_name_, lhs_arena,
      &other->friend_name_, rhs_arena
  );
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ReplyFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientToServer_2eproto_getter, &descriptor_table_ClientToServer_2eproto_once,
      file_level_metadata_ClientToServer_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ChampionFist
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChampionFist::C_Login*
Arena::CreateMaybeMessage< ::ChampionFist::C_Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::C_Login >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::C_Register*
Arena::CreateMaybeMessage< ::ChampionFist::C_Register >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::C_Register >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::C_EnterRoom*
Arena::CreateMaybeMessage< ::ChampionFist::C_EnterRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::C_EnterRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::C_RoomInfo*
Arena::CreateMaybeMessage< ::ChampionFist::C_RoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::C_RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::C_ModChar*
Arena::CreateMaybeMessage< ::ChampionFist::C_ModChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::C_ModChar >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::C_CreateRoom*
Arena::CreateMaybeMessage< ::ChampionFist::C_CreateRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::C_CreateRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::C_AddFriend*
Arena::CreateMaybeMessage< ::ChampionFist::C_AddFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::C_AddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::C_ReplyFriend*
Arena::CreateMaybeMessage< ::ChampionFist::C_ReplyFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::C_ReplyFriend >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
