// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main_server_to_client.proto

#include "protobuf/main_server_to_client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ChampionFist {
class S_StartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S_Start> _instance;
} _S_Start_default_instance_;
}  // namespace ChampionFist
static void InitDefaultsscc_info_S_Start_main_5fserver_5fto_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChampionFist::_S_Start_default_instance_;
    new (ptr) ::ChampionFist::S_Start();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S_Start_main_5fserver_5fto_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S_Start_main_5fserver_5fto_5fclient_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_main_5fserver_5fto_5fclient_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_main_5fserver_5fto_5fclient_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_main_5fserver_5fto_5fclient_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_main_5fserver_5fto_5fclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Start, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Start, game_server_ip_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Start, game_server_port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChampionFist::S_Start)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChampionFist::_S_Start_default_instance_),
};

const char descriptor_table_protodef_main_5fserver_5fto_5fclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033main_server_to_client.proto\022\014ChampionF"
  "ist\";\n\007S_Start\022\026\n\016game_server_ip\030\001 \001(\t\022\030"
  "\n\020game_server_port\030\002 \001(\005* \n\021ServerComman"
  "dType\022\013\n\007S_START\020\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_main_5fserver_5fto_5fclient_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_main_5fserver_5fto_5fclient_2eproto_sccs[1] = {
  &scc_info_S_Start_main_5fserver_5fto_5fclient_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_main_5fserver_5fto_5fclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_main_5fserver_5fto_5fclient_2eproto = {
  false, false, descriptor_table_protodef_main_5fserver_5fto_5fclient_2eproto, "main_server_to_client.proto", 146,
  &descriptor_table_main_5fserver_5fto_5fclient_2eproto_once, descriptor_table_main_5fserver_5fto_5fclient_2eproto_sccs, descriptor_table_main_5fserver_5fto_5fclient_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_main_5fserver_5fto_5fclient_2eproto::offsets,
  file_level_metadata_main_5fserver_5fto_5fclient_2eproto, 1, file_level_enum_descriptors_main_5fserver_5fto_5fclient_2eproto, file_level_service_descriptors_main_5fserver_5fto_5fclient_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_main_5fserver_5fto_5fclient_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_main_5fserver_5fto_5fclient_2eproto)), true);
namespace ChampionFist {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_main_5fserver_5fto_5fclient_2eproto);
  return file_level_enum_descriptors_main_5fserver_5fto_5fclient_2eproto[0];
}
bool ServerCommandType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class S_Start::_Internal {
 public:
};

S_Start::S_Start(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_Start)
}
S_Start::S_Start(const S_Start& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_server_ip().empty()) {
    game_server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_server_ip(), 
      GetArena());
  }
  game_server_port_ = from.game_server_port_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_Start)
}

void S_Start::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S_Start_main_5fserver_5fto_5fclient_2eproto.base);
  game_server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_server_port_ = 0;
}

S_Start::~S_Start() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_Start)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Start::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_server_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_Start::ArenaDtor(void* object) {
  S_Start* _this = reinterpret_cast< S_Start* >(object);
  (void)_this;
}
void S_Start::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Start::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S_Start& S_Start::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S_Start_main_5fserver_5fto_5fclient_2eproto.base);
  return *internal_default_instance();
}


void S_Start::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_Start)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_server_ip_.ClearToEmpty();
  game_server_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Start::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string game_server_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_game_server_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChampionFist.S_Start.game_server_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_server_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Start::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_Start)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string game_server_ip = 1;
  if (this->game_server_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_server_ip().data(), static_cast<int>(this->_internal_game_server_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.S_Start.game_server_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_game_server_ip(), target);
  }

  // int32 game_server_port = 2;
  if (this->game_server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_game_server_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_Start)
  return target;
}

size_t S_Start::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_Start)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string game_server_ip = 1;
  if (this->game_server_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_server_ip());
  }

  // int32 game_server_port = 2;
  if (this->game_server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_server_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Start::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChampionFist.S_Start)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Start* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Start>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChampionFist.S_Start)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChampionFist.S_Start)
    MergeFrom(*source);
  }
}

void S_Start::MergeFrom(const S_Start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_Start)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_server_ip().size() > 0) {
    _internal_set_game_server_ip(from._internal_game_server_ip());
  }
  if (from.game_server_port() != 0) {
    _internal_set_game_server_port(from._internal_game_server_port());
  }
}

void S_Start::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChampionFist.S_Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Start::CopyFrom(const S_Start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Start::IsInitialized() const {
  return true;
}

void S_Start::InternalSwap(S_Start* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_server_ip_.Swap(&other->game_server_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(game_server_port_, other->game_server_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Start::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ChampionFist
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChampionFist::S_Start* Arena::CreateMaybeMessage< ::ChampionFist::S_Start >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_Start >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
