// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerToClient.proto

#include "ServerToClient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ChampionFist {
PROTOBUF_CONSTEXPR S_Login::S_Login(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_LoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LoginDefaultTypeInternal() {}
  union {
    S_Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LoginDefaultTypeInternal _S_Login_default_instance_;
PROTOBUF_CONSTEXPR S_Register::S_Register(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_RegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_RegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_RegisterDefaultTypeInternal() {}
  union {
    S_Register _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_RegisterDefaultTypeInternal _S_Register_default_instance_;
PROTOBUF_CONSTEXPR RoomInfo::RoomInfo(
    ::_pbi::ConstantInitialized)
  : room_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , room_no_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , player_number_(0)
  , state_(0)
  , room_index_(0){}
struct RoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomInfoDefaultTypeInternal() {}
  union {
    RoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
PROTOBUF_CONSTEXPR S_HallRoom::S_HallRoom(
    ::_pbi::ConstantInitialized)
  : room_info_()
  , total_room_num_(0)
  , page_room_num_(0){}
struct S_HallRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_HallRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_HallRoomDefaultTypeInternal() {}
  union {
    S_HallRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_HallRoomDefaultTypeInternal _S_HallRoom_default_instance_;
PROTOBUF_CONSTEXPR FriendInfo::FriendInfo(
    ::_pbi::ConstantInitialized)
  : player_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , state_(0){}
struct FriendInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendInfoDefaultTypeInternal() {}
  union {
    FriendInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
PROTOBUF_CONSTEXPR S_Friend::S_Friend(
    ::_pbi::ConstantInitialized)
  : friend_info_(){}
struct S_FriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FriendDefaultTypeInternal() {}
  union {
    S_Friend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FriendDefaultTypeInternal _S_Friend_default_instance_;
PROTOBUF_CONSTEXPR S_FriendUpdate::S_FriendUpdate(
    ::_pbi::ConstantInitialized)
  : friend_info_(nullptr){}
struct S_FriendUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FriendUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FriendUpdateDefaultTypeInternal() {}
  union {
    S_FriendUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FriendUpdateDefaultTypeInternal _S_FriendUpdate_default_instance_;
PROTOBUF_CONSTEXPR S_EnterRoom::S_EnterRoom(
    ::_pbi::ConstantInitialized)
  : room_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , room_no_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , seat_no_(0)
  , state_(0){}
struct S_EnterRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EnterRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EnterRoomDefaultTypeInternal() {}
  union {
    S_EnterRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EnterRoomDefaultTypeInternal _S_EnterRoom_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized)
  : player_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , char_type_(0)
  , ready_(0)
  , owner_(0){}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR SeatInfo::SeatInfo(
    ::_pbi::ConstantInitialized)
  : player_info_(nullptr)
  , empty_(0)
  , seat_no_(0){}
struct SeatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeatInfoDefaultTypeInternal() {}
  union {
    SeatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeatInfoDefaultTypeInternal _SeatInfo_default_instance_;
PROTOBUF_CONSTEXPR S_RoomInfo::S_RoomInfo(
    ::_pbi::ConstantInitialized)
  : seat_info_(){}
struct S_RoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_RoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_RoomInfoDefaultTypeInternal() {}
  union {
    S_RoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_RoomInfoDefaultTypeInternal _S_RoomInfo_default_instance_;
PROTOBUF_CONSTEXPR S_ExitRoom::S_ExitRoom(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_ExitRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ExitRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ExitRoomDefaultTypeInternal() {}
  union {
    S_ExitRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ExitRoomDefaultTypeInternal _S_ExitRoom_default_instance_;
PROTOBUF_CONSTEXPR S_UpdateRoom::S_UpdateRoom(
    ::_pbi::ConstantInitialized)
  : seat_info_(nullptr){}
struct S_UpdateRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_UpdateRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_UpdateRoomDefaultTypeInternal() {}
  union {
    S_UpdateRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_UpdateRoomDefaultTypeInternal _S_UpdateRoom_default_instance_;
PROTOBUF_CONSTEXPR S_ModChar::S_ModChar(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_ModCharDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ModCharDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ModCharDefaultTypeInternal() {}
  union {
    S_ModChar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ModCharDefaultTypeInternal _S_ModChar_default_instance_;
PROTOBUF_CONSTEXPR S_Ready::S_Ready(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_ReadyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ReadyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ReadyDefaultTypeInternal() {}
  union {
    S_Ready _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ReadyDefaultTypeInternal _S_Ready_default_instance_;
PROTOBUF_CONSTEXPR S_CancelReady::S_CancelReady(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_CancelReadyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CancelReadyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CancelReadyDefaultTypeInternal() {}
  union {
    S_CancelReady _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CancelReadyDefaultTypeInternal _S_CancelReady_default_instance_;
PROTOBUF_CONSTEXPR S_StartGame::S_StartGame(
    ::_pbi::ConstantInitialized)
  : state_(0)
  , port_(0){}
struct S_StartGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_StartGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_StartGameDefaultTypeInternal() {}
  union {
    S_StartGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_StartGameDefaultTypeInternal _S_StartGame_default_instance_;
PROTOBUF_CONSTEXPR S_ExitLogin::S_ExitLogin(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_ExitLoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ExitLoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ExitLoginDefaultTypeInternal() {}
  union {
    S_ExitLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ExitLoginDefaultTypeInternal _S_ExitLogin_default_instance_;
PROTOBUF_CONSTEXPR S_Quit::S_Quit(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_QuitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_QuitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_QuitDefaultTypeInternal() {}
  union {
    S_Quit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_QuitDefaultTypeInternal _S_Quit_default_instance_;
PROTOBUF_CONSTEXPR S_AddFriend::S_AddFriend(
    ::_pbi::ConstantInitialized)
  : state_(0){}
struct S_AddFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AddFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AddFriendDefaultTypeInternal() {}
  union {
    S_AddFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AddFriendDefaultTypeInternal _S_AddFriend_default_instance_;
PROTOBUF_CONSTEXPR AddFriendInfo::AddFriendInfo(
    ::_pbi::ConstantInitialized)
  : friend_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AddFriendInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddFriendInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddFriendInfoDefaultTypeInternal() {}
  union {
    AddFriendInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddFriendInfoDefaultTypeInternal _AddFriendInfo_default_instance_;
PROTOBUF_CONSTEXPR S_OtherAddFriend::S_OtherAddFriend(
    ::_pbi::ConstantInitialized)
  : friend_info_(nullptr){}
struct S_OtherAddFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OtherAddFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OtherAddFriendDefaultTypeInternal() {}
  union {
    S_OtherAddFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OtherAddFriendDefaultTypeInternal _S_OtherAddFriend_default_instance_;
PROTOBUF_CONSTEXPR S_CreateRoom::S_CreateRoom(
    ::_pbi::ConstantInitialized)
  : room_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , room_no_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , state_(0){}
struct S_CreateRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CreateRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CreateRoomDefaultTypeInternal() {}
  union {
    S_CreateRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CreateRoomDefaultTypeInternal _S_CreateRoom_default_instance_;
}  // namespace ChampionFist
static ::_pb::Metadata file_level_metadata_ServerToClient_2eproto[23];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ServerToClient_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ServerToClient_2eproto = nullptr;

const uint32_t TableStruct_ServerToClient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Login, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Register, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::RoomInfo, player_number_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::RoomInfo, room_name_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::RoomInfo, room_no_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::RoomInfo, state_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::RoomInfo, room_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_HallRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_HallRoom, total_room_num_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_HallRoom, page_room_num_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_HallRoom, room_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::FriendInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::FriendInfo, player_name_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::FriendInfo, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Friend, friend_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_FriendUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_FriendUpdate, friend_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_EnterRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_EnterRoom, seat_no_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_EnterRoom, state_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_EnterRoom, room_name_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_EnterRoom, room_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::PlayerInfo, player_name_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::PlayerInfo, char_type_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::PlayerInfo, ready_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::PlayerInfo, owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::SeatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::SeatInfo, empty_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::SeatInfo, seat_no_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::SeatInfo, player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_RoomInfo, seat_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_ExitRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_ExitRoom, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_UpdateRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_UpdateRoom, seat_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_ModChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_ModChar, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Ready, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Ready, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_CancelReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_CancelReady, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_StartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_StartGame, state_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_StartGame, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_ExitLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_ExitLogin, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Quit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_Quit, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_AddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_AddFriend, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::AddFriendInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::AddFriendInfo, friend_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_OtherAddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_OtherAddFriend, friend_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_CreateRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_CreateRoom, state_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_CreateRoom, room_name_),
  PROTOBUF_FIELD_OFFSET(::ChampionFist::S_CreateRoom, room_no_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ChampionFist::S_Login)},
  { 7, -1, -1, sizeof(::ChampionFist::S_Register)},
  { 14, -1, -1, sizeof(::ChampionFist::RoomInfo)},
  { 25, -1, -1, sizeof(::ChampionFist::S_HallRoom)},
  { 34, -1, -1, sizeof(::ChampionFist::FriendInfo)},
  { 42, -1, -1, sizeof(::ChampionFist::S_Friend)},
  { 49, -1, -1, sizeof(::ChampionFist::S_FriendUpdate)},
  { 56, -1, -1, sizeof(::ChampionFist::S_EnterRoom)},
  { 66, -1, -1, sizeof(::ChampionFist::PlayerInfo)},
  { 76, -1, -1, sizeof(::ChampionFist::SeatInfo)},
  { 85, -1, -1, sizeof(::ChampionFist::S_RoomInfo)},
  { 92, -1, -1, sizeof(::ChampionFist::S_ExitRoom)},
  { 99, -1, -1, sizeof(::ChampionFist::S_UpdateRoom)},
  { 106, -1, -1, sizeof(::ChampionFist::S_ModChar)},
  { 113, -1, -1, sizeof(::ChampionFist::S_Ready)},
  { 120, -1, -1, sizeof(::ChampionFist::S_CancelReady)},
  { 127, -1, -1, sizeof(::ChampionFist::S_StartGame)},
  { 135, -1, -1, sizeof(::ChampionFist::S_ExitLogin)},
  { 142, -1, -1, sizeof(::ChampionFist::S_Quit)},
  { 149, -1, -1, sizeof(::ChampionFist::S_AddFriend)},
  { 156, -1, -1, sizeof(::ChampionFist::AddFriendInfo)},
  { 163, -1, -1, sizeof(::ChampionFist::S_OtherAddFriend)},
  { 170, -1, -1, sizeof(::ChampionFist::S_CreateRoom)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ChampionFist::_S_Login_default_instance_._instance,
  &::ChampionFist::_S_Register_default_instance_._instance,
  &::ChampionFist::_RoomInfo_default_instance_._instance,
  &::ChampionFist::_S_HallRoom_default_instance_._instance,
  &::ChampionFist::_FriendInfo_default_instance_._instance,
  &::ChampionFist::_S_Friend_default_instance_._instance,
  &::ChampionFist::_S_FriendUpdate_default_instance_._instance,
  &::ChampionFist::_S_EnterRoom_default_instance_._instance,
  &::ChampionFist::_PlayerInfo_default_instance_._instance,
  &::ChampionFist::_SeatInfo_default_instance_._instance,
  &::ChampionFist::_S_RoomInfo_default_instance_._instance,
  &::ChampionFist::_S_ExitRoom_default_instance_._instance,
  &::ChampionFist::_S_UpdateRoom_default_instance_._instance,
  &::ChampionFist::_S_ModChar_default_instance_._instance,
  &::ChampionFist::_S_Ready_default_instance_._instance,
  &::ChampionFist::_S_CancelReady_default_instance_._instance,
  &::ChampionFist::_S_StartGame_default_instance_._instance,
  &::ChampionFist::_S_ExitLogin_default_instance_._instance,
  &::ChampionFist::_S_Quit_default_instance_._instance,
  &::ChampionFist::_S_AddFriend_default_instance_._instance,
  &::ChampionFist::_AddFriendInfo_default_instance_._instance,
  &::ChampionFist::_S_OtherAddFriend_default_instance_._instance,
  &::ChampionFist::_S_CreateRoom_default_instance_._instance,
};

const char descriptor_table_protodef_ServerToClient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ServerToClient.proto\022\014ChampionFist\"\030\n\007"
  "S_Login\022\r\n\005state\030\001 \001(\005\"\033\n\nS_Register\022\r\n\005"
  "state\030\001 \001(\005\"h\n\010RoomInfo\022\025\n\rplayer_number"
  "\030\001 \001(\005\022\021\n\troom_name\030\002 \001(\t\022\017\n\007room_no\030\003 \001"
  "(\t\022\r\n\005state\030\004 \001(\005\022\022\n\nroom_index\030\005 \001(\005\"f\n"
  "\nS_HallRoom\022\026\n\016total_room_num\030\001 \001(\005\022\025\n\rp"
  "age_room_num\030\002 \001(\005\022)\n\troom_info\030\003 \003(\0132\026."
  "ChampionFist.RoomInfo\"0\n\nFriendInfo\022\023\n\013p"
  "layer_name\030\001 \001(\t\022\r\n\005state\030\002 \001(\005\"9\n\010S_Fri"
  "end\022-\n\013friend_info\030\001 \003(\0132\030.ChampionFist."
  "FriendInfo\"\?\n\016S_FriendUpdate\022-\n\013friend_i"
  "nfo\030\001 \001(\0132\030.ChampionFist.FriendInfo\"Q\n\013S"
  "_EnterRoom\022\017\n\007seat_no\030\001 \001(\005\022\r\n\005state\030\002 \001"
  "(\005\022\021\n\troom_name\030\003 \001(\t\022\017\n\007room_no\030\004 \001(\t\"R"
  "\n\nPlayerInfo\022\023\n\013player_name\030\001 \001(\t\022\021\n\tcha"
  "r_type\030\002 \001(\005\022\r\n\005ready\030\003 \001(\005\022\r\n\005owner\030\004 \001"
  "(\005\"Y\n\010SeatInfo\022\r\n\005empty\030\001 \001(\005\022\017\n\007seat_no"
  "\030\002 \001(\005\022-\n\013player_info\030\003 \001(\0132\030.ChampionFi"
  "st.PlayerInfo\"7\n\nS_RoomInfo\022)\n\tseat_info"
  "\030\001 \003(\0132\026.ChampionFist.SeatInfo\"\033\n\nS_Exit"
  "Room\022\r\n\005state\030\001 \001(\005\"9\n\014S_UpdateRoom\022)\n\ts"
  "eat_info\030\001 \001(\0132\026.ChampionFist.SeatInfo\"\032"
  "\n\tS_ModChar\022\r\n\005state\030\001 \001(\005\"\030\n\007S_Ready\022\r\n"
  "\005state\030\001 \001(\005\"\036\n\rS_CancelReady\022\r\n\005state\030\001"
  " \001(\005\"*\n\013S_StartGame\022\r\n\005state\030\001 \001(\005\022\014\n\004po"
  "rt\030\002 \001(\005\"\034\n\013S_ExitLogin\022\r\n\005state\030\001 \001(\005\"\027"
  "\n\006S_Quit\022\r\n\005state\030\001 \001(\005\"\034\n\013S_AddFriend\022\r"
  "\n\005state\030\001 \001(\005\"$\n\rAddFriendInfo\022\023\n\013friend"
  "_name\030\001 \001(\t\"D\n\020S_OtherAddFriend\0220\n\013frien"
  "d_info\030\001 \001(\0132\033.ChampionFist.AddFriendInf"
  "o\"A\n\014S_CreateRoom\022\r\n\005state\030\001 \001(\005\022\021\n\troom"
  "_name\030\002 \001(\t\022\017\n\007room_no\030\003 \001(\t*\331\002\n\021ServerC"
  "ommandType\022\013\n\007S_EMPTY\020\000\022\013\n\007S_LOGIN\020\001\022\016\n\n"
  "S_REGISTER\020\002\022\017\n\013S_HALL_ROOM\020\003\022\014\n\010S_FRIEN"
  "D\020\004\022\023\n\017S_FRIEND_UPDATE\020\005\022\020\n\014S_ENTER_ROOM"
  "\020\006\022\017\n\013S_ROOM_INFO\020\007\022\017\n\013S_EXIT_ROOM\020\010\022\021\n\r"
  "S_UPDATE_ROOM\020\t\022\021\n\rS_MODIFY_CHAR\020\n\022\013\n\007S_"
  "READY\020\013\022\022\n\016S_CANCEL_READY\020\014\022\020\n\014S_START_G"
  "AME\020\r\022\020\n\014S_EXIT_LOGIN\020\016\022\n\n\006S_QUIT\020\017\022\020\n\014S"
  "_ADD_FRIEND\020\020\022\026\n\022S_OTHER_ADD_FRIEND\020\021\022\021\n"
  "\rS_CREATE_ROOM\020\022b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ServerToClient_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ServerToClient_2eproto = {
    false, false, 1624, descriptor_table_protodef_ServerToClient_2eproto,
    "ServerToClient.proto",
    &descriptor_table_ServerToClient_2eproto_once, nullptr, 0, 23,
    schemas, file_default_instances, TableStruct_ServerToClient_2eproto::offsets,
    file_level_metadata_ServerToClient_2eproto, file_level_enum_descriptors_ServerToClient_2eproto,
    file_level_service_descriptors_ServerToClient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ServerToClient_2eproto_getter() {
  return &descriptor_table_ServerToClient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ServerToClient_2eproto(&descriptor_table_ServerToClient_2eproto);
namespace ChampionFist {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ServerToClient_2eproto);
  return file_level_enum_descriptors_ServerToClient_2eproto[0];
}
bool ServerCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class S_Login::_Internal {
 public:
};

S_Login::S_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_Login)
}
S_Login::S_Login(const S_Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_Login)
}

inline void S_Login::SharedCtor() {
state_ = 0;
}

S_Login::~S_Login() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_Login)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_Login)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Login::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Login::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_Login)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_Login)
  return target;
}

size_t S_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_Login)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Login::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Login::GetClassData() const { return &_class_data_; }

void S_Login::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Login *>(to)->MergeFrom(
      static_cast<const S_Login &>(from));
}


void S_Login::MergeFrom(const S_Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_Login)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Login::CopyFrom(const S_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Login::IsInitialized() const {
  return true;
}

void S_Login::InternalSwap(S_Login* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Login::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[0]);
}

// ===================================================================

class S_Register::_Internal {
 public:
};

S_Register::S_Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_Register)
}
S_Register::S_Register(const S_Register& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_Register)
}

inline void S_Register::SharedCtor() {
state_ = 0;
}

S_Register::~S_Register() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_Register)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Register::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_Register)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Register::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Register::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_Register)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_Register)
  return target;
}

size_t S_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_Register)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Register::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Register::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Register::GetClassData() const { return &_class_data_; }

void S_Register::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Register *>(to)->MergeFrom(
      static_cast<const S_Register &>(from));
}


void S_Register::MergeFrom(const S_Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_Register)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Register::CopyFrom(const S_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Register::IsInitialized() const {
  return true;
}

void S_Register::InternalSwap(S_Register* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Register::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[1]);
}

// ===================================================================

class RoomInfo::_Internal {
 public:
};

RoomInfo::RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    room_name_.Set(from._internal_room_name(), 
      GetArenaForAllocation());
  }
  room_no_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_no_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_no().empty()) {
    room_no_.Set(from._internal_room_no(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_number_, &from.player_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&room_index_) -
    reinterpret_cast<char*>(&player_number_)) + sizeof(room_index_));
  // @@protoc_insertion_point(copy_constructor:ChampionFist.RoomInfo)
}

inline void RoomInfo::SharedCtor() {
room_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
room_no_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_no_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&room_index_) -
    reinterpret_cast<char*>(&player_number_)) + sizeof(room_index_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:ChampionFist.RoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_name_.Destroy();
  room_no_.Destroy();
}

void RoomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.RoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_name_.ClearToEmpty();
  room_no_.ClearToEmpty();
  ::memset(&player_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_index_) -
      reinterpret_cast<char*>(&player_number_)) + sizeof(room_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.RoomInfo.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string room_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_room_no();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.RoomInfo.room_no"));
        } else
          goto handle_unusual;
        continue;
      // int32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 room_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          room_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.RoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_number = 1;
  if (this->_internal_player_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_number(), target);
  }

  // string room_name = 2;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.RoomInfo.room_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_name(), target);
  }

  // string room_no = 3;
  if (!this->_internal_room_no().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_no().data(), static_cast<int>(this->_internal_room_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.RoomInfo.room_no");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_room_no(), target);
  }

  // int32 state = 4;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_state(), target);
  }

  // int32 room_index = 5;
  if (this->_internal_room_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_room_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.RoomInfo)
  return target;
}

size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.RoomInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 2;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string room_no = 3;
  if (!this->_internal_room_no().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_no());
  }

  // int32 player_number = 1;
  if (this->_internal_player_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_number());
  }

  // int32 state = 4;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  // int32 room_index = 5;
  if (this->_internal_room_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomInfo::GetClassData() const { return &_class_data_; }

void RoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomInfo *>(to)->MergeFrom(
      static_cast<const RoomInfo &>(from));
}


void RoomInfo::MergeFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_room_no().empty()) {
    _internal_set_room_no(from._internal_room_no());
  }
  if (from._internal_player_number() != 0) {
    _internal_set_player_number(from._internal_player_number());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_room_index() != 0) {
    _internal_set_room_index(from._internal_room_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  return true;
}

void RoomInfo::InternalSwap(RoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_name_, lhs_arena,
      &other->room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_no_, lhs_arena,
      &other->room_no_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomInfo, room_index_)
      + sizeof(RoomInfo::room_index_)
      - PROTOBUF_FIELD_OFFSET(RoomInfo, player_number_)>(
          reinterpret_cast<char*>(&player_number_),
          reinterpret_cast<char*>(&other->player_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[2]);
}

// ===================================================================

class S_HallRoom::_Internal {
 public:
};

S_HallRoom::S_HallRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  room_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_HallRoom)
}
S_HallRoom::S_HallRoom(const S_HallRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      room_info_(from.room_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_room_num_, &from.total_room_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_room_num_) -
    reinterpret_cast<char*>(&total_room_num_)) + sizeof(page_room_num_));
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_HallRoom)
}

inline void S_HallRoom::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_room_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_room_num_) -
    reinterpret_cast<char*>(&total_room_num_)) + sizeof(page_room_num_));
}

S_HallRoom::~S_HallRoom() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_HallRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_HallRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_HallRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_HallRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_HallRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_info_.Clear();
  ::memset(&total_room_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_room_num_) -
      reinterpret_cast<char*>(&total_room_num_)) + sizeof(page_room_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_HallRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 total_room_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          total_room_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_room_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_room_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ChampionFist.RoomInfo room_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_room_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_HallRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_HallRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_room_num = 1;
  if (this->_internal_total_room_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_room_num(), target);
  }

  // int32 page_room_num = 2;
  if (this->_internal_page_room_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_room_num(), target);
  }

  // repeated .ChampionFist.RoomInfo room_info = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_room_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_room_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_HallRoom)
  return target;
}

size_t S_HallRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_HallRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChampionFist.RoomInfo room_info = 3;
  total_size += 1UL * this->_internal_room_info_size();
  for (const auto& msg : this->room_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_room_num = 1;
  if (this->_internal_total_room_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_room_num());
  }

  // int32 page_room_num = 2;
  if (this->_internal_page_room_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_room_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_HallRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_HallRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_HallRoom::GetClassData() const { return &_class_data_; }

void S_HallRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_HallRoom *>(to)->MergeFrom(
      static_cast<const S_HallRoom &>(from));
}


void S_HallRoom::MergeFrom(const S_HallRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_HallRoom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  room_info_.MergeFrom(from.room_info_);
  if (from._internal_total_room_num() != 0) {
    _internal_set_total_room_num(from._internal_total_room_num());
  }
  if (from._internal_page_room_num() != 0) {
    _internal_set_page_room_num(from._internal_page_room_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_HallRoom::CopyFrom(const S_HallRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_HallRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_HallRoom::IsInitialized() const {
  return true;
}

void S_HallRoom::InternalSwap(S_HallRoom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  room_info_.InternalSwap(&other->room_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_HallRoom, page_room_num_)
      + sizeof(S_HallRoom::page_room_num_)
      - PROTOBUF_FIELD_OFFSET(S_HallRoom, total_room_num_)>(
          reinterpret_cast<char*>(&total_room_num_),
          reinterpret_cast<char*>(&other->total_room_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_HallRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[3]);
}

// ===================================================================

class FriendInfo::_Internal {
 public:
};

FriendInfo::FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.FriendInfo)
}
FriendInfo::FriendInfo(const FriendInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    player_name_.Set(from._internal_player_name(), 
      GetArenaForAllocation());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.FriendInfo)
}

inline void FriendInfo::SharedCtor() {
player_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  player_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
state_ = 0;
}

FriendInfo::~FriendInfo() {
  // @@protoc_insertion_point(destructor:ChampionFist.FriendInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  player_name_.Destroy();
}

void FriendInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.FriendInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_name_.ClearToEmpty();
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.FriendInfo.player_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.FriendInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_name = 1;
  if (!this->_internal_player_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.FriendInfo.player_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_name(), target);
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.FriendInfo)
  return target;
}

size_t FriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.FriendInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 1;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendInfo::GetClassData() const { return &_class_data_; }

void FriendInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendInfo *>(to)->MergeFrom(
      static_cast<const FriendInfo &>(from));
}


void FriendInfo::MergeFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.FriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_name().empty()) {
    _internal_set_player_name(from._internal_player_name());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  return true;
}

void FriendInfo::InternalSwap(FriendInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &player_name_, lhs_arena,
      &other->player_name_, rhs_arena
  );
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[4]);
}

// ===================================================================

class S_Friend::_Internal {
 public:
};

S_Friend::S_Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  friend_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_Friend)
}
S_Friend::S_Friend(const S_Friend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      friend_info_(from.friend_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_Friend)
}

inline void S_Friend::SharedCtor() {
}

S_Friend::~S_Friend() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_Friend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Friend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Friend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_Friend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Friend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ChampionFist.FriendInfo friend_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friend_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Friend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_Friend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChampionFist.FriendInfo friend_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_friend_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_friend_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_Friend)
  return target;
}

size_t S_Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_Friend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChampionFist.FriendInfo friend_info = 1;
  total_size += 1UL * this->_internal_friend_info_size();
  for (const auto& msg : this->friend_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Friend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Friend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Friend::GetClassData() const { return &_class_data_; }

void S_Friend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Friend *>(to)->MergeFrom(
      static_cast<const S_Friend &>(from));
}


void S_Friend::MergeFrom(const S_Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_Friend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  friend_info_.MergeFrom(from.friend_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Friend::CopyFrom(const S_Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Friend::IsInitialized() const {
  return true;
}

void S_Friend::InternalSwap(S_Friend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  friend_info_.InternalSwap(&other->friend_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Friend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[5]);
}

// ===================================================================

class S_FriendUpdate::_Internal {
 public:
  static const ::ChampionFist::FriendInfo& friend_info(const S_FriendUpdate* msg);
};

const ::ChampionFist::FriendInfo&
S_FriendUpdate::_Internal::friend_info(const S_FriendUpdate* msg) {
  return *msg->friend_info_;
}
S_FriendUpdate::S_FriendUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_FriendUpdate)
}
S_FriendUpdate::S_FriendUpdate(const S_FriendUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_friend_info()) {
    friend_info_ = new ::ChampionFist::FriendInfo(*from.friend_info_);
  } else {
    friend_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_FriendUpdate)
}

inline void S_FriendUpdate::SharedCtor() {
friend_info_ = nullptr;
}

S_FriendUpdate::~S_FriendUpdate() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_FriendUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_FriendUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete friend_info_;
}

void S_FriendUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_FriendUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_FriendUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && friend_info_ != nullptr) {
    delete friend_info_;
  }
  friend_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_FriendUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChampionFist.FriendInfo friend_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_FriendUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_FriendUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChampionFist.FriendInfo friend_info = 1;
  if (this->_internal_has_friend_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::friend_info(this),
        _Internal::friend_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_FriendUpdate)
  return target;
}

size_t S_FriendUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_FriendUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChampionFist.FriendInfo friend_info = 1;
  if (this->_internal_has_friend_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *friend_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FriendUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_FriendUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FriendUpdate::GetClassData() const { return &_class_data_; }

void S_FriendUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_FriendUpdate *>(to)->MergeFrom(
      static_cast<const S_FriendUpdate &>(from));
}


void S_FriendUpdate::MergeFrom(const S_FriendUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_FriendUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friend_info()) {
    _internal_mutable_friend_info()->::ChampionFist::FriendInfo::MergeFrom(from._internal_friend_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_FriendUpdate::CopyFrom(const S_FriendUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_FriendUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_FriendUpdate::IsInitialized() const {
  return true;
}

void S_FriendUpdate::InternalSwap(S_FriendUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(friend_info_, other->friend_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_FriendUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[6]);
}

// ===================================================================

class S_EnterRoom::_Internal {
 public:
};

S_EnterRoom::S_EnterRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_EnterRoom)
}
S_EnterRoom::S_EnterRoom(const S_EnterRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    room_name_.Set(from._internal_room_name(), 
      GetArenaForAllocation());
  }
  room_no_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_no_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_no().empty()) {
    room_no_.Set(from._internal_room_no(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seat_no_, &from.seat_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&seat_no_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_EnterRoom)
}

inline void S_EnterRoom::SharedCtor() {
room_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
room_no_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_no_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seat_no_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&seat_no_)) + sizeof(state_));
}

S_EnterRoom::~S_EnterRoom() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_EnterRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_EnterRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_name_.Destroy();
  room_no_.Destroy();
}

void S_EnterRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_EnterRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_EnterRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_name_.ClearToEmpty();
  room_no_.ClearToEmpty();
  ::memset(&seat_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&seat_no_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_EnterRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 seat_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seat_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.S_EnterRoom.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string room_no = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_room_no();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.S_EnterRoom.room_no"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_EnterRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_EnterRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seat_no = 1;
  if (this->_internal_seat_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_seat_no(), target);
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // string room_name = 3;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.S_EnterRoom.room_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_room_name(), target);
  }

  // string room_no = 4;
  if (!this->_internal_room_no().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_no().data(), static_cast<int>(this->_internal_room_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.S_EnterRoom.room_no");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_room_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_EnterRoom)
  return target;
}

size_t S_EnterRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_EnterRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 3;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string room_no = 4;
  if (!this->_internal_room_no().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_no());
  }

  // int32 seat_no = 1;
  if (this->_internal_seat_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seat_no());
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_EnterRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_EnterRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_EnterRoom::GetClassData() const { return &_class_data_; }

void S_EnterRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_EnterRoom *>(to)->MergeFrom(
      static_cast<const S_EnterRoom &>(from));
}


void S_EnterRoom::MergeFrom(const S_EnterRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_EnterRoom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_room_no().empty()) {
    _internal_set_room_no(from._internal_room_no());
  }
  if (from._internal_seat_no() != 0) {
    _internal_set_seat_no(from._internal_seat_no());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_EnterRoom::CopyFrom(const S_EnterRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_EnterRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_EnterRoom::IsInitialized() const {
  return true;
}

void S_EnterRoom::InternalSwap(S_EnterRoom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_name_, lhs_arena,
      &other->room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_no_, lhs_arena,
      &other->room_no_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_EnterRoom, state_)
      + sizeof(S_EnterRoom::state_)
      - PROTOBUF_FIELD_OFFSET(S_EnterRoom, seat_no_)>(
          reinterpret_cast<char*>(&seat_no_),
          reinterpret_cast<char*>(&other->seat_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_EnterRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[7]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
};

PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    player_name_.Set(from._internal_player_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&char_type_, &from.char_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_) -
    reinterpret_cast<char*>(&char_type_)) + sizeof(owner_));
  // @@protoc_insertion_point(copy_constructor:ChampionFist.PlayerInfo)
}

inline void PlayerInfo::SharedCtor() {
player_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  player_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&char_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_) -
    reinterpret_cast<char*>(&char_type_)) + sizeof(owner_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:ChampionFist.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  player_name_.Destroy();
}

void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_name_.ClearToEmpty();
  ::memset(&char_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_) -
      reinterpret_cast<char*>(&char_type_)) + sizeof(owner_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.PlayerInfo.player_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 char_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          char_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ready = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 owner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_name = 1;
  if (!this->_internal_player_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.PlayerInfo.player_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_name(), target);
  }

  // int32 char_type = 2;
  if (this->_internal_char_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_char_type(), target);
  }

  // int32 ready = 3;
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ready(), target);
  }

  // int32 owner = 4;
  if (this->_internal_owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 1;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // int32 char_type = 2;
  if (this->_internal_char_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_char_type());
  }

  // int32 ready = 3;
  if (this->_internal_ready() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ready());
  }

  // int32 owner = 4;
  if (this->_internal_owner() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_owner());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }

void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerInfo *>(to)->MergeFrom(
      static_cast<const PlayerInfo &>(from));
}


void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_name().empty()) {
    _internal_set_player_name(from._internal_player_name());
  }
  if (from._internal_char_type() != 0) {
    _internal_set_char_type(from._internal_char_type());
  }
  if (from._internal_ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
  if (from._internal_owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &player_name_, lhs_arena,
      &other->player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, owner_)
      + sizeof(PlayerInfo::owner_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, char_type_)>(
          reinterpret_cast<char*>(&char_type_),
          reinterpret_cast<char*>(&other->char_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[8]);
}

// ===================================================================

class SeatInfo::_Internal {
 public:
  static const ::ChampionFist::PlayerInfo& player_info(const SeatInfo* msg);
};

const ::ChampionFist::PlayerInfo&
SeatInfo::_Internal::player_info(const SeatInfo* msg) {
  return *msg->player_info_;
}
SeatInfo::SeatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.SeatInfo)
}
SeatInfo::SeatInfo(const SeatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    player_info_ = new ::ChampionFist::PlayerInfo(*from.player_info_);
  } else {
    player_info_ = nullptr;
  }
  ::memcpy(&empty_, &from.empty_,
    static_cast<size_t>(reinterpret_cast<char*>(&seat_no_) -
    reinterpret_cast<char*>(&empty_)) + sizeof(seat_no_));
  // @@protoc_insertion_point(copy_constructor:ChampionFist.SeatInfo)
}

inline void SeatInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seat_no_) -
    reinterpret_cast<char*>(&player_info_)) + sizeof(seat_no_));
}

SeatInfo::~SeatInfo() {
  // @@protoc_insertion_point(destructor:ChampionFist.SeatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SeatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_info_;
}

void SeatInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SeatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.SeatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
  ::memset(&empty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seat_no_) -
      reinterpret_cast<char*>(&empty_)) + sizeof(seat_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 empty = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seat_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          seat_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChampionFist.PlayerInfo player_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.SeatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 empty = 1;
  if (this->_internal_empty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_empty(), target);
  }

  // int32 seat_no = 2;
  if (this->_internal_seat_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_seat_no(), target);
  }

  // .ChampionFist.PlayerInfo player_info = 3;
  if (this->_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.SeatInfo)
  return target;
}

size_t SeatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.SeatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChampionFist.PlayerInfo player_info = 3;
  if (this->_internal_has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_info_);
  }

  // int32 empty = 1;
  if (this->_internal_empty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_empty());
  }

  // int32 seat_no = 2;
  if (this->_internal_seat_no() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seat_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SeatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeatInfo::GetClassData() const { return &_class_data_; }

void SeatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SeatInfo *>(to)->MergeFrom(
      static_cast<const SeatInfo &>(from));
}


void SeatInfo::MergeFrom(const SeatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.SeatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_info()) {
    _internal_mutable_player_info()->::ChampionFist::PlayerInfo::MergeFrom(from._internal_player_info());
  }
  if (from._internal_empty() != 0) {
    _internal_set_empty(from._internal_empty());
  }
  if (from._internal_seat_no() != 0) {
    _internal_set_seat_no(from._internal_seat_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeatInfo::CopyFrom(const SeatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.SeatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatInfo::IsInitialized() const {
  return true;
}

void SeatInfo::InternalSwap(SeatInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeatInfo, seat_no_)
      + sizeof(SeatInfo::seat_no_)
      - PROTOBUF_FIELD_OFFSET(SeatInfo, player_info_)>(
          reinterpret_cast<char*>(&player_info_),
          reinterpret_cast<char*>(&other->player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SeatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[9]);
}

// ===================================================================

class S_RoomInfo::_Internal {
 public:
};

S_RoomInfo::S_RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  seat_info_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_RoomInfo)
}
S_RoomInfo::S_RoomInfo(const S_RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seat_info_(from.seat_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_RoomInfo)
}

inline void S_RoomInfo::SharedCtor() {
}

S_RoomInfo::~S_RoomInfo() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_RoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_RoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_RoomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_RoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seat_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_RoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ChampionFist.SeatInfo seat_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seat_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_RoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_RoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChampionFist.SeatInfo seat_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_seat_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_seat_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_RoomInfo)
  return target;
}

size_t S_RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_RoomInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChampionFist.SeatInfo seat_info = 1;
  total_size += 1UL * this->_internal_seat_info_size();
  for (const auto& msg : this->seat_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_RoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_RoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_RoomInfo::GetClassData() const { return &_class_data_; }

void S_RoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_RoomInfo *>(to)->MergeFrom(
      static_cast<const S_RoomInfo &>(from));
}


void S_RoomInfo::MergeFrom(const S_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  seat_info_.MergeFrom(from.seat_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_RoomInfo::CopyFrom(const S_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_RoomInfo::IsInitialized() const {
  return true;
}

void S_RoomInfo::InternalSwap(S_RoomInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  seat_info_.InternalSwap(&other->seat_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_RoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[10]);
}

// ===================================================================

class S_ExitRoom::_Internal {
 public:
};

S_ExitRoom::S_ExitRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_ExitRoom)
}
S_ExitRoom::S_ExitRoom(const S_ExitRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_ExitRoom)
}

inline void S_ExitRoom::SharedCtor() {
state_ = 0;
}

S_ExitRoom::~S_ExitRoom() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_ExitRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ExitRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ExitRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ExitRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_ExitRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ExitRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ExitRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_ExitRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_ExitRoom)
  return target;
}

size_t S_ExitRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_ExitRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ExitRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ExitRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ExitRoom::GetClassData() const { return &_class_data_; }

void S_ExitRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ExitRoom *>(to)->MergeFrom(
      static_cast<const S_ExitRoom &>(from));
}


void S_ExitRoom::MergeFrom(const S_ExitRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_ExitRoom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ExitRoom::CopyFrom(const S_ExitRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_ExitRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ExitRoom::IsInitialized() const {
  return true;
}

void S_ExitRoom::InternalSwap(S_ExitRoom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ExitRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[11]);
}

// ===================================================================

class S_UpdateRoom::_Internal {
 public:
  static const ::ChampionFist::SeatInfo& seat_info(const S_UpdateRoom* msg);
};

const ::ChampionFist::SeatInfo&
S_UpdateRoom::_Internal::seat_info(const S_UpdateRoom* msg) {
  return *msg->seat_info_;
}
S_UpdateRoom::S_UpdateRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_UpdateRoom)
}
S_UpdateRoom::S_UpdateRoom(const S_UpdateRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_seat_info()) {
    seat_info_ = new ::ChampionFist::SeatInfo(*from.seat_info_);
  } else {
    seat_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_UpdateRoom)
}

inline void S_UpdateRoom::SharedCtor() {
seat_info_ = nullptr;
}

S_UpdateRoom::~S_UpdateRoom() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_UpdateRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_UpdateRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete seat_info_;
}

void S_UpdateRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_UpdateRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_UpdateRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && seat_info_ != nullptr) {
    delete seat_info_;
  }
  seat_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_UpdateRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChampionFist.SeatInfo seat_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_seat_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_UpdateRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_UpdateRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChampionFist.SeatInfo seat_info = 1;
  if (this->_internal_has_seat_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::seat_info(this),
        _Internal::seat_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_UpdateRoom)
  return target;
}

size_t S_UpdateRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_UpdateRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChampionFist.SeatInfo seat_info = 1;
  if (this->_internal_has_seat_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seat_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_UpdateRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_UpdateRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_UpdateRoom::GetClassData() const { return &_class_data_; }

void S_UpdateRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_UpdateRoom *>(to)->MergeFrom(
      static_cast<const S_UpdateRoom &>(from));
}


void S_UpdateRoom::MergeFrom(const S_UpdateRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_UpdateRoom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_seat_info()) {
    _internal_mutable_seat_info()->::ChampionFist::SeatInfo::MergeFrom(from._internal_seat_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_UpdateRoom::CopyFrom(const S_UpdateRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_UpdateRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_UpdateRoom::IsInitialized() const {
  return true;
}

void S_UpdateRoom::InternalSwap(S_UpdateRoom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(seat_info_, other->seat_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_UpdateRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[12]);
}

// ===================================================================

class S_ModChar::_Internal {
 public:
};

S_ModChar::S_ModChar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_ModChar)
}
S_ModChar::S_ModChar(const S_ModChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_ModChar)
}

inline void S_ModChar::SharedCtor() {
state_ = 0;
}

S_ModChar::~S_ModChar() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_ModChar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ModChar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ModChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ModChar::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_ModChar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ModChar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ModChar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_ModChar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_ModChar)
  return target;
}

size_t S_ModChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_ModChar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ModChar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ModChar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ModChar::GetClassData() const { return &_class_data_; }

void S_ModChar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ModChar *>(to)->MergeFrom(
      static_cast<const S_ModChar &>(from));
}


void S_ModChar::MergeFrom(const S_ModChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_ModChar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ModChar::CopyFrom(const S_ModChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_ModChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ModChar::IsInitialized() const {
  return true;
}

void S_ModChar::InternalSwap(S_ModChar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ModChar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[13]);
}

// ===================================================================

class S_Ready::_Internal {
 public:
};

S_Ready::S_Ready(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_Ready)
}
S_Ready::S_Ready(const S_Ready& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_Ready)
}

inline void S_Ready::SharedCtor() {
state_ = 0;
}

S_Ready::~S_Ready() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_Ready)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Ready::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Ready::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Ready::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_Ready)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Ready::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Ready::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_Ready)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_Ready)
  return target;
}

size_t S_Ready::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_Ready)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Ready::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Ready::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Ready::GetClassData() const { return &_class_data_; }

void S_Ready::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Ready *>(to)->MergeFrom(
      static_cast<const S_Ready &>(from));
}


void S_Ready::MergeFrom(const S_Ready& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_Ready)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Ready::CopyFrom(const S_Ready& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_Ready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Ready::IsInitialized() const {
  return true;
}

void S_Ready::InternalSwap(S_Ready* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Ready::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[14]);
}

// ===================================================================

class S_CancelReady::_Internal {
 public:
};

S_CancelReady::S_CancelReady(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_CancelReady)
}
S_CancelReady::S_CancelReady(const S_CancelReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_CancelReady)
}

inline void S_CancelReady::SharedCtor() {
state_ = 0;
}

S_CancelReady::~S_CancelReady() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_CancelReady)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CancelReady::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CancelReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CancelReady::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_CancelReady)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CancelReady::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CancelReady::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_CancelReady)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_CancelReady)
  return target;
}

size_t S_CancelReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_CancelReady)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CancelReady::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CancelReady::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CancelReady::GetClassData() const { return &_class_data_; }

void S_CancelReady::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CancelReady *>(to)->MergeFrom(
      static_cast<const S_CancelReady &>(from));
}


void S_CancelReady::MergeFrom(const S_CancelReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_CancelReady)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CancelReady::CopyFrom(const S_CancelReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_CancelReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CancelReady::IsInitialized() const {
  return true;
}

void S_CancelReady::InternalSwap(S_CancelReady* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CancelReady::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[15]);
}

// ===================================================================

class S_StartGame::_Internal {
 public:
};

S_StartGame::S_StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_StartGame)
}
S_StartGame::S_StartGame(const S_StartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&state_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_StartGame)
}

inline void S_StartGame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&state_)) + sizeof(port_));
}

S_StartGame::~S_StartGame() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_StartGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_StartGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_StartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_StartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_StartGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&state_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_StartGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_StartGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_StartGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_StartGame)
  return target;
}

size_t S_StartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_StartGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_StartGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_StartGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_StartGame::GetClassData() const { return &_class_data_; }

void S_StartGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_StartGame *>(to)->MergeFrom(
      static_cast<const S_StartGame &>(from));
}


void S_StartGame::MergeFrom(const S_StartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_StartGame::CopyFrom(const S_StartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_StartGame::IsInitialized() const {
  return true;
}

void S_StartGame::InternalSwap(S_StartGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_StartGame, port_)
      + sizeof(S_StartGame::port_)
      - PROTOBUF_FIELD_OFFSET(S_StartGame, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_StartGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[16]);
}

// ===================================================================

class S_ExitLogin::_Internal {
 public:
};

S_ExitLogin::S_ExitLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_ExitLogin)
}
S_ExitLogin::S_ExitLogin(const S_ExitLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_ExitLogin)
}

inline void S_ExitLogin::SharedCtor() {
state_ = 0;
}

S_ExitLogin::~S_ExitLogin() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_ExitLogin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ExitLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ExitLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ExitLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_ExitLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ExitLogin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ExitLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_ExitLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_ExitLogin)
  return target;
}

size_t S_ExitLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_ExitLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ExitLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ExitLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ExitLogin::GetClassData() const { return &_class_data_; }

void S_ExitLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ExitLogin *>(to)->MergeFrom(
      static_cast<const S_ExitLogin &>(from));
}


void S_ExitLogin::MergeFrom(const S_ExitLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_ExitLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ExitLogin::CopyFrom(const S_ExitLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_ExitLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ExitLogin::IsInitialized() const {
  return true;
}

void S_ExitLogin::InternalSwap(S_ExitLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ExitLogin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[17]);
}

// ===================================================================

class S_Quit::_Internal {
 public:
};

S_Quit::S_Quit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_Quit)
}
S_Quit::S_Quit(const S_Quit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_Quit)
}

inline void S_Quit::SharedCtor() {
state_ = 0;
}

S_Quit::~S_Quit() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_Quit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Quit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Quit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Quit::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_Quit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Quit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Quit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_Quit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_Quit)
  return target;
}

size_t S_Quit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_Quit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Quit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Quit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Quit::GetClassData() const { return &_class_data_; }

void S_Quit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Quit *>(to)->MergeFrom(
      static_cast<const S_Quit &>(from));
}


void S_Quit::MergeFrom(const S_Quit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_Quit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Quit::CopyFrom(const S_Quit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_Quit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Quit::IsInitialized() const {
  return true;
}

void S_Quit::InternalSwap(S_Quit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Quit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[18]);
}

// ===================================================================

class S_AddFriend::_Internal {
 public:
};

S_AddFriend::S_AddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_AddFriend)
}
S_AddFriend::S_AddFriend(const S_AddFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_AddFriend)
}

inline void S_AddFriend::SharedCtor() {
state_ = 0;
}

S_AddFriend::~S_AddFriend() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_AddFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AddFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AddFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_AddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_AddFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AddFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AddFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_AddFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_AddFriend)
  return target;
}

size_t S_AddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_AddFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AddFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_AddFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AddFriend::GetClassData() const { return &_class_data_; }

void S_AddFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_AddFriend *>(to)->MergeFrom(
      static_cast<const S_AddFriend &>(from));
}


void S_AddFriend::MergeFrom(const S_AddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_AddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AddFriend::CopyFrom(const S_AddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_AddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AddFriend::IsInitialized() const {
  return true;
}

void S_AddFriend::InternalSwap(S_AddFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AddFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[19]);
}

// ===================================================================

class AddFriendInfo::_Internal {
 public:
};

AddFriendInfo::AddFriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.AddFriendInfo)
}
AddFriendInfo::AddFriendInfo(const AddFriendInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  friend_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    friend_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_friend_name().empty()) {
    friend_name_.Set(from._internal_friend_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChampionFist.AddFriendInfo)
}

inline void AddFriendInfo::SharedCtor() {
friend_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  friend_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddFriendInfo::~AddFriendInfo() {
  // @@protoc_insertion_point(destructor:ChampionFist.AddFriendInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddFriendInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  friend_name_.Destroy();
}

void AddFriendInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddFriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.AddFriendInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFriendInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string friend_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_friend_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.AddFriendInfo.friend_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddFriendInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.AddFriendInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string friend_name = 1;
  if (!this->_internal_friend_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_friend_name().data(), static_cast<int>(this->_internal_friend_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.AddFriendInfo.friend_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_friend_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.AddFriendInfo)
  return target;
}

size_t AddFriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.AddFriendInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string friend_name = 1;
  if (!this->_internal_friend_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_friend_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddFriendInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddFriendInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddFriendInfo::GetClassData() const { return &_class_data_; }

void AddFriendInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddFriendInfo *>(to)->MergeFrom(
      static_cast<const AddFriendInfo &>(from));
}


void AddFriendInfo::MergeFrom(const AddFriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.AddFriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_friend_name().empty()) {
    _internal_set_friend_name(from._internal_friend_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddFriendInfo::CopyFrom(const AddFriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.AddFriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendInfo::IsInitialized() const {
  return true;
}

void AddFriendInfo::InternalSwap(AddFriendInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &friend_name_, lhs_arena,
      &other->friend_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFriendInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[20]);
}

// ===================================================================

class S_OtherAddFriend::_Internal {
 public:
  static const ::ChampionFist::AddFriendInfo& friend_info(const S_OtherAddFriend* msg);
};

const ::ChampionFist::AddFriendInfo&
S_OtherAddFriend::_Internal::friend_info(const S_OtherAddFriend* msg) {
  return *msg->friend_info_;
}
S_OtherAddFriend::S_OtherAddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_OtherAddFriend)
}
S_OtherAddFriend::S_OtherAddFriend(const S_OtherAddFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_friend_info()) {
    friend_info_ = new ::ChampionFist::AddFriendInfo(*from.friend_info_);
  } else {
    friend_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_OtherAddFriend)
}

inline void S_OtherAddFriend::SharedCtor() {
friend_info_ = nullptr;
}

S_OtherAddFriend::~S_OtherAddFriend() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_OtherAddFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OtherAddFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete friend_info_;
}

void S_OtherAddFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_OtherAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_OtherAddFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && friend_info_ != nullptr) {
    delete friend_info_;
  }
  friend_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OtherAddFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChampionFist.AddFriendInfo friend_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OtherAddFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_OtherAddFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChampionFist.AddFriendInfo friend_info = 1;
  if (this->_internal_has_friend_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::friend_info(this),
        _Internal::friend_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_OtherAddFriend)
  return target;
}

size_t S_OtherAddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_OtherAddFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChampionFist.AddFriendInfo friend_info = 1;
  if (this->_internal_has_friend_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *friend_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OtherAddFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_OtherAddFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OtherAddFriend::GetClassData() const { return &_class_data_; }

void S_OtherAddFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_OtherAddFriend *>(to)->MergeFrom(
      static_cast<const S_OtherAddFriend &>(from));
}


void S_OtherAddFriend::MergeFrom(const S_OtherAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_OtherAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friend_info()) {
    _internal_mutable_friend_info()->::ChampionFist::AddFriendInfo::MergeFrom(from._internal_friend_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OtherAddFriend::CopyFrom(const S_OtherAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_OtherAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OtherAddFriend::IsInitialized() const {
  return true;
}

void S_OtherAddFriend::InternalSwap(S_OtherAddFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(friend_info_, other->friend_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OtherAddFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[21]);
}

// ===================================================================

class S_CreateRoom::_Internal {
 public:
};

S_CreateRoom::S_CreateRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ChampionFist.S_CreateRoom)
}
S_CreateRoom::S_CreateRoom(const S_CreateRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_name().empty()) {
    room_name_.Set(from._internal_room_name(), 
      GetArenaForAllocation());
  }
  room_no_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    room_no_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_no().empty()) {
    room_no_.Set(from._internal_room_no(), 
      GetArenaForAllocation());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ChampionFist.S_CreateRoom)
}

inline void S_CreateRoom::SharedCtor() {
room_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
room_no_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  room_no_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
state_ = 0;
}

S_CreateRoom::~S_CreateRoom() {
  // @@protoc_insertion_point(destructor:ChampionFist.S_CreateRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CreateRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_name_.Destroy();
  room_no_.Destroy();
}

void S_CreateRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CreateRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFist.S_CreateRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_name_.ClearToEmpty();
  room_no_.ClearToEmpty();
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CreateRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string room_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.S_CreateRoom.room_name"));
        } else
          goto handle_unusual;
        continue;
      // string room_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_room_no();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChampionFist.S_CreateRoom.room_no"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CreateRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFist.S_CreateRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string room_name = 2;
  if (!this->_internal_room_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.S_CreateRoom.room_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_name(), target);
  }

  // string room_no = 3;
  if (!this->_internal_room_no().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_no().data(), static_cast<int>(this->_internal_room_no().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFist.S_CreateRoom.room_no");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_room_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFist.S_CreateRoom)
  return target;
}

size_t S_CreateRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFist.S_CreateRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 2;
  if (!this->_internal_room_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // string room_no = 3;
  if (!this->_internal_room_no().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_no());
  }

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CreateRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CreateRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CreateRoom::GetClassData() const { return &_class_data_; }

void S_CreateRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CreateRoom *>(to)->MergeFrom(
      static_cast<const S_CreateRoom &>(from));
}


void S_CreateRoom::MergeFrom(const S_CreateRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFist.S_CreateRoom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_room_no().empty()) {
    _internal_set_room_no(from._internal_room_no());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CreateRoom::CopyFrom(const S_CreateRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFist.S_CreateRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CreateRoom::IsInitialized() const {
  return true;
}

void S_CreateRoom::InternalSwap(S_CreateRoom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_name_, lhs_arena,
      &other->room_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &room_no_, lhs_arena,
      &other->room_no_, rhs_arena
  );
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CreateRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ServerToClient_2eproto_getter, &descriptor_table_ServerToClient_2eproto_once,
      file_level_metadata_ServerToClient_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ChampionFist
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChampionFist::S_Login*
Arena::CreateMaybeMessage< ::ChampionFist::S_Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_Login >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_Register*
Arena::CreateMaybeMessage< ::ChampionFist::S_Register >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_Register >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::RoomInfo*
Arena::CreateMaybeMessage< ::ChampionFist::RoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_HallRoom*
Arena::CreateMaybeMessage< ::ChampionFist::S_HallRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_HallRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::FriendInfo*
Arena::CreateMaybeMessage< ::ChampionFist::FriendInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::FriendInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_Friend*
Arena::CreateMaybeMessage< ::ChampionFist::S_Friend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_Friend >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_FriendUpdate*
Arena::CreateMaybeMessage< ::ChampionFist::S_FriendUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_FriendUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_EnterRoom*
Arena::CreateMaybeMessage< ::ChampionFist::S_EnterRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_EnterRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::PlayerInfo*
Arena::CreateMaybeMessage< ::ChampionFist::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::SeatInfo*
Arena::CreateMaybeMessage< ::ChampionFist::SeatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::SeatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_RoomInfo*
Arena::CreateMaybeMessage< ::ChampionFist::S_RoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_ExitRoom*
Arena::CreateMaybeMessage< ::ChampionFist::S_ExitRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_ExitRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_UpdateRoom*
Arena::CreateMaybeMessage< ::ChampionFist::S_UpdateRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_UpdateRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_ModChar*
Arena::CreateMaybeMessage< ::ChampionFist::S_ModChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_ModChar >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_Ready*
Arena::CreateMaybeMessage< ::ChampionFist::S_Ready >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_Ready >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_CancelReady*
Arena::CreateMaybeMessage< ::ChampionFist::S_CancelReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_CancelReady >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_StartGame*
Arena::CreateMaybeMessage< ::ChampionFist::S_StartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_StartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_ExitLogin*
Arena::CreateMaybeMessage< ::ChampionFist::S_ExitLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_ExitLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_Quit*
Arena::CreateMaybeMessage< ::ChampionFist::S_Quit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_Quit >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_AddFriend*
Arena::CreateMaybeMessage< ::ChampionFist::S_AddFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_AddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::AddFriendInfo*
Arena::CreateMaybeMessage< ::ChampionFist::AddFriendInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::AddFriendInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_OtherAddFriend*
Arena::CreateMaybeMessage< ::ChampionFist::S_OtherAddFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_OtherAddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFist::S_CreateRoom*
Arena::CreateMaybeMessage< ::ChampionFist::S_CreateRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFist::S_CreateRoom >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
