// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameServerToClient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameServerToClient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameServerToClient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameServerToClient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameServerToClient_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameServerToClient_2eproto;
namespace ChampionFistGame {
class AllPlayerOperation;
struct AllPlayerOperationDefaultTypeInternal;
extern AllPlayerOperationDefaultTypeInternal _AllPlayerOperation_default_instance_;
class GamePlayerInfo;
struct GamePlayerInfoDefaultTypeInternal;
extern GamePlayerInfoDefaultTypeInternal _GamePlayerInfo_default_instance_;
class OperationFrame;
struct OperationFrameDefaultTypeInternal;
extern OperationFrameDefaultTypeInternal _OperationFrame_default_instance_;
class S_Initialize;
struct S_InitializeDefaultTypeInternal;
extern S_InitializeDefaultTypeInternal _S_Initialize_default_instance_;
class S_LogicFrame;
struct S_LogicFrameDefaultTypeInternal;
extern S_LogicFrameDefaultTypeInternal _S_LogicFrame_default_instance_;
class S_OtherExit;
struct S_OtherExitDefaultTypeInternal;
extern S_OtherExitDefaultTypeInternal _S_OtherExit_default_instance_;
class UnsyncFrame;
struct UnsyncFrameDefaultTypeInternal;
extern UnsyncFrameDefaultTypeInternal _UnsyncFrame_default_instance_;
}  // namespace ChampionFistGame
PROTOBUF_NAMESPACE_OPEN
template<> ::ChampionFistGame::AllPlayerOperation* Arena::CreateMaybeMessage<::ChampionFistGame::AllPlayerOperation>(Arena*);
template<> ::ChampionFistGame::GamePlayerInfo* Arena::CreateMaybeMessage<::ChampionFistGame::GamePlayerInfo>(Arena*);
template<> ::ChampionFistGame::OperationFrame* Arena::CreateMaybeMessage<::ChampionFistGame::OperationFrame>(Arena*);
template<> ::ChampionFistGame::S_Initialize* Arena::CreateMaybeMessage<::ChampionFistGame::S_Initialize>(Arena*);
template<> ::ChampionFistGame::S_LogicFrame* Arena::CreateMaybeMessage<::ChampionFistGame::S_LogicFrame>(Arena*);
template<> ::ChampionFistGame::S_OtherExit* Arena::CreateMaybeMessage<::ChampionFistGame::S_OtherExit>(Arena*);
template<> ::ChampionFistGame::UnsyncFrame* Arena::CreateMaybeMessage<::ChampionFistGame::UnsyncFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChampionFistGame {

enum ServerCommandType : int {
  S_EMPTY = 0,
  S_CONNECT = 1,
  S_INITIALIZE = 2,
  S_LOAD = 3,
  S_EXIT = 4,
  S_OTHER_EXIT = 5,
  S_LOGIC_FRAME = 6,
  S_DELAY = 7,
  ServerCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerCommandType_IsValid(int value);
constexpr ServerCommandType ServerCommandType_MIN = S_EMPTY;
constexpr ServerCommandType ServerCommandType_MAX = S_DELAY;
constexpr int ServerCommandType_ARRAYSIZE = ServerCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor();
template<typename T>
inline const std::string& ServerCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerCommandType_descriptor(), enum_t_value);
}
inline bool ServerCommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerCommandType>(
    ServerCommandType_descriptor(), name, value);
}
// ===================================================================

class GamePlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.GamePlayerInfo) */ {
 public:
  inline GamePlayerInfo() : GamePlayerInfo(nullptr) {}
  ~GamePlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR GamePlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GamePlayerInfo(const GamePlayerInfo& from);
  GamePlayerInfo(GamePlayerInfo&& from) noexcept
    : GamePlayerInfo() {
    *this = ::std::move(from);
  }

  inline GamePlayerInfo& operator=(const GamePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GamePlayerInfo& operator=(GamePlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GamePlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GamePlayerInfo* internal_default_instance() {
    return reinterpret_cast<const GamePlayerInfo*>(
               &_GamePlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GamePlayerInfo& a, GamePlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GamePlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GamePlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GamePlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GamePlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GamePlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GamePlayerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GamePlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.GamePlayerInfo";
  }
  protected:
  explicit GamePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSeatNoFieldNumber = 2,
    kChampionNoFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 seat_no = 2;
  void clear_seat_no();
  int32_t seat_no() const;
  void set_seat_no(int32_t value);
  private:
  int32_t _internal_seat_no() const;
  void _internal_set_seat_no(int32_t value);
  public:

  // int32 champion_no = 3;
  void clear_champion_no();
  int32_t champion_no() const;
  void set_champion_no(int32_t value);
  private:
  int32_t _internal_champion_no() const;
  void _internal_set_champion_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.GamePlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t seat_no_;
  int32_t champion_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// -------------------------------------------------------------------

class S_Initialize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.S_Initialize) */ {
 public:
  inline S_Initialize() : S_Initialize(nullptr) {}
  ~S_Initialize() override;
  explicit PROTOBUF_CONSTEXPR S_Initialize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Initialize(const S_Initialize& from);
  S_Initialize(S_Initialize&& from) noexcept
    : S_Initialize() {
    *this = ::std::move(from);
  }

  inline S_Initialize& operator=(const S_Initialize& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Initialize& operator=(S_Initialize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Initialize& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Initialize* internal_default_instance() {
    return reinterpret_cast<const S_Initialize*>(
               &_S_Initialize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_Initialize& a, S_Initialize& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Initialize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Initialize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Initialize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Initialize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Initialize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Initialize& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Initialize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.S_Initialize";
  }
  protected:
  explicit S_Initialize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamePlayersInfoFieldNumber = 3,
    kSeatNoFieldNumber = 1,
    kRandomSeedFieldNumber = 2,
  };
  // repeated .ChampionFistGame.GamePlayerInfo game_players_info = 3;
  int game_players_info_size() const;
  private:
  int _internal_game_players_info_size() const;
  public:
  void clear_game_players_info();
  ::ChampionFistGame::GamePlayerInfo* mutable_game_players_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::GamePlayerInfo >*
      mutable_game_players_info();
  private:
  const ::ChampionFistGame::GamePlayerInfo& _internal_game_players_info(int index) const;
  ::ChampionFistGame::GamePlayerInfo* _internal_add_game_players_info();
  public:
  const ::ChampionFistGame::GamePlayerInfo& game_players_info(int index) const;
  ::ChampionFistGame::GamePlayerInfo* add_game_players_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::GamePlayerInfo >&
      game_players_info() const;

  // int32 seat_no = 1;
  void clear_seat_no();
  int32_t seat_no() const;
  void set_seat_no(int32_t value);
  private:
  int32_t _internal_seat_no() const;
  void _internal_set_seat_no(int32_t value);
  public:

  // int32 random_seed = 2;
  void clear_random_seed();
  int32_t random_seed() const;
  void set_random_seed(int32_t value);
  private:
  int32_t _internal_random_seed() const;
  void _internal_set_random_seed(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.S_Initialize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::GamePlayerInfo > game_players_info_;
  int32_t seat_no_;
  int32_t random_seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// -------------------------------------------------------------------

class S_OtherExit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.S_OtherExit) */ {
 public:
  inline S_OtherExit() : S_OtherExit(nullptr) {}
  ~S_OtherExit() override;
  explicit PROTOBUF_CONSTEXPR S_OtherExit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OtherExit(const S_OtherExit& from);
  S_OtherExit(S_OtherExit&& from) noexcept
    : S_OtherExit() {
    *this = ::std::move(from);
  }

  inline S_OtherExit& operator=(const S_OtherExit& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OtherExit& operator=(S_OtherExit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OtherExit& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OtherExit* internal_default_instance() {
    return reinterpret_cast<const S_OtherExit*>(
               &_S_OtherExit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_OtherExit& a, S_OtherExit& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OtherExit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OtherExit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_OtherExit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_OtherExit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_OtherExit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_OtherExit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OtherExit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.S_OtherExit";
  }
  protected:
  explicit S_OtherExit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatNoFieldNumber = 1,
  };
  // int32 seat_no = 1;
  void clear_seat_no();
  int32_t seat_no() const;
  void set_seat_no(int32_t value);
  private:
  int32_t _internal_seat_no() const;
  void _internal_set_seat_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.S_OtherExit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t seat_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// -------------------------------------------------------------------

class OperationFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.OperationFrame) */ {
 public:
  inline OperationFrame() : OperationFrame(nullptr) {}
  ~OperationFrame() override;
  explicit PROTOBUF_CONSTEXPR OperationFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationFrame(const OperationFrame& from);
  OperationFrame(OperationFrame&& from) noexcept
    : OperationFrame() {
    *this = ::std::move(from);
  }

  inline OperationFrame& operator=(const OperationFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationFrame& operator=(OperationFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationFrame* internal_default_instance() {
    return reinterpret_cast<const OperationFrame*>(
               &_OperationFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OperationFrame& a, OperationFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OperationFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.OperationFrame";
  }
  protected:
  explicit OperationFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClickQFieldNumber = 1,
    kClickWFieldNumber = 2,
    kClickEFieldNumber = 3,
    kClickRFieldNumber = 4,
    kClickPropertyFieldNumber = 5,
    kClickMouseFieldNumber = 6,
    kChangeWeaponFieldNumber = 7,
    kChangeArmorFieldNumber = 8,
    kMousePosXFieldNumber = 9,
    kMousePosYFieldNumber = 10,
    kArmorNoFieldNumber = 11,
    kLowWeaponNoFieldNumber = 12,
    kMiddleWeaponNoFieldNumber = 13,
    kHighWeaponNoFieldNumber = 14,
  };
  // bool click_q = 1;
  void clear_click_q();
  bool click_q() const;
  void set_click_q(bool value);
  private:
  bool _internal_click_q() const;
  void _internal_set_click_q(bool value);
  public:

  // bool click_w = 2;
  void clear_click_w();
  bool click_w() const;
  void set_click_w(bool value);
  private:
  bool _internal_click_w() const;
  void _internal_set_click_w(bool value);
  public:

  // bool click_e = 3;
  void clear_click_e();
  bool click_e() const;
  void set_click_e(bool value);
  private:
  bool _internal_click_e() const;
  void _internal_set_click_e(bool value);
  public:

  // bool click_r = 4;
  void clear_click_r();
  bool click_r() const;
  void set_click_r(bool value);
  private:
  bool _internal_click_r() const;
  void _internal_set_click_r(bool value);
  public:

  // bool click_property = 5;
  void clear_click_property();
  bool click_property() const;
  void set_click_property(bool value);
  private:
  bool _internal_click_property() const;
  void _internal_set_click_property(bool value);
  public:

  // bool click_mouse = 6;
  void clear_click_mouse();
  bool click_mouse() const;
  void set_click_mouse(bool value);
  private:
  bool _internal_click_mouse() const;
  void _internal_set_click_mouse(bool value);
  public:

  // bool change_weapon = 7;
  void clear_change_weapon();
  bool change_weapon() const;
  void set_change_weapon(bool value);
  private:
  bool _internal_change_weapon() const;
  void _internal_set_change_weapon(bool value);
  public:

  // bool change_armor = 8;
  void clear_change_armor();
  bool change_armor() const;
  void set_change_armor(bool value);
  private:
  bool _internal_change_armor() const;
  void _internal_set_change_armor(bool value);
  public:

  // int32 mouse_pos_x = 9;
  void clear_mouse_pos_x();
  int32_t mouse_pos_x() const;
  void set_mouse_pos_x(int32_t value);
  private:
  int32_t _internal_mouse_pos_x() const;
  void _internal_set_mouse_pos_x(int32_t value);
  public:

  // int32 mouse_pos_y = 10;
  void clear_mouse_pos_y();
  int32_t mouse_pos_y() const;
  void set_mouse_pos_y(int32_t value);
  private:
  int32_t _internal_mouse_pos_y() const;
  void _internal_set_mouse_pos_y(int32_t value);
  public:

  // int32 armor_no = 11;
  void clear_armor_no();
  int32_t armor_no() const;
  void set_armor_no(int32_t value);
  private:
  int32_t _internal_armor_no() const;
  void _internal_set_armor_no(int32_t value);
  public:

  // int32 low_weapon_no = 12;
  void clear_low_weapon_no();
  int32_t low_weapon_no() const;
  void set_low_weapon_no(int32_t value);
  private:
  int32_t _internal_low_weapon_no() const;
  void _internal_set_low_weapon_no(int32_t value);
  public:

  // int32 middle_weapon_no = 13;
  void clear_middle_weapon_no();
  int32_t middle_weapon_no() const;
  void set_middle_weapon_no(int32_t value);
  private:
  int32_t _internal_middle_weapon_no() const;
  void _internal_set_middle_weapon_no(int32_t value);
  public:

  // int32 high_weapon_no = 14;
  void clear_high_weapon_no();
  int32_t high_weapon_no() const;
  void set_high_weapon_no(int32_t value);
  private:
  int32_t _internal_high_weapon_no() const;
  void _internal_set_high_weapon_no(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.OperationFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool click_q_;
  bool click_w_;
  bool click_e_;
  bool click_r_;
  bool click_property_;
  bool click_mouse_;
  bool change_weapon_;
  bool change_armor_;
  int32_t mouse_pos_x_;
  int32_t mouse_pos_y_;
  int32_t armor_no_;
  int32_t low_weapon_no_;
  int32_t middle_weapon_no_;
  int32_t high_weapon_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// -------------------------------------------------------------------

class AllPlayerOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.AllPlayerOperation) */ {
 public:
  inline AllPlayerOperation() : AllPlayerOperation(nullptr) {}
  ~AllPlayerOperation() override;
  explicit PROTOBUF_CONSTEXPR AllPlayerOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllPlayerOperation(const AllPlayerOperation& from);
  AllPlayerOperation(AllPlayerOperation&& from) noexcept
    : AllPlayerOperation() {
    *this = ::std::move(from);
  }

  inline AllPlayerOperation& operator=(const AllPlayerOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllPlayerOperation& operator=(AllPlayerOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllPlayerOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllPlayerOperation* internal_default_instance() {
    return reinterpret_cast<const AllPlayerOperation*>(
               &_AllPlayerOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AllPlayerOperation& a, AllPlayerOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(AllPlayerOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllPlayerOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllPlayerOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllPlayerOperation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllPlayerOperation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AllPlayerOperation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllPlayerOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.AllPlayerOperation";
  }
  protected:
  explicit AllPlayerOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 1,
  };
  // repeated .ChampionFistGame.OperationFrame operations = 1;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::ChampionFistGame::OperationFrame* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::OperationFrame >*
      mutable_operations();
  private:
  const ::ChampionFistGame::OperationFrame& _internal_operations(int index) const;
  ::ChampionFistGame::OperationFrame* _internal_add_operations();
  public:
  const ::ChampionFistGame::OperationFrame& operations(int index) const;
  ::ChampionFistGame::OperationFrame* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::OperationFrame >&
      operations() const;

  // @@protoc_insertion_point(class_scope:ChampionFistGame.AllPlayerOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::OperationFrame > operations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// -------------------------------------------------------------------

class UnsyncFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.UnsyncFrame) */ {
 public:
  inline UnsyncFrame() : UnsyncFrame(nullptr) {}
  ~UnsyncFrame() override;
  explicit PROTOBUF_CONSTEXPR UnsyncFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnsyncFrame(const UnsyncFrame& from);
  UnsyncFrame(UnsyncFrame&& from) noexcept
    : UnsyncFrame() {
    *this = ::std::move(from);
  }

  inline UnsyncFrame& operator=(const UnsyncFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsyncFrame& operator=(UnsyncFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnsyncFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnsyncFrame* internal_default_instance() {
    return reinterpret_cast<const UnsyncFrame*>(
               &_UnsyncFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UnsyncFrame& a, UnsyncFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsyncFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsyncFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnsyncFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnsyncFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnsyncFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnsyncFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsyncFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.UnsyncFrame";
  }
  protected:
  explicit UnsyncFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllPlayersOptFieldNumber = 2,
    kFrameIdFieldNumber = 1,
  };
  // .ChampionFistGame.AllPlayerOperation all_players_opt = 2;
  bool has_all_players_opt() const;
  private:
  bool _internal_has_all_players_opt() const;
  public:
  void clear_all_players_opt();
  const ::ChampionFistGame::AllPlayerOperation& all_players_opt() const;
  PROTOBUF_NODISCARD ::ChampionFistGame::AllPlayerOperation* release_all_players_opt();
  ::ChampionFistGame::AllPlayerOperation* mutable_all_players_opt();
  void set_allocated_all_players_opt(::ChampionFistGame::AllPlayerOperation* all_players_opt);
  private:
  const ::ChampionFistGame::AllPlayerOperation& _internal_all_players_opt() const;
  ::ChampionFistGame::AllPlayerOperation* _internal_mutable_all_players_opt();
  public:
  void unsafe_arena_set_allocated_all_players_opt(
      ::ChampionFistGame::AllPlayerOperation* all_players_opt);
  ::ChampionFistGame::AllPlayerOperation* unsafe_arena_release_all_players_opt();

  // int32 frame_id = 1;
  void clear_frame_id();
  int32_t frame_id() const;
  void set_frame_id(int32_t value);
  private:
  int32_t _internal_frame_id() const;
  void _internal_set_frame_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.UnsyncFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ChampionFistGame::AllPlayerOperation* all_players_opt_;
  int32_t frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// -------------------------------------------------------------------

class S_LogicFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.S_LogicFrame) */ {
 public:
  inline S_LogicFrame() : S_LogicFrame(nullptr) {}
  ~S_LogicFrame() override;
  explicit PROTOBUF_CONSTEXPR S_LogicFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LogicFrame(const S_LogicFrame& from);
  S_LogicFrame(S_LogicFrame&& from) noexcept
    : S_LogicFrame() {
    *this = ::std::move(from);
  }

  inline S_LogicFrame& operator=(const S_LogicFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LogicFrame& operator=(S_LogicFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LogicFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LogicFrame* internal_default_instance() {
    return reinterpret_cast<const S_LogicFrame*>(
               &_S_LogicFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_LogicFrame& a, S_LogicFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LogicFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LogicFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LogicFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LogicFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LogicFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_LogicFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LogicFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.S_LogicFrame";
  }
  protected:
  explicit S_LogicFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnsyncFramesFieldNumber = 2,
    kFrameIdFieldNumber = 1,
  };
  // repeated .ChampionFistGame.UnsyncFrame unsync_frames = 2;
  int unsync_frames_size() const;
  private:
  int _internal_unsync_frames_size() const;
  public:
  void clear_unsync_frames();
  ::ChampionFistGame::UnsyncFrame* mutable_unsync_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::UnsyncFrame >*
      mutable_unsync_frames();
  private:
  const ::ChampionFistGame::UnsyncFrame& _internal_unsync_frames(int index) const;
  ::ChampionFistGame::UnsyncFrame* _internal_add_unsync_frames();
  public:
  const ::ChampionFistGame::UnsyncFrame& unsync_frames(int index) const;
  ::ChampionFistGame::UnsyncFrame* add_unsync_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::UnsyncFrame >&
      unsync_frames() const;

  // int32 frame_id = 1;
  void clear_frame_id();
  int32_t frame_id() const;
  void set_frame_id(int32_t value);
  private:
  int32_t _internal_frame_id() const;
  void _internal_set_frame_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.S_LogicFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::UnsyncFrame > unsync_frames_;
  int32_t frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GamePlayerInfo

// string name = 1;
inline void GamePlayerInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GamePlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.GamePlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GamePlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChampionFistGame.GamePlayerInfo.name)
}
inline std::string* GamePlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ChampionFistGame.GamePlayerInfo.name)
  return _s;
}
inline const std::string& GamePlayerInfo::_internal_name() const {
  return name_.Get();
}
inline void GamePlayerInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GamePlayerInfo::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GamePlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:ChampionFistGame.GamePlayerInfo.name)
  return name_.Release();
}
inline void GamePlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChampionFistGame.GamePlayerInfo.name)
}

// int32 seat_no = 2;
inline void GamePlayerInfo::clear_seat_no() {
  seat_no_ = 0;
}
inline int32_t GamePlayerInfo::_internal_seat_no() const {
  return seat_no_;
}
inline int32_t GamePlayerInfo::seat_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.GamePlayerInfo.seat_no)
  return _internal_seat_no();
}
inline void GamePlayerInfo::_internal_set_seat_no(int32_t value) {
  
  seat_no_ = value;
}
inline void GamePlayerInfo::set_seat_no(int32_t value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.GamePlayerInfo.seat_no)
}

// int32 champion_no = 3;
inline void GamePlayerInfo::clear_champion_no() {
  champion_no_ = 0;
}
inline int32_t GamePlayerInfo::_internal_champion_no() const {
  return champion_no_;
}
inline int32_t GamePlayerInfo::champion_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.GamePlayerInfo.champion_no)
  return _internal_champion_no();
}
inline void GamePlayerInfo::_internal_set_champion_no(int32_t value) {
  
  champion_no_ = value;
}
inline void GamePlayerInfo::set_champion_no(int32_t value) {
  _internal_set_champion_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.GamePlayerInfo.champion_no)
}

// -------------------------------------------------------------------

// S_Initialize

// int32 seat_no = 1;
inline void S_Initialize::clear_seat_no() {
  seat_no_ = 0;
}
inline int32_t S_Initialize::_internal_seat_no() const {
  return seat_no_;
}
inline int32_t S_Initialize::seat_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_Initialize.seat_no)
  return _internal_seat_no();
}
inline void S_Initialize::_internal_set_seat_no(int32_t value) {
  
  seat_no_ = value;
}
inline void S_Initialize::set_seat_no(int32_t value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.S_Initialize.seat_no)
}

// int32 random_seed = 2;
inline void S_Initialize::clear_random_seed() {
  random_seed_ = 0;
}
inline int32_t S_Initialize::_internal_random_seed() const {
  return random_seed_;
}
inline int32_t S_Initialize::random_seed() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_Initialize.random_seed)
  return _internal_random_seed();
}
inline void S_Initialize::_internal_set_random_seed(int32_t value) {
  
  random_seed_ = value;
}
inline void S_Initialize::set_random_seed(int32_t value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.S_Initialize.random_seed)
}

// repeated .ChampionFistGame.GamePlayerInfo game_players_info = 3;
inline int S_Initialize::_internal_game_players_info_size() const {
  return game_players_info_.size();
}
inline int S_Initialize::game_players_info_size() const {
  return _internal_game_players_info_size();
}
inline void S_Initialize::clear_game_players_info() {
  game_players_info_.Clear();
}
inline ::ChampionFistGame::GamePlayerInfo* S_Initialize::mutable_game_players_info(int index) {
  // @@protoc_insertion_point(field_mutable:ChampionFistGame.S_Initialize.game_players_info)
  return game_players_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::GamePlayerInfo >*
S_Initialize::mutable_game_players_info() {
  // @@protoc_insertion_point(field_mutable_list:ChampionFistGame.S_Initialize.game_players_info)
  return &game_players_info_;
}
inline const ::ChampionFistGame::GamePlayerInfo& S_Initialize::_internal_game_players_info(int index) const {
  return game_players_info_.Get(index);
}
inline const ::ChampionFistGame::GamePlayerInfo& S_Initialize::game_players_info(int index) const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_Initialize.game_players_info)
  return _internal_game_players_info(index);
}
inline ::ChampionFistGame::GamePlayerInfo* S_Initialize::_internal_add_game_players_info() {
  return game_players_info_.Add();
}
inline ::ChampionFistGame::GamePlayerInfo* S_Initialize::add_game_players_info() {
  ::ChampionFistGame::GamePlayerInfo* _add = _internal_add_game_players_info();
  // @@protoc_insertion_point(field_add:ChampionFistGame.S_Initialize.game_players_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::GamePlayerInfo >&
S_Initialize::game_players_info() const {
  // @@protoc_insertion_point(field_list:ChampionFistGame.S_Initialize.game_players_info)
  return game_players_info_;
}

// -------------------------------------------------------------------

// S_OtherExit

// int32 seat_no = 1;
inline void S_OtherExit::clear_seat_no() {
  seat_no_ = 0;
}
inline int32_t S_OtherExit::_internal_seat_no() const {
  return seat_no_;
}
inline int32_t S_OtherExit::seat_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_OtherExit.seat_no)
  return _internal_seat_no();
}
inline void S_OtherExit::_internal_set_seat_no(int32_t value) {
  
  seat_no_ = value;
}
inline void S_OtherExit::set_seat_no(int32_t value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.S_OtherExit.seat_no)
}

// -------------------------------------------------------------------

// OperationFrame

// bool click_q = 1;
inline void OperationFrame::clear_click_q() {
  click_q_ = false;
}
inline bool OperationFrame::_internal_click_q() const {
  return click_q_;
}
inline bool OperationFrame::click_q() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_q)
  return _internal_click_q();
}
inline void OperationFrame::_internal_set_click_q(bool value) {
  
  click_q_ = value;
}
inline void OperationFrame::set_click_q(bool value) {
  _internal_set_click_q(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_q)
}

// bool click_w = 2;
inline void OperationFrame::clear_click_w() {
  click_w_ = false;
}
inline bool OperationFrame::_internal_click_w() const {
  return click_w_;
}
inline bool OperationFrame::click_w() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_w)
  return _internal_click_w();
}
inline void OperationFrame::_internal_set_click_w(bool value) {
  
  click_w_ = value;
}
inline void OperationFrame::set_click_w(bool value) {
  _internal_set_click_w(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_w)
}

// bool click_e = 3;
inline void OperationFrame::clear_click_e() {
  click_e_ = false;
}
inline bool OperationFrame::_internal_click_e() const {
  return click_e_;
}
inline bool OperationFrame::click_e() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_e)
  return _internal_click_e();
}
inline void OperationFrame::_internal_set_click_e(bool value) {
  
  click_e_ = value;
}
inline void OperationFrame::set_click_e(bool value) {
  _internal_set_click_e(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_e)
}

// bool click_r = 4;
inline void OperationFrame::clear_click_r() {
  click_r_ = false;
}
inline bool OperationFrame::_internal_click_r() const {
  return click_r_;
}
inline bool OperationFrame::click_r() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_r)
  return _internal_click_r();
}
inline void OperationFrame::_internal_set_click_r(bool value) {
  
  click_r_ = value;
}
inline void OperationFrame::set_click_r(bool value) {
  _internal_set_click_r(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_r)
}

// bool click_property = 5;
inline void OperationFrame::clear_click_property() {
  click_property_ = false;
}
inline bool OperationFrame::_internal_click_property() const {
  return click_property_;
}
inline bool OperationFrame::click_property() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_property)
  return _internal_click_property();
}
inline void OperationFrame::_internal_set_click_property(bool value) {
  
  click_property_ = value;
}
inline void OperationFrame::set_click_property(bool value) {
  _internal_set_click_property(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_property)
}

// bool click_mouse = 6;
inline void OperationFrame::clear_click_mouse() {
  click_mouse_ = false;
}
inline bool OperationFrame::_internal_click_mouse() const {
  return click_mouse_;
}
inline bool OperationFrame::click_mouse() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_mouse)
  return _internal_click_mouse();
}
inline void OperationFrame::_internal_set_click_mouse(bool value) {
  
  click_mouse_ = value;
}
inline void OperationFrame::set_click_mouse(bool value) {
  _internal_set_click_mouse(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_mouse)
}

// bool change_weapon = 7;
inline void OperationFrame::clear_change_weapon() {
  change_weapon_ = false;
}
inline bool OperationFrame::_internal_change_weapon() const {
  return change_weapon_;
}
inline bool OperationFrame::change_weapon() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.change_weapon)
  return _internal_change_weapon();
}
inline void OperationFrame::_internal_set_change_weapon(bool value) {
  
  change_weapon_ = value;
}
inline void OperationFrame::set_change_weapon(bool value) {
  _internal_set_change_weapon(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.change_weapon)
}

// bool change_armor = 8;
inline void OperationFrame::clear_change_armor() {
  change_armor_ = false;
}
inline bool OperationFrame::_internal_change_armor() const {
  return change_armor_;
}
inline bool OperationFrame::change_armor() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.change_armor)
  return _internal_change_armor();
}
inline void OperationFrame::_internal_set_change_armor(bool value) {
  
  change_armor_ = value;
}
inline void OperationFrame::set_change_armor(bool value) {
  _internal_set_change_armor(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.change_armor)
}

// int32 mouse_pos_x = 9;
inline void OperationFrame::clear_mouse_pos_x() {
  mouse_pos_x_ = 0;
}
inline int32_t OperationFrame::_internal_mouse_pos_x() const {
  return mouse_pos_x_;
}
inline int32_t OperationFrame::mouse_pos_x() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.mouse_pos_x)
  return _internal_mouse_pos_x();
}
inline void OperationFrame::_internal_set_mouse_pos_x(int32_t value) {
  
  mouse_pos_x_ = value;
}
inline void OperationFrame::set_mouse_pos_x(int32_t value) {
  _internal_set_mouse_pos_x(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.mouse_pos_x)
}

// int32 mouse_pos_y = 10;
inline void OperationFrame::clear_mouse_pos_y() {
  mouse_pos_y_ = 0;
}
inline int32_t OperationFrame::_internal_mouse_pos_y() const {
  return mouse_pos_y_;
}
inline int32_t OperationFrame::mouse_pos_y() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.mouse_pos_y)
  return _internal_mouse_pos_y();
}
inline void OperationFrame::_internal_set_mouse_pos_y(int32_t value) {
  
  mouse_pos_y_ = value;
}
inline void OperationFrame::set_mouse_pos_y(int32_t value) {
  _internal_set_mouse_pos_y(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.mouse_pos_y)
}

// int32 armor_no = 11;
inline void OperationFrame::clear_armor_no() {
  armor_no_ = 0;
}
inline int32_t OperationFrame::_internal_armor_no() const {
  return armor_no_;
}
inline int32_t OperationFrame::armor_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.armor_no)
  return _internal_armor_no();
}
inline void OperationFrame::_internal_set_armor_no(int32_t value) {
  
  armor_no_ = value;
}
inline void OperationFrame::set_armor_no(int32_t value) {
  _internal_set_armor_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.armor_no)
}

// int32 low_weapon_no = 12;
inline void OperationFrame::clear_low_weapon_no() {
  low_weapon_no_ = 0;
}
inline int32_t OperationFrame::_internal_low_weapon_no() const {
  return low_weapon_no_;
}
inline int32_t OperationFrame::low_weapon_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.low_weapon_no)
  return _internal_low_weapon_no();
}
inline void OperationFrame::_internal_set_low_weapon_no(int32_t value) {
  
  low_weapon_no_ = value;
}
inline void OperationFrame::set_low_weapon_no(int32_t value) {
  _internal_set_low_weapon_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.low_weapon_no)
}

// int32 middle_weapon_no = 13;
inline void OperationFrame::clear_middle_weapon_no() {
  middle_weapon_no_ = 0;
}
inline int32_t OperationFrame::_internal_middle_weapon_no() const {
  return middle_weapon_no_;
}
inline int32_t OperationFrame::middle_weapon_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.middle_weapon_no)
  return _internal_middle_weapon_no();
}
inline void OperationFrame::_internal_set_middle_weapon_no(int32_t value) {
  
  middle_weapon_no_ = value;
}
inline void OperationFrame::set_middle_weapon_no(int32_t value) {
  _internal_set_middle_weapon_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.middle_weapon_no)
}

// int32 high_weapon_no = 14;
inline void OperationFrame::clear_high_weapon_no() {
  high_weapon_no_ = 0;
}
inline int32_t OperationFrame::_internal_high_weapon_no() const {
  return high_weapon_no_;
}
inline int32_t OperationFrame::high_weapon_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.high_weapon_no)
  return _internal_high_weapon_no();
}
inline void OperationFrame::_internal_set_high_weapon_no(int32_t value) {
  
  high_weapon_no_ = value;
}
inline void OperationFrame::set_high_weapon_no(int32_t value) {
  _internal_set_high_weapon_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.high_weapon_no)
}

// -------------------------------------------------------------------

// AllPlayerOperation

// repeated .ChampionFistGame.OperationFrame operations = 1;
inline int AllPlayerOperation::_internal_operations_size() const {
  return operations_.size();
}
inline int AllPlayerOperation::operations_size() const {
  return _internal_operations_size();
}
inline void AllPlayerOperation::clear_operations() {
  operations_.Clear();
}
inline ::ChampionFistGame::OperationFrame* AllPlayerOperation::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:ChampionFistGame.AllPlayerOperation.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::OperationFrame >*
AllPlayerOperation::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:ChampionFistGame.AllPlayerOperation.operations)
  return &operations_;
}
inline const ::ChampionFistGame::OperationFrame& AllPlayerOperation::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::ChampionFistGame::OperationFrame& AllPlayerOperation::operations(int index) const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.AllPlayerOperation.operations)
  return _internal_operations(index);
}
inline ::ChampionFistGame::OperationFrame* AllPlayerOperation::_internal_add_operations() {
  return operations_.Add();
}
inline ::ChampionFistGame::OperationFrame* AllPlayerOperation::add_operations() {
  ::ChampionFistGame::OperationFrame* _add = _internal_add_operations();
  // @@protoc_insertion_point(field_add:ChampionFistGame.AllPlayerOperation.operations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::OperationFrame >&
AllPlayerOperation::operations() const {
  // @@protoc_insertion_point(field_list:ChampionFistGame.AllPlayerOperation.operations)
  return operations_;
}

// -------------------------------------------------------------------

// UnsyncFrame

// int32 frame_id = 1;
inline void UnsyncFrame::clear_frame_id() {
  frame_id_ = 0;
}
inline int32_t UnsyncFrame::_internal_frame_id() const {
  return frame_id_;
}
inline int32_t UnsyncFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.UnsyncFrame.frame_id)
  return _internal_frame_id();
}
inline void UnsyncFrame::_internal_set_frame_id(int32_t value) {
  
  frame_id_ = value;
}
inline void UnsyncFrame::set_frame_id(int32_t value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.UnsyncFrame.frame_id)
}

// .ChampionFistGame.AllPlayerOperation all_players_opt = 2;
inline bool UnsyncFrame::_internal_has_all_players_opt() const {
  return this != internal_default_instance() && all_players_opt_ != nullptr;
}
inline bool UnsyncFrame::has_all_players_opt() const {
  return _internal_has_all_players_opt();
}
inline void UnsyncFrame::clear_all_players_opt() {
  if (GetArenaForAllocation() == nullptr && all_players_opt_ != nullptr) {
    delete all_players_opt_;
  }
  all_players_opt_ = nullptr;
}
inline const ::ChampionFistGame::AllPlayerOperation& UnsyncFrame::_internal_all_players_opt() const {
  const ::ChampionFistGame::AllPlayerOperation* p = all_players_opt_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChampionFistGame::AllPlayerOperation&>(
      ::ChampionFistGame::_AllPlayerOperation_default_instance_);
}
inline const ::ChampionFistGame::AllPlayerOperation& UnsyncFrame::all_players_opt() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.UnsyncFrame.all_players_opt)
  return _internal_all_players_opt();
}
inline void UnsyncFrame::unsafe_arena_set_allocated_all_players_opt(
    ::ChampionFistGame::AllPlayerOperation* all_players_opt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(all_players_opt_);
  }
  all_players_opt_ = all_players_opt;
  if (all_players_opt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChampionFistGame.UnsyncFrame.all_players_opt)
}
inline ::ChampionFistGame::AllPlayerOperation* UnsyncFrame::release_all_players_opt() {
  
  ::ChampionFistGame::AllPlayerOperation* temp = all_players_opt_;
  all_players_opt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ChampionFistGame::AllPlayerOperation* UnsyncFrame::unsafe_arena_release_all_players_opt() {
  // @@protoc_insertion_point(field_release:ChampionFistGame.UnsyncFrame.all_players_opt)
  
  ::ChampionFistGame::AllPlayerOperation* temp = all_players_opt_;
  all_players_opt_ = nullptr;
  return temp;
}
inline ::ChampionFistGame::AllPlayerOperation* UnsyncFrame::_internal_mutable_all_players_opt() {
  
  if (all_players_opt_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChampionFistGame::AllPlayerOperation>(GetArenaForAllocation());
    all_players_opt_ = p;
  }
  return all_players_opt_;
}
inline ::ChampionFistGame::AllPlayerOperation* UnsyncFrame::mutable_all_players_opt() {
  ::ChampionFistGame::AllPlayerOperation* _msg = _internal_mutable_all_players_opt();
  // @@protoc_insertion_point(field_mutable:ChampionFistGame.UnsyncFrame.all_players_opt)
  return _msg;
}
inline void UnsyncFrame::set_allocated_all_players_opt(::ChampionFistGame::AllPlayerOperation* all_players_opt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete all_players_opt_;
  }
  if (all_players_opt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(all_players_opt);
    if (message_arena != submessage_arena) {
      all_players_opt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_players_opt, submessage_arena);
    }
    
  } else {
    
  }
  all_players_opt_ = all_players_opt;
  // @@protoc_insertion_point(field_set_allocated:ChampionFistGame.UnsyncFrame.all_players_opt)
}

// -------------------------------------------------------------------

// S_LogicFrame

// int32 frame_id = 1;
inline void S_LogicFrame::clear_frame_id() {
  frame_id_ = 0;
}
inline int32_t S_LogicFrame::_internal_frame_id() const {
  return frame_id_;
}
inline int32_t S_LogicFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_LogicFrame.frame_id)
  return _internal_frame_id();
}
inline void S_LogicFrame::_internal_set_frame_id(int32_t value) {
  
  frame_id_ = value;
}
inline void S_LogicFrame::set_frame_id(int32_t value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.S_LogicFrame.frame_id)
}

// repeated .ChampionFistGame.UnsyncFrame unsync_frames = 2;
inline int S_LogicFrame::_internal_unsync_frames_size() const {
  return unsync_frames_.size();
}
inline int S_LogicFrame::unsync_frames_size() const {
  return _internal_unsync_frames_size();
}
inline void S_LogicFrame::clear_unsync_frames() {
  unsync_frames_.Clear();
}
inline ::ChampionFistGame::UnsyncFrame* S_LogicFrame::mutable_unsync_frames(int index) {
  // @@protoc_insertion_point(field_mutable:ChampionFistGame.S_LogicFrame.unsync_frames)
  return unsync_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::UnsyncFrame >*
S_LogicFrame::mutable_unsync_frames() {
  // @@protoc_insertion_point(field_mutable_list:ChampionFistGame.S_LogicFrame.unsync_frames)
  return &unsync_frames_;
}
inline const ::ChampionFistGame::UnsyncFrame& S_LogicFrame::_internal_unsync_frames(int index) const {
  return unsync_frames_.Get(index);
}
inline const ::ChampionFistGame::UnsyncFrame& S_LogicFrame::unsync_frames(int index) const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_LogicFrame.unsync_frames)
  return _internal_unsync_frames(index);
}
inline ::ChampionFistGame::UnsyncFrame* S_LogicFrame::_internal_add_unsync_frames() {
  return unsync_frames_.Add();
}
inline ::ChampionFistGame::UnsyncFrame* S_LogicFrame::add_unsync_frames() {
  ::ChampionFistGame::UnsyncFrame* _add = _internal_add_unsync_frames();
  // @@protoc_insertion_point(field_add:ChampionFistGame.S_LogicFrame.unsync_frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::UnsyncFrame >&
S_LogicFrame::unsync_frames() const {
  // @@protoc_insertion_point(field_list:ChampionFistGame.S_LogicFrame.unsync_frames)
  return unsync_frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChampionFistGame

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChampionFistGame::ServerCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChampionFistGame::ServerCommandType>() {
  return ::ChampionFistGame::ServerCommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameServerToClient_2eproto
