// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameServerToClient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameServerToClient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameServerToClient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameServerToClient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameServerToClient_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameServerToClient_2eproto;
namespace ChampionFist {
class S_Begin;
struct S_BeginDefaultTypeInternal;
extern S_BeginDefaultTypeInternal _S_Begin_default_instance_;
class S_Connect;
struct S_ConnectDefaultTypeInternal;
extern S_ConnectDefaultTypeInternal _S_Connect_default_instance_;
class S_End;
struct S_EndDefaultTypeInternal;
extern S_EndDefaultTypeInternal _S_End_default_instance_;
class S_Exit;
struct S_ExitDefaultTypeInternal;
extern S_ExitDefaultTypeInternal _S_Exit_default_instance_;
class S_Load;
struct S_LoadDefaultTypeInternal;
extern S_LoadDefaultTypeInternal _S_Load_default_instance_;
}  // namespace ChampionFist
PROTOBUF_NAMESPACE_OPEN
template<> ::ChampionFist::S_Begin* Arena::CreateMaybeMessage<::ChampionFist::S_Begin>(Arena*);
template<> ::ChampionFist::S_Connect* Arena::CreateMaybeMessage<::ChampionFist::S_Connect>(Arena*);
template<> ::ChampionFist::S_End* Arena::CreateMaybeMessage<::ChampionFist::S_End>(Arena*);
template<> ::ChampionFist::S_Exit* Arena::CreateMaybeMessage<::ChampionFist::S_Exit>(Arena*);
template<> ::ChampionFist::S_Load* Arena::CreateMaybeMessage<::ChampionFist::S_Load>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChampionFist {

enum ServerCommandType : int {
  S_EMPTY = 0,
  S_CONNECT = 1,
  S_LOAD = 2,
  S_BEGIN = 3,
  S_EXIT = 4,
  S_OPERATION = 5,
  S_END = 6,
  ServerCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerCommandType_IsValid(int value);
constexpr ServerCommandType ServerCommandType_MIN = S_EMPTY;
constexpr ServerCommandType ServerCommandType_MAX = S_END;
constexpr int ServerCommandType_ARRAYSIZE = ServerCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor();
template<typename T>
inline const std::string& ServerCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerCommandType_descriptor(), enum_t_value);
}
inline bool ServerCommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerCommandType>(
    ServerCommandType_descriptor(), name, value);
}
// ===================================================================

class S_Connect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.S_Connect) */ {
 public:
  inline S_Connect() : S_Connect(nullptr) {}
  ~S_Connect() override;
  explicit PROTOBUF_CONSTEXPR S_Connect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Connect(const S_Connect& from);
  S_Connect(S_Connect&& from) noexcept
    : S_Connect() {
    *this = ::std::move(from);
  }

  inline S_Connect& operator=(const S_Connect& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Connect& operator=(S_Connect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Connect& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Connect* internal_default_instance() {
    return reinterpret_cast<const S_Connect*>(
               &_S_Connect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_Connect& a, S_Connect& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Connect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Connect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Connect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Connect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Connect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Connect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Connect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.S_Connect";
  }
  protected:
  explicit S_Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.S_Connect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// -------------------------------------------------------------------

class S_Load final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.S_Load) */ {
 public:
  inline S_Load() : S_Load(nullptr) {}
  ~S_Load() override;
  explicit PROTOBUF_CONSTEXPR S_Load(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Load(const S_Load& from);
  S_Load(S_Load&& from) noexcept
    : S_Load() {
    *this = ::std::move(from);
  }

  inline S_Load& operator=(const S_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Load& operator=(S_Load&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Load& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Load* internal_default_instance() {
    return reinterpret_cast<const S_Load*>(
               &_S_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_Load& a, S_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Load* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Load>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Load& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Load& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Load* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.S_Load";
  }
  protected:
  explicit S_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.S_Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// -------------------------------------------------------------------

class S_Exit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.S_Exit) */ {
 public:
  inline S_Exit() : S_Exit(nullptr) {}
  ~S_Exit() override;
  explicit PROTOBUF_CONSTEXPR S_Exit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Exit(const S_Exit& from);
  S_Exit(S_Exit&& from) noexcept
    : S_Exit() {
    *this = ::std::move(from);
  }

  inline S_Exit& operator=(const S_Exit& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Exit& operator=(S_Exit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Exit& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Exit* internal_default_instance() {
    return reinterpret_cast<const S_Exit*>(
               &_S_Exit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_Exit& a, S_Exit& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Exit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Exit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Exit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Exit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Exit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Exit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Exit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.S_Exit";
  }
  protected:
  explicit S_Exit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.S_Exit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// -------------------------------------------------------------------

class S_Begin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.S_Begin) */ {
 public:
  inline S_Begin() : S_Begin(nullptr) {}
  ~S_Begin() override;
  explicit PROTOBUF_CONSTEXPR S_Begin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Begin(const S_Begin& from);
  S_Begin(S_Begin&& from) noexcept
    : S_Begin() {
    *this = ::std::move(from);
  }

  inline S_Begin& operator=(const S_Begin& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Begin& operator=(S_Begin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Begin& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Begin* internal_default_instance() {
    return reinterpret_cast<const S_Begin*>(
               &_S_Begin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_Begin& a, S_Begin& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Begin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Begin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Begin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Begin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Begin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Begin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Begin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.S_Begin";
  }
  protected:
  explicit S_Begin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.S_Begin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// -------------------------------------------------------------------

class S_End final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFist.S_End) */ {
 public:
  inline S_End() : S_End(nullptr) {}
  ~S_End() override;
  explicit PROTOBUF_CONSTEXPR S_End(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_End(const S_End& from);
  S_End(S_End&& from) noexcept
    : S_End() {
    *this = ::std::move(from);
  }

  inline S_End& operator=(const S_End& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_End& operator=(S_End&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_End& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_End* internal_default_instance() {
    return reinterpret_cast<const S_End*>(
               &_S_End_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_End& a, S_End& b) {
    a.Swap(&b);
  }
  inline void Swap(S_End* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_End* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_End* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_End>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_End& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_End& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_End* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFist.S_End";
  }
  protected:
  explicit S_End(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFist.S_End)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameServerToClient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_Connect

// int32 state = 1;
inline void S_Connect::clear_state() {
  state_ = 0;
}
inline int32_t S_Connect::_internal_state() const {
  return state_;
}
inline int32_t S_Connect::state() const {
  // @@protoc_insertion_point(field_get:ChampionFist.S_Connect.state)
  return _internal_state();
}
inline void S_Connect::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void S_Connect::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ChampionFist.S_Connect.state)
}

// -------------------------------------------------------------------

// S_Load

// int32 state = 1;
inline void S_Load::clear_state() {
  state_ = 0;
}
inline int32_t S_Load::_internal_state() const {
  return state_;
}
inline int32_t S_Load::state() const {
  // @@protoc_insertion_point(field_get:ChampionFist.S_Load.state)
  return _internal_state();
}
inline void S_Load::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void S_Load::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ChampionFist.S_Load.state)
}

// -------------------------------------------------------------------

// S_Exit

// int32 state = 1;
inline void S_Exit::clear_state() {
  state_ = 0;
}
inline int32_t S_Exit::_internal_state() const {
  return state_;
}
inline int32_t S_Exit::state() const {
  // @@protoc_insertion_point(field_get:ChampionFist.S_Exit.state)
  return _internal_state();
}
inline void S_Exit::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void S_Exit::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ChampionFist.S_Exit.state)
}

// -------------------------------------------------------------------

// S_Begin

// int32 state = 1;
inline void S_Begin::clear_state() {
  state_ = 0;
}
inline int32_t S_Begin::_internal_state() const {
  return state_;
}
inline int32_t S_Begin::state() const {
  // @@protoc_insertion_point(field_get:ChampionFist.S_Begin.state)
  return _internal_state();
}
inline void S_Begin::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void S_Begin::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ChampionFist.S_Begin.state)
}

// -------------------------------------------------------------------

// S_End

// int32 state = 1;
inline void S_End::clear_state() {
  state_ = 0;
}
inline int32_t S_End::_internal_state() const {
  return state_;
}
inline int32_t S_End::state() const {
  // @@protoc_insertion_point(field_get:ChampionFist.S_End.state)
  return _internal_state();
}
inline void S_End::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void S_End::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ChampionFist.S_End.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChampionFist

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChampionFist::ServerCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChampionFist::ServerCommandType>() {
  return ::ChampionFist::ServerCommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameServerToClient_2eproto
