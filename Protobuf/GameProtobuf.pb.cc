// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtobuf.proto

#include "GameProtobuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GameProtobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePlayerInfo_GameProtobuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameProtobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationFrame_GameProtobuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameProtobuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnsyncFrame_GameProtobuf_2eproto;
namespace ChampionFistGame {
class GamePlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GamePlayerInfo> _instance;
} _GamePlayerInfo_default_instance_;
class S_InitializeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S_Initialize> _instance;
} _S_Initialize_default_instance_;
class S_OtherExitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S_OtherExit> _instance;
} _S_OtherExit_default_instance_;
class OperationFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationFrame> _instance;
} _OperationFrame_default_instance_;
class UnsyncFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsyncFrame> _instance;
} _UnsyncFrame_default_instance_;
class S_LogicFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S_LogicFrame> _instance;
} _S_LogicFrame_default_instance_;
class C_ConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C_Connect> _instance;
} _C_Connect_default_instance_;
class C_PlayerFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C_PlayerFrame> _instance;
} _C_PlayerFrame_default_instance_;
}  // namespace ChampionFistGame
static void InitDefaultsscc_info_C_Connect_GameProtobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChampionFistGame::_C_Connect_default_instance_;
    new (ptr) ::ChampionFistGame::C_Connect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C_Connect_GameProtobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C_Connect_GameProtobuf_2eproto}, {}};

static void InitDefaultsscc_info_C_PlayerFrame_GameProtobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChampionFistGame::_C_PlayerFrame_default_instance_;
    new (ptr) ::ChampionFistGame::C_PlayerFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_C_PlayerFrame_GameProtobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_C_PlayerFrame_GameProtobuf_2eproto}, {
      &scc_info_OperationFrame_GameProtobuf_2eproto.base,}};

static void InitDefaultsscc_info_GamePlayerInfo_GameProtobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChampionFistGame::_GamePlayerInfo_default_instance_;
    new (ptr) ::ChampionFistGame::GamePlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePlayerInfo_GameProtobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GamePlayerInfo_GameProtobuf_2eproto}, {}};

static void InitDefaultsscc_info_OperationFrame_GameProtobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChampionFistGame::_OperationFrame_default_instance_;
    new (ptr) ::ChampionFistGame::OperationFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationFrame_GameProtobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OperationFrame_GameProtobuf_2eproto}, {}};

static void InitDefaultsscc_info_S_Initialize_GameProtobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChampionFistGame::_S_Initialize_default_instance_;
    new (ptr) ::ChampionFistGame::S_Initialize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_S_Initialize_GameProtobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_S_Initialize_GameProtobuf_2eproto}, {
      &scc_info_GamePlayerInfo_GameProtobuf_2eproto.base,}};

static void InitDefaultsscc_info_S_LogicFrame_GameProtobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChampionFistGame::_S_LogicFrame_default_instance_;
    new (ptr) ::ChampionFistGame::S_LogicFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_S_LogicFrame_GameProtobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_S_LogicFrame_GameProtobuf_2eproto}, {
      &scc_info_UnsyncFrame_GameProtobuf_2eproto.base,}};

static void InitDefaultsscc_info_S_OtherExit_GameProtobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChampionFistGame::_S_OtherExit_default_instance_;
    new (ptr) ::ChampionFistGame::S_OtherExit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S_OtherExit_GameProtobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S_OtherExit_GameProtobuf_2eproto}, {}};

static void InitDefaultsscc_info_UnsyncFrame_GameProtobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChampionFistGame::_UnsyncFrame_default_instance_;
    new (ptr) ::ChampionFistGame::UnsyncFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnsyncFrame_GameProtobuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnsyncFrame_GameProtobuf_2eproto}, {
      &scc_info_OperationFrame_GameProtobuf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GameProtobuf_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_GameProtobuf_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GameProtobuf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GameProtobuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::GamePlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::GamePlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::GamePlayerInfo, seat_no_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::GamePlayerInfo, champion_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::S_Initialize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::S_Initialize, seat_no_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::S_Initialize, random_seed_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::S_Initialize, game_players_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::S_OtherExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::S_OtherExit, seat_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, click_q_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, click_w_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, click_e_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, click_r_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, click_property_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, click_mouse_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, change_weapon_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, change_armor_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, mouse_pos_x_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, mouse_pos_y_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, armor_no_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, low_weapon_no_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, middle_weapon_no_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::OperationFrame, high_weapon_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::UnsyncFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::UnsyncFrame, frame_id_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::UnsyncFrame, all_players_opt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::S_LogicFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::S_LogicFrame, frame_id_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::S_LogicFrame, unsync_frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::C_Connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::C_Connect, name_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::C_Connect, seat_no_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::C_Connect, champion_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::C_PlayerFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::C_PlayerFrame, frame_id_),
  PROTOBUF_FIELD_OFFSET(::ChampionFistGame::C_PlayerFrame, player_opt_frame_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChampionFistGame::GamePlayerInfo)},
  { 8, -1, sizeof(::ChampionFistGame::S_Initialize)},
  { 16, -1, sizeof(::ChampionFistGame::S_OtherExit)},
  { 22, -1, sizeof(::ChampionFistGame::OperationFrame)},
  { 41, -1, sizeof(::ChampionFistGame::UnsyncFrame)},
  { 48, -1, sizeof(::ChampionFistGame::S_LogicFrame)},
  { 55, -1, sizeof(::ChampionFistGame::C_Connect)},
  { 63, -1, sizeof(::ChampionFistGame::C_PlayerFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChampionFistGame::_GamePlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChampionFistGame::_S_Initialize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChampionFistGame::_S_OtherExit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChampionFistGame::_OperationFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChampionFistGame::_UnsyncFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChampionFistGame::_S_LogicFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChampionFistGame::_C_Connect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChampionFistGame::_C_PlayerFrame_default_instance_),
};

const char descriptor_table_protodef_GameProtobuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022GameProtobuf.proto\022\020ChampionFistGame\"D"
  "\n\016GamePlayerInfo\022\014\n\004name\030\001 \001(\t\022\017\n\007seat_n"
  "o\030\002 \001(\005\022\023\n\013champion_no\030\003 \001(\005\"q\n\014S_Initia"
  "lize\022\017\n\007seat_no\030\001 \001(\005\022\023\n\013random_seed\030\002 \001"
  "(\005\022;\n\021game_players_info\030\003 \003(\0132 .Champion"
  "FistGame.GamePlayerInfo\"\036\n\013S_OtherExit\022\017"
  "\n\007seat_no\030\001 \001(\005\"\263\002\n\016OperationFrame\022\017\n\007cl"
  "ick_q\030\001 \001(\010\022\017\n\007click_w\030\002 \001(\010\022\017\n\007click_e\030"
  "\003 \001(\010\022\017\n\007click_r\030\004 \001(\010\022\026\n\016click_property"
  "\030\005 \001(\010\022\023\n\013click_mouse\030\006 \001(\010\022\025\n\rchange_we"
  "apon\030\007 \001(\010\022\024\n\014change_armor\030\010 \001(\010\022\023\n\013mous"
  "e_pos_x\030\t \001(\005\022\023\n\013mouse_pos_y\030\n \001(\005\022\020\n\010ar"
  "mor_no\030\013 \001(\005\022\025\n\rlow_weapon_no\030\014 \001(\005\022\030\n\020m"
  "iddle_weapon_no\030\r \001(\005\022\026\n\016high_weapon_no\030"
  "\016 \001(\005\"Z\n\013UnsyncFrame\022\020\n\010frame_id\030\001 \001(\005\0229"
  "\n\017all_players_opt\030\002 \003(\0132 .ChampionFistGa"
  "me.OperationFrame\"V\n\014S_LogicFrame\022\020\n\010fra"
  "me_id\030\001 \001(\005\0224\n\runsync_frames\030\002 \003(\0132\035.Cha"
  "mpionFistGame.UnsyncFrame\"\?\n\tC_Connect\022\014"
  "\n\004name\030\001 \001(\t\022\017\n\007seat_no\030\002 \001(\005\022\023\n\013champio"
  "n_no\030\003 \001(\005\"]\n\rC_PlayerFrame\022\020\n\010frame_id\030"
  "\001 \001(\005\022:\n\020player_opt_frame\030\002 \001(\0132 .Champi"
  "onFistGame.OperationFrame*\230\001\n\021ServerComm"
  "andType\022\013\n\007S_EMPTY\020\000\022\r\n\tS_CONNECT\020\001\022\020\n\014S"
  "_INITIALIZE\020\002\022\n\n\006S_LOAD\020\003\022\n\n\006S_EXIT\020\004\022\020\n"
  "\014S_OTHER_EXIT\020\005\022\021\n\rS_LOGIC_FRAME\020\006\022\013\n\007S_"
  "DELAY\020\007\022\013\n\007S_START\020\010*x\n\021ClientCommandTyp"
  "e\022\013\n\007C_EMPTY\020\000\022\r\n\tC_CONNECT\020\001\022\n\n\006C_LOAD\020"
  "\002\022\n\n\006C_EXIT\020\003\022\022\n\016C_PLAYER_FRAME\020\004\022\013\n\007C_D"
  "ELAY\020\005\022\016\n\nC_GAMEOVER\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GameProtobuf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GameProtobuf_2eproto_sccs[8] = {
  &scc_info_C_Connect_GameProtobuf_2eproto.base,
  &scc_info_C_PlayerFrame_GameProtobuf_2eproto.base,
  &scc_info_GamePlayerInfo_GameProtobuf_2eproto.base,
  &scc_info_OperationFrame_GameProtobuf_2eproto.base,
  &scc_info_S_Initialize_GameProtobuf_2eproto.base,
  &scc_info_S_LogicFrame_GameProtobuf_2eproto.base,
  &scc_info_S_OtherExit_GameProtobuf_2eproto.base,
  &scc_info_UnsyncFrame_GameProtobuf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GameProtobuf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameProtobuf_2eproto = {
  false, false, descriptor_table_protodef_GameProtobuf_2eproto, "GameProtobuf.proto", 1190,
  &descriptor_table_GameProtobuf_2eproto_once, descriptor_table_GameProtobuf_2eproto_sccs, descriptor_table_GameProtobuf_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_GameProtobuf_2eproto::offsets,
  file_level_metadata_GameProtobuf_2eproto, 8, file_level_enum_descriptors_GameProtobuf_2eproto, file_level_service_descriptors_GameProtobuf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameProtobuf_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GameProtobuf_2eproto)), true);
namespace ChampionFistGame {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameProtobuf_2eproto);
  return file_level_enum_descriptors_GameProtobuf_2eproto[0];
}
bool ServerCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameProtobuf_2eproto);
  return file_level_enum_descriptors_GameProtobuf_2eproto[1];
}
bool ClientCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GamePlayerInfo::_Internal {
 public:
};

GamePlayerInfo::GamePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChampionFistGame.GamePlayerInfo)
}
GamePlayerInfo::GamePlayerInfo(const GamePlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&seat_no_, &from.seat_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&champion_no_) -
    reinterpret_cast<char*>(&seat_no_)) + sizeof(champion_no_));
  // @@protoc_insertion_point(copy_constructor:ChampionFistGame.GamePlayerInfo)
}

void GamePlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GamePlayerInfo_GameProtobuf_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&seat_no_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&champion_no_) -
      reinterpret_cast<char*>(&seat_no_)) + sizeof(champion_no_));
}

GamePlayerInfo::~GamePlayerInfo() {
  // @@protoc_insertion_point(destructor:ChampionFistGame.GamePlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GamePlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GamePlayerInfo::ArenaDtor(void* object) {
  GamePlayerInfo* _this = reinterpret_cast< GamePlayerInfo* >(object);
  (void)_this;
}
void GamePlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GamePlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePlayerInfo& GamePlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GamePlayerInfo_GameProtobuf_2eproto.base);
  return *internal_default_instance();
}


void GamePlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFistGame.GamePlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&seat_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&champion_no_) -
      reinterpret_cast<char*>(&seat_no_)) + sizeof(champion_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamePlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChampionFistGame.GamePlayerInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seat_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seat_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 champion_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          champion_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GamePlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFistGame.GamePlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFistGame.GamePlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 seat_no = 2;
  if (this->seat_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_seat_no(), target);
  }

  // int32 champion_no = 3;
  if (this->champion_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_champion_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFistGame.GamePlayerInfo)
  return target;
}

size_t GamePlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFistGame.GamePlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 seat_no = 2;
  if (this->seat_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seat_no());
  }

  // int32 champion_no = 3;
  if (this->champion_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_champion_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChampionFistGame.GamePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GamePlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GamePlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChampionFistGame.GamePlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChampionFistGame.GamePlayerInfo)
    MergeFrom(*source);
  }
}

void GamePlayerInfo::MergeFrom(const GamePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFistGame.GamePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.seat_no() != 0) {
    _internal_set_seat_no(from._internal_seat_no());
  }
  if (from.champion_no() != 0) {
    _internal_set_champion_no(from._internal_champion_no());
  }
}

void GamePlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChampionFistGame.GamePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerInfo::CopyFrom(const GamePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFistGame.GamePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerInfo::IsInitialized() const {
  return true;
}

void GamePlayerInfo::InternalSwap(GamePlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GamePlayerInfo, champion_no_)
      + sizeof(GamePlayerInfo::champion_no_)
      - PROTOBUF_FIELD_OFFSET(GamePlayerInfo, seat_no_)>(
          reinterpret_cast<char*>(&seat_no_),
          reinterpret_cast<char*>(&other->seat_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GamePlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class S_Initialize::_Internal {
 public:
};

S_Initialize::S_Initialize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_players_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChampionFistGame.S_Initialize)
}
S_Initialize::S_Initialize(const S_Initialize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_players_info_(from.game_players_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seat_no_, &from.seat_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_seed_) -
    reinterpret_cast<char*>(&seat_no_)) + sizeof(random_seed_));
  // @@protoc_insertion_point(copy_constructor:ChampionFistGame.S_Initialize)
}

void S_Initialize::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S_Initialize_GameProtobuf_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&seat_no_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&random_seed_) -
      reinterpret_cast<char*>(&seat_no_)) + sizeof(random_seed_));
}

S_Initialize::~S_Initialize() {
  // @@protoc_insertion_point(destructor:ChampionFistGame.S_Initialize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_Initialize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void S_Initialize::ArenaDtor(void* object) {
  S_Initialize* _this = reinterpret_cast< S_Initialize* >(object);
  (void)_this;
}
void S_Initialize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_Initialize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S_Initialize& S_Initialize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S_Initialize_GameProtobuf_2eproto.base);
  return *internal_default_instance();
}


void S_Initialize::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFistGame.S_Initialize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_players_info_.Clear();
  ::memset(&seat_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_seed_) -
      reinterpret_cast<char*>(&seat_no_)) + sizeof(random_seed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Initialize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seat_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seat_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 random_seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ChampionFistGame.GamePlayerInfo game_players_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_players_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_Initialize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFistGame.S_Initialize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seat_no = 1;
  if (this->seat_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seat_no(), target);
  }

  // int32 random_seed = 2;
  if (this->random_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_random_seed(), target);
  }

  // repeated .ChampionFistGame.GamePlayerInfo game_players_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_players_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_game_players_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFistGame.S_Initialize)
  return target;
}

size_t S_Initialize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFistGame.S_Initialize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChampionFistGame.GamePlayerInfo game_players_info = 3;
  total_size += 1UL * this->_internal_game_players_info_size();
  for (const auto& msg : this->game_players_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 seat_no = 1;
  if (this->seat_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seat_no());
  }

  // int32 random_seed = 2;
  if (this->random_seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_random_seed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_Initialize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChampionFistGame.S_Initialize)
  GOOGLE_DCHECK_NE(&from, this);
  const S_Initialize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_Initialize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChampionFistGame.S_Initialize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChampionFistGame.S_Initialize)
    MergeFrom(*source);
  }
}

void S_Initialize::MergeFrom(const S_Initialize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFistGame.S_Initialize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_players_info_.MergeFrom(from.game_players_info_);
  if (from.seat_no() != 0) {
    _internal_set_seat_no(from._internal_seat_no());
  }
  if (from.random_seed() != 0) {
    _internal_set_random_seed(from._internal_random_seed());
  }
}

void S_Initialize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChampionFistGame.S_Initialize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_Initialize::CopyFrom(const S_Initialize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFistGame.S_Initialize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Initialize::IsInitialized() const {
  return true;
}

void S_Initialize::InternalSwap(S_Initialize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_players_info_.InternalSwap(&other->game_players_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Initialize, random_seed_)
      + sizeof(S_Initialize::random_seed_)
      - PROTOBUF_FIELD_OFFSET(S_Initialize, seat_no_)>(
          reinterpret_cast<char*>(&seat_no_),
          reinterpret_cast<char*>(&other->seat_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Initialize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class S_OtherExit::_Internal {
 public:
};

S_OtherExit::S_OtherExit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChampionFistGame.S_OtherExit)
}
S_OtherExit::S_OtherExit(const S_OtherExit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seat_no_ = from.seat_no_;
  // @@protoc_insertion_point(copy_constructor:ChampionFistGame.S_OtherExit)
}

void S_OtherExit::SharedCtor() {
  seat_no_ = 0;
}

S_OtherExit::~S_OtherExit() {
  // @@protoc_insertion_point(destructor:ChampionFistGame.S_OtherExit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_OtherExit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void S_OtherExit::ArenaDtor(void* object) {
  S_OtherExit* _this = reinterpret_cast< S_OtherExit* >(object);
  (void)_this;
}
void S_OtherExit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_OtherExit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S_OtherExit& S_OtherExit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S_OtherExit_GameProtobuf_2eproto.base);
  return *internal_default_instance();
}


void S_OtherExit::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFistGame.S_OtherExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seat_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OtherExit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seat_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seat_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_OtherExit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFistGame.S_OtherExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seat_no = 1;
  if (this->seat_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seat_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFistGame.S_OtherExit)
  return target;
}

size_t S_OtherExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFistGame.S_OtherExit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seat_no = 1;
  if (this->seat_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seat_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_OtherExit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChampionFistGame.S_OtherExit)
  GOOGLE_DCHECK_NE(&from, this);
  const S_OtherExit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_OtherExit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChampionFistGame.S_OtherExit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChampionFistGame.S_OtherExit)
    MergeFrom(*source);
  }
}

void S_OtherExit::MergeFrom(const S_OtherExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFistGame.S_OtherExit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seat_no() != 0) {
    _internal_set_seat_no(from._internal_seat_no());
  }
}

void S_OtherExit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChampionFistGame.S_OtherExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_OtherExit::CopyFrom(const S_OtherExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFistGame.S_OtherExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OtherExit::IsInitialized() const {
  return true;
}

void S_OtherExit::InternalSwap(S_OtherExit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(seat_no_, other->seat_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OtherExit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OperationFrame::_Internal {
 public:
};

OperationFrame::OperationFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChampionFistGame.OperationFrame)
}
OperationFrame::OperationFrame(const OperationFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&click_q_, &from.click_q_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_weapon_no_) -
    reinterpret_cast<char*>(&click_q_)) + sizeof(high_weapon_no_));
  // @@protoc_insertion_point(copy_constructor:ChampionFistGame.OperationFrame)
}

void OperationFrame::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&click_q_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&high_weapon_no_) -
      reinterpret_cast<char*>(&click_q_)) + sizeof(high_weapon_no_));
}

OperationFrame::~OperationFrame() {
  // @@protoc_insertion_point(destructor:ChampionFistGame.OperationFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OperationFrame::ArenaDtor(void* object) {
  OperationFrame* _this = reinterpret_cast< OperationFrame* >(object);
  (void)_this;
}
void OperationFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationFrame& OperationFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationFrame_GameProtobuf_2eproto.base);
  return *internal_default_instance();
}


void OperationFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFistGame.OperationFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&click_q_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_weapon_no_) -
      reinterpret_cast<char*>(&click_q_)) + sizeof(high_weapon_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool click_q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          click_q_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool click_w = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          click_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool click_e = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          click_e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool click_r = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          click_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool click_property = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          click_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool click_mouse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          click_mouse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool change_weapon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          change_weapon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool change_armor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          change_armor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mouse_pos_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          mouse_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mouse_pos_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          mouse_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 armor_no = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          armor_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 low_weapon_no = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          low_weapon_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 middle_weapon_no = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          middle_weapon_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 high_weapon_no = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          high_weapon_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFistGame.OperationFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool click_q = 1;
  if (this->click_q() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_click_q(), target);
  }

  // bool click_w = 2;
  if (this->click_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_click_w(), target);
  }

  // bool click_e = 3;
  if (this->click_e() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_click_e(), target);
  }

  // bool click_r = 4;
  if (this->click_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_click_r(), target);
  }

  // bool click_property = 5;
  if (this->click_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_click_property(), target);
  }

  // bool click_mouse = 6;
  if (this->click_mouse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_click_mouse(), target);
  }

  // bool change_weapon = 7;
  if (this->change_weapon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_change_weapon(), target);
  }

  // bool change_armor = 8;
  if (this->change_armor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_change_armor(), target);
  }

  // int32 mouse_pos_x = 9;
  if (this->mouse_pos_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_mouse_pos_x(), target);
  }

  // int32 mouse_pos_y = 10;
  if (this->mouse_pos_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_mouse_pos_y(), target);
  }

  // int32 armor_no = 11;
  if (this->armor_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_armor_no(), target);
  }

  // int32 low_weapon_no = 12;
  if (this->low_weapon_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_low_weapon_no(), target);
  }

  // int32 middle_weapon_no = 13;
  if (this->middle_weapon_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_middle_weapon_no(), target);
  }

  // int32 high_weapon_no = 14;
  if (this->high_weapon_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_high_weapon_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFistGame.OperationFrame)
  return target;
}

size_t OperationFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFistGame.OperationFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool click_q = 1;
  if (this->click_q() != 0) {
    total_size += 1 + 1;
  }

  // bool click_w = 2;
  if (this->click_w() != 0) {
    total_size += 1 + 1;
  }

  // bool click_e = 3;
  if (this->click_e() != 0) {
    total_size += 1 + 1;
  }

  // bool click_r = 4;
  if (this->click_r() != 0) {
    total_size += 1 + 1;
  }

  // bool click_property = 5;
  if (this->click_property() != 0) {
    total_size += 1 + 1;
  }

  // bool click_mouse = 6;
  if (this->click_mouse() != 0) {
    total_size += 1 + 1;
  }

  // bool change_weapon = 7;
  if (this->change_weapon() != 0) {
    total_size += 1 + 1;
  }

  // bool change_armor = 8;
  if (this->change_armor() != 0) {
    total_size += 1 + 1;
  }

  // int32 mouse_pos_x = 9;
  if (this->mouse_pos_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mouse_pos_x());
  }

  // int32 mouse_pos_y = 10;
  if (this->mouse_pos_y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mouse_pos_y());
  }

  // int32 armor_no = 11;
  if (this->armor_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_armor_no());
  }

  // int32 low_weapon_no = 12;
  if (this->low_weapon_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_low_weapon_no());
  }

  // int32 middle_weapon_no = 13;
  if (this->middle_weapon_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_middle_weapon_no());
  }

  // int32 high_weapon_no = 14;
  if (this->high_weapon_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_high_weapon_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChampionFistGame.OperationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChampionFistGame.OperationFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChampionFistGame.OperationFrame)
    MergeFrom(*source);
  }
}

void OperationFrame::MergeFrom(const OperationFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFistGame.OperationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.click_q() != 0) {
    _internal_set_click_q(from._internal_click_q());
  }
  if (from.click_w() != 0) {
    _internal_set_click_w(from._internal_click_w());
  }
  if (from.click_e() != 0) {
    _internal_set_click_e(from._internal_click_e());
  }
  if (from.click_r() != 0) {
    _internal_set_click_r(from._internal_click_r());
  }
  if (from.click_property() != 0) {
    _internal_set_click_property(from._internal_click_property());
  }
  if (from.click_mouse() != 0) {
    _internal_set_click_mouse(from._internal_click_mouse());
  }
  if (from.change_weapon() != 0) {
    _internal_set_change_weapon(from._internal_change_weapon());
  }
  if (from.change_armor() != 0) {
    _internal_set_change_armor(from._internal_change_armor());
  }
  if (from.mouse_pos_x() != 0) {
    _internal_set_mouse_pos_x(from._internal_mouse_pos_x());
  }
  if (from.mouse_pos_y() != 0) {
    _internal_set_mouse_pos_y(from._internal_mouse_pos_y());
  }
  if (from.armor_no() != 0) {
    _internal_set_armor_no(from._internal_armor_no());
  }
  if (from.low_weapon_no() != 0) {
    _internal_set_low_weapon_no(from._internal_low_weapon_no());
  }
  if (from.middle_weapon_no() != 0) {
    _internal_set_middle_weapon_no(from._internal_middle_weapon_no());
  }
  if (from.high_weapon_no() != 0) {
    _internal_set_high_weapon_no(from._internal_high_weapon_no());
  }
}

void OperationFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChampionFistGame.OperationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationFrame::CopyFrom(const OperationFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFistGame.OperationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationFrame::IsInitialized() const {
  return true;
}

void OperationFrame::InternalSwap(OperationFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationFrame, high_weapon_no_)
      + sizeof(OperationFrame::high_weapon_no_)
      - PROTOBUF_FIELD_OFFSET(OperationFrame, click_q_)>(
          reinterpret_cast<char*>(&click_q_),
          reinterpret_cast<char*>(&other->click_q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UnsyncFrame::_Internal {
 public:
};

UnsyncFrame::UnsyncFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  all_players_opt_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChampionFistGame.UnsyncFrame)
}
UnsyncFrame::UnsyncFrame(const UnsyncFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      all_players_opt_(from.all_players_opt_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:ChampionFistGame.UnsyncFrame)
}

void UnsyncFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsyncFrame_GameProtobuf_2eproto.base);
  frame_id_ = 0;
}

UnsyncFrame::~UnsyncFrame() {
  // @@protoc_insertion_point(destructor:ChampionFistGame.UnsyncFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsyncFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnsyncFrame::ArenaDtor(void* object) {
  UnsyncFrame* _this = reinterpret_cast< UnsyncFrame* >(object);
  (void)_this;
}
void UnsyncFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsyncFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsyncFrame& UnsyncFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsyncFrame_GameProtobuf_2eproto.base);
  return *internal_default_instance();
}


void UnsyncFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFistGame.UnsyncFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_players_opt_.Clear();
  frame_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsyncFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ChampionFistGame.OperationFrame all_players_opt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_players_opt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsyncFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFistGame.UnsyncFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_id(), target);
  }

  // repeated .ChampionFistGame.OperationFrame all_players_opt = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_all_players_opt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_all_players_opt(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFistGame.UnsyncFrame)
  return target;
}

size_t UnsyncFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFistGame.UnsyncFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChampionFistGame.OperationFrame all_players_opt = 2;
  total_size += 1UL * this->_internal_all_players_opt_size();
  for (const auto& msg : this->all_players_opt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsyncFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChampionFistGame.UnsyncFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsyncFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsyncFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChampionFistGame.UnsyncFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChampionFistGame.UnsyncFrame)
    MergeFrom(*source);
  }
}

void UnsyncFrame::MergeFrom(const UnsyncFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFistGame.UnsyncFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_players_opt_.MergeFrom(from.all_players_opt_);
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void UnsyncFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChampionFistGame.UnsyncFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsyncFrame::CopyFrom(const UnsyncFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFistGame.UnsyncFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsyncFrame::IsInitialized() const {
  return true;
}

void UnsyncFrame::InternalSwap(UnsyncFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  all_players_opt_.InternalSwap(&other->all_players_opt_);
  swap(frame_id_, other->frame_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsyncFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class S_LogicFrame::_Internal {
 public:
};

S_LogicFrame::S_LogicFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unsync_frames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChampionFistGame.S_LogicFrame)
}
S_LogicFrame::S_LogicFrame(const S_LogicFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unsync_frames_(from.unsync_frames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:ChampionFistGame.S_LogicFrame)
}

void S_LogicFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S_LogicFrame_GameProtobuf_2eproto.base);
  frame_id_ = 0;
}

S_LogicFrame::~S_LogicFrame() {
  // @@protoc_insertion_point(destructor:ChampionFistGame.S_LogicFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_LogicFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void S_LogicFrame::ArenaDtor(void* object) {
  S_LogicFrame* _this = reinterpret_cast< S_LogicFrame* >(object);
  (void)_this;
}
void S_LogicFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LogicFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S_LogicFrame& S_LogicFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S_LogicFrame_GameProtobuf_2eproto.base);
  return *internal_default_instance();
}


void S_LogicFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFistGame.S_LogicFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unsync_frames_.Clear();
  frame_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LogicFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ChampionFistGame.UnsyncFrame unsync_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unsync_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_LogicFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFistGame.S_LogicFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_id(), target);
  }

  // repeated .ChampionFistGame.UnsyncFrame unsync_frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unsync_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_unsync_frames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFistGame.S_LogicFrame)
  return target;
}

size_t S_LogicFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFistGame.S_LogicFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChampionFistGame.UnsyncFrame unsync_frames = 2;
  total_size += 1UL * this->_internal_unsync_frames_size();
  for (const auto& msg : this->unsync_frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_LogicFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChampionFistGame.S_LogicFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const S_LogicFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_LogicFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChampionFistGame.S_LogicFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChampionFistGame.S_LogicFrame)
    MergeFrom(*source);
  }
}

void S_LogicFrame::MergeFrom(const S_LogicFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFistGame.S_LogicFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unsync_frames_.MergeFrom(from.unsync_frames_);
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void S_LogicFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChampionFistGame.S_LogicFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_LogicFrame::CopyFrom(const S_LogicFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFistGame.S_LogicFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LogicFrame::IsInitialized() const {
  return true;
}

void S_LogicFrame::InternalSwap(S_LogicFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unsync_frames_.InternalSwap(&other->unsync_frames_);
  swap(frame_id_, other->frame_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LogicFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class C_Connect::_Internal {
 public:
};

C_Connect::C_Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChampionFistGame.C_Connect)
}
C_Connect::C_Connect(const C_Connect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&seat_no_, &from.seat_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&champion_no_) -
    reinterpret_cast<char*>(&seat_no_)) + sizeof(champion_no_));
  // @@protoc_insertion_point(copy_constructor:ChampionFistGame.C_Connect)
}

void C_Connect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C_Connect_GameProtobuf_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&seat_no_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&champion_no_) -
      reinterpret_cast<char*>(&seat_no_)) + sizeof(champion_no_));
}

C_Connect::~C_Connect() {
  // @@protoc_insertion_point(destructor:ChampionFistGame.C_Connect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_Connect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_Connect::ArenaDtor(void* object) {
  C_Connect* _this = reinterpret_cast< C_Connect* >(object);
  (void)_this;
}
void C_Connect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_Connect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C_Connect& C_Connect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C_Connect_GameProtobuf_2eproto.base);
  return *internal_default_instance();
}


void C_Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFistGame.C_Connect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&seat_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&champion_no_) -
      reinterpret_cast<char*>(&seat_no_)) + sizeof(champion_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Connect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChampionFistGame.C_Connect.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seat_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seat_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 champion_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          champion_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Connect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFistGame.C_Connect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChampionFistGame.C_Connect.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 seat_no = 2;
  if (this->seat_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_seat_no(), target);
  }

  // int32 champion_no = 3;
  if (this->champion_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_champion_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFistGame.C_Connect)
  return target;
}

size_t C_Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFistGame.C_Connect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 seat_no = 2;
  if (this->seat_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seat_no());
  }

  // int32 champion_no = 3;
  if (this->champion_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_champion_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Connect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChampionFistGame.C_Connect)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Connect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Connect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChampionFistGame.C_Connect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChampionFistGame.C_Connect)
    MergeFrom(*source);
  }
}

void C_Connect::MergeFrom(const C_Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFistGame.C_Connect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.seat_no() != 0) {
    _internal_set_seat_no(from._internal_seat_no());
  }
  if (from.champion_no() != 0) {
    _internal_set_champion_no(from._internal_champion_no());
  }
}

void C_Connect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChampionFistGame.C_Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Connect::CopyFrom(const C_Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFistGame.C_Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Connect::IsInitialized() const {
  return true;
}

void C_Connect::InternalSwap(C_Connect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Connect, champion_no_)
      + sizeof(C_Connect::champion_no_)
      - PROTOBUF_FIELD_OFFSET(C_Connect, seat_no_)>(
          reinterpret_cast<char*>(&seat_no_),
          reinterpret_cast<char*>(&other->seat_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Connect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class C_PlayerFrame::_Internal {
 public:
  static const ::ChampionFistGame::OperationFrame& player_opt_frame(const C_PlayerFrame* msg);
};

const ::ChampionFistGame::OperationFrame&
C_PlayerFrame::_Internal::player_opt_frame(const C_PlayerFrame* msg) {
  return *msg->player_opt_frame_;
}
C_PlayerFrame::C_PlayerFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChampionFistGame.C_PlayerFrame)
}
C_PlayerFrame::C_PlayerFrame(const C_PlayerFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_opt_frame()) {
    player_opt_frame_ = new ::ChampionFistGame::OperationFrame(*from.player_opt_frame_);
  } else {
    player_opt_frame_ = nullptr;
  }
  frame_id_ = from.frame_id_;
  // @@protoc_insertion_point(copy_constructor:ChampionFistGame.C_PlayerFrame)
}

void C_PlayerFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C_PlayerFrame_GameProtobuf_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&player_opt_frame_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&frame_id_) -
      reinterpret_cast<char*>(&player_opt_frame_)) + sizeof(frame_id_));
}

C_PlayerFrame::~C_PlayerFrame() {
  // @@protoc_insertion_point(destructor:ChampionFistGame.C_PlayerFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_PlayerFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_opt_frame_;
}

void C_PlayerFrame::ArenaDtor(void* object) {
  C_PlayerFrame* _this = reinterpret_cast< C_PlayerFrame* >(object);
  (void)_this;
}
void C_PlayerFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_PlayerFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C_PlayerFrame& C_PlayerFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C_PlayerFrame_GameProtobuf_2eproto.base);
  return *internal_default_instance();
}


void C_PlayerFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:ChampionFistGame.C_PlayerFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && player_opt_frame_ != nullptr) {
    delete player_opt_frame_;
  }
  player_opt_frame_ = nullptr;
  frame_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PlayerFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChampionFistGame.OperationFrame player_opt_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_opt_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_PlayerFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChampionFistGame.C_PlayerFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_id(), target);
  }

  // .ChampionFistGame.OperationFrame player_opt_frame = 2;
  if (this->has_player_opt_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_opt_frame(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChampionFistGame.C_PlayerFrame)
  return target;
}

size_t C_PlayerFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChampionFistGame.C_PlayerFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChampionFistGame.OperationFrame player_opt_frame = 2;
  if (this->has_player_opt_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_opt_frame_);
  }

  // int32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_PlayerFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChampionFistGame.C_PlayerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const C_PlayerFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_PlayerFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChampionFistGame.C_PlayerFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChampionFistGame.C_PlayerFrame)
    MergeFrom(*source);
  }
}

void C_PlayerFrame::MergeFrom(const C_PlayerFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChampionFistGame.C_PlayerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_opt_frame()) {
    _internal_mutable_player_opt_frame()->::ChampionFistGame::OperationFrame::MergeFrom(from._internal_player_opt_frame());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void C_PlayerFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChampionFistGame.C_PlayerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_PlayerFrame::CopyFrom(const C_PlayerFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChampionFistGame.C_PlayerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PlayerFrame::IsInitialized() const {
  return true;
}

void C_PlayerFrame::InternalSwap(C_PlayerFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PlayerFrame, frame_id_)
      + sizeof(C_PlayerFrame::frame_id_)
      - PROTOBUF_FIELD_OFFSET(C_PlayerFrame, player_opt_frame_)>(
          reinterpret_cast<char*>(&player_opt_frame_),
          reinterpret_cast<char*>(&other->player_opt_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PlayerFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ChampionFistGame
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChampionFistGame::GamePlayerInfo* Arena::CreateMaybeMessage< ::ChampionFistGame::GamePlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFistGame::GamePlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFistGame::S_Initialize* Arena::CreateMaybeMessage< ::ChampionFistGame::S_Initialize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFistGame::S_Initialize >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFistGame::S_OtherExit* Arena::CreateMaybeMessage< ::ChampionFistGame::S_OtherExit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFistGame::S_OtherExit >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFistGame::OperationFrame* Arena::CreateMaybeMessage< ::ChampionFistGame::OperationFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFistGame::OperationFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFistGame::UnsyncFrame* Arena::CreateMaybeMessage< ::ChampionFistGame::UnsyncFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFistGame::UnsyncFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFistGame::S_LogicFrame* Arena::CreateMaybeMessage< ::ChampionFistGame::S_LogicFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFistGame::S_LogicFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFistGame::C_Connect* Arena::CreateMaybeMessage< ::ChampionFistGame::C_Connect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFistGame::C_Connect >(arena);
}
template<> PROTOBUF_NOINLINE ::ChampionFistGame::C_PlayerFrame* Arena::CreateMaybeMessage< ::ChampionFistGame::C_PlayerFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChampionFistGame::C_PlayerFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
