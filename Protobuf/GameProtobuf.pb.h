// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameProtobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameProtobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameProtobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameProtobuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameProtobuf_2eproto;
namespace ChampionFistGame {
class C_Connect;
class C_ConnectDefaultTypeInternal;
extern C_ConnectDefaultTypeInternal _C_Connect_default_instance_;
class C_PlayerFrame;
class C_PlayerFrameDefaultTypeInternal;
extern C_PlayerFrameDefaultTypeInternal _C_PlayerFrame_default_instance_;
class GamePlayerInfo;
class GamePlayerInfoDefaultTypeInternal;
extern GamePlayerInfoDefaultTypeInternal _GamePlayerInfo_default_instance_;
class OperationFrame;
class OperationFrameDefaultTypeInternal;
extern OperationFrameDefaultTypeInternal _OperationFrame_default_instance_;
class S_Initialize;
class S_InitializeDefaultTypeInternal;
extern S_InitializeDefaultTypeInternal _S_Initialize_default_instance_;
class S_LogicFrame;
class S_LogicFrameDefaultTypeInternal;
extern S_LogicFrameDefaultTypeInternal _S_LogicFrame_default_instance_;
class S_OtherExit;
class S_OtherExitDefaultTypeInternal;
extern S_OtherExitDefaultTypeInternal _S_OtherExit_default_instance_;
class UnsyncFrame;
class UnsyncFrameDefaultTypeInternal;
extern UnsyncFrameDefaultTypeInternal _UnsyncFrame_default_instance_;
}  // namespace ChampionFistGame
PROTOBUF_NAMESPACE_OPEN
template<> ::ChampionFistGame::C_Connect* Arena::CreateMaybeMessage<::ChampionFistGame::C_Connect>(Arena*);
template<> ::ChampionFistGame::C_PlayerFrame* Arena::CreateMaybeMessage<::ChampionFistGame::C_PlayerFrame>(Arena*);
template<> ::ChampionFistGame::GamePlayerInfo* Arena::CreateMaybeMessage<::ChampionFistGame::GamePlayerInfo>(Arena*);
template<> ::ChampionFistGame::OperationFrame* Arena::CreateMaybeMessage<::ChampionFistGame::OperationFrame>(Arena*);
template<> ::ChampionFistGame::S_Initialize* Arena::CreateMaybeMessage<::ChampionFistGame::S_Initialize>(Arena*);
template<> ::ChampionFistGame::S_LogicFrame* Arena::CreateMaybeMessage<::ChampionFistGame::S_LogicFrame>(Arena*);
template<> ::ChampionFistGame::S_OtherExit* Arena::CreateMaybeMessage<::ChampionFistGame::S_OtherExit>(Arena*);
template<> ::ChampionFistGame::UnsyncFrame* Arena::CreateMaybeMessage<::ChampionFistGame::UnsyncFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChampionFistGame {

enum ServerCommandType : int {
  S_EMPTY = 0,
  S_CONNECT = 1,
  S_INITIALIZE = 2,
  S_LOAD = 3,
  S_EXIT = 4,
  S_OTHER_EXIT = 5,
  S_LOGIC_FRAME = 6,
  S_DELAY = 7,
  S_START = 8,
  ServerCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerCommandType_IsValid(int value);
constexpr ServerCommandType ServerCommandType_MIN = S_EMPTY;
constexpr ServerCommandType ServerCommandType_MAX = S_START;
constexpr int ServerCommandType_ARRAYSIZE = ServerCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommandType_descriptor();
template<typename T>
inline const std::string& ServerCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerCommandType_descriptor(), enum_t_value);
}
inline bool ServerCommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerCommandType>(
    ServerCommandType_descriptor(), name, value);
}
enum ClientCommandType : int {
  C_EMPTY = 0,
  C_CONNECT = 1,
  C_LOAD = 2,
  C_EXIT = 3,
  C_PLAYER_FRAME = 4,
  C_DELAY = 5,
  C_GAMEOVER = 6,
  ClientCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientCommandType_IsValid(int value);
constexpr ClientCommandType ClientCommandType_MIN = C_EMPTY;
constexpr ClientCommandType ClientCommandType_MAX = C_GAMEOVER;
constexpr int ClientCommandType_ARRAYSIZE = ClientCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommandType_descriptor();
template<typename T>
inline const std::string& ClientCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientCommandType_descriptor(), enum_t_value);
}
inline bool ClientCommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientCommandType>(
    ClientCommandType_descriptor(), name, value);
}
// ===================================================================

class GamePlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.GamePlayerInfo) */ {
 public:
  inline GamePlayerInfo() : GamePlayerInfo(nullptr) {}
  virtual ~GamePlayerInfo();

  GamePlayerInfo(const GamePlayerInfo& from);
  GamePlayerInfo(GamePlayerInfo&& from) noexcept
    : GamePlayerInfo() {
    *this = ::std::move(from);
  }

  inline GamePlayerInfo& operator=(const GamePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GamePlayerInfo& operator=(GamePlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GamePlayerInfo& default_instance();

  static inline const GamePlayerInfo* internal_default_instance() {
    return reinterpret_cast<const GamePlayerInfo*>(
               &_GamePlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GamePlayerInfo& a, GamePlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GamePlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GamePlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GamePlayerInfo* New() const final {
    return CreateMaybeMessage<GamePlayerInfo>(nullptr);
  }

  GamePlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GamePlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GamePlayerInfo& from);
  void MergeFrom(const GamePlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GamePlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.GamePlayerInfo";
  }
  protected:
  explicit GamePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameProtobuf_2eproto);
    return ::descriptor_table_GameProtobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSeatNoFieldNumber = 2,
    kChampionNoFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 seat_no = 2;
  void clear_seat_no();
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no() const;
  void set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seat_no() const;
  void _internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 champion_no = 3;
  void clear_champion_no();
  ::PROTOBUF_NAMESPACE_ID::int32 champion_no() const;
  void set_champion_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_champion_no() const;
  void _internal_set_champion_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.GamePlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 champion_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameProtobuf_2eproto;
};
// -------------------------------------------------------------------

class S_Initialize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.S_Initialize) */ {
 public:
  inline S_Initialize() : S_Initialize(nullptr) {}
  virtual ~S_Initialize();

  S_Initialize(const S_Initialize& from);
  S_Initialize(S_Initialize&& from) noexcept
    : S_Initialize() {
    *this = ::std::move(from);
  }

  inline S_Initialize& operator=(const S_Initialize& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Initialize& operator=(S_Initialize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S_Initialize& default_instance();

  static inline const S_Initialize* internal_default_instance() {
    return reinterpret_cast<const S_Initialize*>(
               &_S_Initialize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_Initialize& a, S_Initialize& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Initialize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Initialize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_Initialize* New() const final {
    return CreateMaybeMessage<S_Initialize>(nullptr);
  }

  S_Initialize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_Initialize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_Initialize& from);
  void MergeFrom(const S_Initialize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Initialize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.S_Initialize";
  }
  protected:
  explicit S_Initialize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameProtobuf_2eproto);
    return ::descriptor_table_GameProtobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamePlayersInfoFieldNumber = 3,
    kSeatNoFieldNumber = 1,
    kRandomSeedFieldNumber = 2,
  };
  // repeated .ChampionFistGame.GamePlayerInfo game_players_info = 3;
  int game_players_info_size() const;
  private:
  int _internal_game_players_info_size() const;
  public:
  void clear_game_players_info();
  ::ChampionFistGame::GamePlayerInfo* mutable_game_players_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::GamePlayerInfo >*
      mutable_game_players_info();
  private:
  const ::ChampionFistGame::GamePlayerInfo& _internal_game_players_info(int index) const;
  ::ChampionFistGame::GamePlayerInfo* _internal_add_game_players_info();
  public:
  const ::ChampionFistGame::GamePlayerInfo& game_players_info(int index) const;
  ::ChampionFistGame::GamePlayerInfo* add_game_players_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::GamePlayerInfo >&
      game_players_info() const;

  // int32 seat_no = 1;
  void clear_seat_no();
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no() const;
  void set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seat_no() const;
  void _internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 random_seed = 2;
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_random_seed() const;
  void _internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.S_Initialize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::GamePlayerInfo > game_players_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 random_seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameProtobuf_2eproto;
};
// -------------------------------------------------------------------

class S_OtherExit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.S_OtherExit) */ {
 public:
  inline S_OtherExit() : S_OtherExit(nullptr) {}
  virtual ~S_OtherExit();

  S_OtherExit(const S_OtherExit& from);
  S_OtherExit(S_OtherExit&& from) noexcept
    : S_OtherExit() {
    *this = ::std::move(from);
  }

  inline S_OtherExit& operator=(const S_OtherExit& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OtherExit& operator=(S_OtherExit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S_OtherExit& default_instance();

  static inline const S_OtherExit* internal_default_instance() {
    return reinterpret_cast<const S_OtherExit*>(
               &_S_OtherExit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_OtherExit& a, S_OtherExit& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OtherExit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OtherExit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_OtherExit* New() const final {
    return CreateMaybeMessage<S_OtherExit>(nullptr);
  }

  S_OtherExit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_OtherExit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_OtherExit& from);
  void MergeFrom(const S_OtherExit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OtherExit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.S_OtherExit";
  }
  protected:
  explicit S_OtherExit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameProtobuf_2eproto);
    return ::descriptor_table_GameProtobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatNoFieldNumber = 1,
  };
  // int32 seat_no = 1;
  void clear_seat_no();
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no() const;
  void set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seat_no() const;
  void _internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.S_OtherExit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameProtobuf_2eproto;
};
// -------------------------------------------------------------------

class OperationFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.OperationFrame) */ {
 public:
  inline OperationFrame() : OperationFrame(nullptr) {}
  virtual ~OperationFrame();

  OperationFrame(const OperationFrame& from);
  OperationFrame(OperationFrame&& from) noexcept
    : OperationFrame() {
    *this = ::std::move(from);
  }

  inline OperationFrame& operator=(const OperationFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationFrame& operator=(OperationFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationFrame& default_instance();

  static inline const OperationFrame* internal_default_instance() {
    return reinterpret_cast<const OperationFrame*>(
               &_OperationFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OperationFrame& a, OperationFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationFrame* New() const final {
    return CreateMaybeMessage<OperationFrame>(nullptr);
  }

  OperationFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationFrame& from);
  void MergeFrom(const OperationFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.OperationFrame";
  }
  protected:
  explicit OperationFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameProtobuf_2eproto);
    return ::descriptor_table_GameProtobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClickQFieldNumber = 1,
    kClickWFieldNumber = 2,
    kClickEFieldNumber = 3,
    kClickRFieldNumber = 4,
    kClickPropertyFieldNumber = 5,
    kClickMouseFieldNumber = 6,
    kChangeWeaponFieldNumber = 7,
    kChangeArmorFieldNumber = 8,
    kMousePosXFieldNumber = 9,
    kMousePosYFieldNumber = 10,
    kArmorNoFieldNumber = 11,
    kLowWeaponNoFieldNumber = 12,
    kMiddleWeaponNoFieldNumber = 13,
    kHighWeaponNoFieldNumber = 14,
  };
  // bool click_q = 1;
  void clear_click_q();
  bool click_q() const;
  void set_click_q(bool value);
  private:
  bool _internal_click_q() const;
  void _internal_set_click_q(bool value);
  public:

  // bool click_w = 2;
  void clear_click_w();
  bool click_w() const;
  void set_click_w(bool value);
  private:
  bool _internal_click_w() const;
  void _internal_set_click_w(bool value);
  public:

  // bool click_e = 3;
  void clear_click_e();
  bool click_e() const;
  void set_click_e(bool value);
  private:
  bool _internal_click_e() const;
  void _internal_set_click_e(bool value);
  public:

  // bool click_r = 4;
  void clear_click_r();
  bool click_r() const;
  void set_click_r(bool value);
  private:
  bool _internal_click_r() const;
  void _internal_set_click_r(bool value);
  public:

  // bool click_property = 5;
  void clear_click_property();
  bool click_property() const;
  void set_click_property(bool value);
  private:
  bool _internal_click_property() const;
  void _internal_set_click_property(bool value);
  public:

  // bool click_mouse = 6;
  void clear_click_mouse();
  bool click_mouse() const;
  void set_click_mouse(bool value);
  private:
  bool _internal_click_mouse() const;
  void _internal_set_click_mouse(bool value);
  public:

  // bool change_weapon = 7;
  void clear_change_weapon();
  bool change_weapon() const;
  void set_change_weapon(bool value);
  private:
  bool _internal_change_weapon() const;
  void _internal_set_change_weapon(bool value);
  public:

  // bool change_armor = 8;
  void clear_change_armor();
  bool change_armor() const;
  void set_change_armor(bool value);
  private:
  bool _internal_change_armor() const;
  void _internal_set_change_armor(bool value);
  public:

  // int32 mouse_pos_x = 9;
  void clear_mouse_pos_x();
  ::PROTOBUF_NAMESPACE_ID::int32 mouse_pos_x() const;
  void set_mouse_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mouse_pos_x() const;
  void _internal_set_mouse_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mouse_pos_y = 10;
  void clear_mouse_pos_y();
  ::PROTOBUF_NAMESPACE_ID::int32 mouse_pos_y() const;
  void set_mouse_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mouse_pos_y() const;
  void _internal_set_mouse_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 armor_no = 11;
  void clear_armor_no();
  ::PROTOBUF_NAMESPACE_ID::int32 armor_no() const;
  void set_armor_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_armor_no() const;
  void _internal_set_armor_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 low_weapon_no = 12;
  void clear_low_weapon_no();
  ::PROTOBUF_NAMESPACE_ID::int32 low_weapon_no() const;
  void set_low_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_low_weapon_no() const;
  void _internal_set_low_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 middle_weapon_no = 13;
  void clear_middle_weapon_no();
  ::PROTOBUF_NAMESPACE_ID::int32 middle_weapon_no() const;
  void set_middle_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_middle_weapon_no() const;
  void _internal_set_middle_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 high_weapon_no = 14;
  void clear_high_weapon_no();
  ::PROTOBUF_NAMESPACE_ID::int32 high_weapon_no() const;
  void set_high_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_high_weapon_no() const;
  void _internal_set_high_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.OperationFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool click_q_;
  bool click_w_;
  bool click_e_;
  bool click_r_;
  bool click_property_;
  bool click_mouse_;
  bool change_weapon_;
  bool change_armor_;
  ::PROTOBUF_NAMESPACE_ID::int32 mouse_pos_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 mouse_pos_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 armor_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 low_weapon_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 middle_weapon_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 high_weapon_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameProtobuf_2eproto;
};
// -------------------------------------------------------------------

class UnsyncFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.UnsyncFrame) */ {
 public:
  inline UnsyncFrame() : UnsyncFrame(nullptr) {}
  virtual ~UnsyncFrame();

  UnsyncFrame(const UnsyncFrame& from);
  UnsyncFrame(UnsyncFrame&& from) noexcept
    : UnsyncFrame() {
    *this = ::std::move(from);
  }

  inline UnsyncFrame& operator=(const UnsyncFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsyncFrame& operator=(UnsyncFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnsyncFrame& default_instance();

  static inline const UnsyncFrame* internal_default_instance() {
    return reinterpret_cast<const UnsyncFrame*>(
               &_UnsyncFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UnsyncFrame& a, UnsyncFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsyncFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsyncFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsyncFrame* New() const final {
    return CreateMaybeMessage<UnsyncFrame>(nullptr);
  }

  UnsyncFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsyncFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsyncFrame& from);
  void MergeFrom(const UnsyncFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsyncFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.UnsyncFrame";
  }
  protected:
  explicit UnsyncFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameProtobuf_2eproto);
    return ::descriptor_table_GameProtobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllPlayersOptFieldNumber = 2,
    kFrameIdFieldNumber = 1,
  };
  // repeated .ChampionFistGame.OperationFrame all_players_opt = 2;
  int all_players_opt_size() const;
  private:
  int _internal_all_players_opt_size() const;
  public:
  void clear_all_players_opt();
  ::ChampionFistGame::OperationFrame* mutable_all_players_opt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::OperationFrame >*
      mutable_all_players_opt();
  private:
  const ::ChampionFistGame::OperationFrame& _internal_all_players_opt(int index) const;
  ::ChampionFistGame::OperationFrame* _internal_add_all_players_opt();
  public:
  const ::ChampionFistGame::OperationFrame& all_players_opt(int index) const;
  ::ChampionFistGame::OperationFrame* add_all_players_opt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::OperationFrame >&
      all_players_opt() const;

  // int32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.UnsyncFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::OperationFrame > all_players_opt_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameProtobuf_2eproto;
};
// -------------------------------------------------------------------

class S_LogicFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.S_LogicFrame) */ {
 public:
  inline S_LogicFrame() : S_LogicFrame(nullptr) {}
  virtual ~S_LogicFrame();

  S_LogicFrame(const S_LogicFrame& from);
  S_LogicFrame(S_LogicFrame&& from) noexcept
    : S_LogicFrame() {
    *this = ::std::move(from);
  }

  inline S_LogicFrame& operator=(const S_LogicFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LogicFrame& operator=(S_LogicFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S_LogicFrame& default_instance();

  static inline const S_LogicFrame* internal_default_instance() {
    return reinterpret_cast<const S_LogicFrame*>(
               &_S_LogicFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_LogicFrame& a, S_LogicFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LogicFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LogicFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LogicFrame* New() const final {
    return CreateMaybeMessage<S_LogicFrame>(nullptr);
  }

  S_LogicFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LogicFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LogicFrame& from);
  void MergeFrom(const S_LogicFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LogicFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.S_LogicFrame";
  }
  protected:
  explicit S_LogicFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameProtobuf_2eproto);
    return ::descriptor_table_GameProtobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnsyncFramesFieldNumber = 2,
    kFrameIdFieldNumber = 1,
  };
  // repeated .ChampionFistGame.UnsyncFrame unsync_frames = 2;
  int unsync_frames_size() const;
  private:
  int _internal_unsync_frames_size() const;
  public:
  void clear_unsync_frames();
  ::ChampionFistGame::UnsyncFrame* mutable_unsync_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::UnsyncFrame >*
      mutable_unsync_frames();
  private:
  const ::ChampionFistGame::UnsyncFrame& _internal_unsync_frames(int index) const;
  ::ChampionFistGame::UnsyncFrame* _internal_add_unsync_frames();
  public:
  const ::ChampionFistGame::UnsyncFrame& unsync_frames(int index) const;
  ::ChampionFistGame::UnsyncFrame* add_unsync_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::UnsyncFrame >&
      unsync_frames() const;

  // int32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.S_LogicFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::UnsyncFrame > unsync_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameProtobuf_2eproto;
};
// -------------------------------------------------------------------

class C_Connect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.C_Connect) */ {
 public:
  inline C_Connect() : C_Connect(nullptr) {}
  virtual ~C_Connect();

  C_Connect(const C_Connect& from);
  C_Connect(C_Connect&& from) noexcept
    : C_Connect() {
    *this = ::std::move(from);
  }

  inline C_Connect& operator=(const C_Connect& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Connect& operator=(C_Connect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C_Connect& default_instance();

  static inline const C_Connect* internal_default_instance() {
    return reinterpret_cast<const C_Connect*>(
               &_C_Connect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_Connect& a, C_Connect& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Connect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Connect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_Connect* New() const final {
    return CreateMaybeMessage<C_Connect>(nullptr);
  }

  C_Connect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_Connect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_Connect& from);
  void MergeFrom(const C_Connect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Connect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.C_Connect";
  }
  protected:
  explicit C_Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameProtobuf_2eproto);
    return ::descriptor_table_GameProtobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSeatNoFieldNumber = 2,
    kChampionNoFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 seat_no = 2;
  void clear_seat_no();
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no() const;
  void set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seat_no() const;
  void _internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 champion_no = 3;
  void clear_champion_no();
  ::PROTOBUF_NAMESPACE_ID::int32 champion_no() const;
  void set_champion_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_champion_no() const;
  void _internal_set_champion_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.C_Connect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 champion_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameProtobuf_2eproto;
};
// -------------------------------------------------------------------

class C_PlayerFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChampionFistGame.C_PlayerFrame) */ {
 public:
  inline C_PlayerFrame() : C_PlayerFrame(nullptr) {}
  virtual ~C_PlayerFrame();

  C_PlayerFrame(const C_PlayerFrame& from);
  C_PlayerFrame(C_PlayerFrame&& from) noexcept
    : C_PlayerFrame() {
    *this = ::std::move(from);
  }

  inline C_PlayerFrame& operator=(const C_PlayerFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PlayerFrame& operator=(C_PlayerFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C_PlayerFrame& default_instance();

  static inline const C_PlayerFrame* internal_default_instance() {
    return reinterpret_cast<const C_PlayerFrame*>(
               &_C_PlayerFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_PlayerFrame& a, C_PlayerFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PlayerFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PlayerFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PlayerFrame* New() const final {
    return CreateMaybeMessage<C_PlayerFrame>(nullptr);
  }

  C_PlayerFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PlayerFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PlayerFrame& from);
  void MergeFrom(const C_PlayerFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PlayerFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChampionFistGame.C_PlayerFrame";
  }
  protected:
  explicit C_PlayerFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameProtobuf_2eproto);
    return ::descriptor_table_GameProtobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerOptFrameFieldNumber = 2,
    kFrameIdFieldNumber = 1,
  };
  // .ChampionFistGame.OperationFrame player_opt_frame = 2;
  bool has_player_opt_frame() const;
  private:
  bool _internal_has_player_opt_frame() const;
  public:
  void clear_player_opt_frame();
  const ::ChampionFistGame::OperationFrame& player_opt_frame() const;
  ::ChampionFistGame::OperationFrame* release_player_opt_frame();
  ::ChampionFistGame::OperationFrame* mutable_player_opt_frame();
  void set_allocated_player_opt_frame(::ChampionFistGame::OperationFrame* player_opt_frame);
  private:
  const ::ChampionFistGame::OperationFrame& _internal_player_opt_frame() const;
  ::ChampionFistGame::OperationFrame* _internal_mutable_player_opt_frame();
  public:
  void unsafe_arena_set_allocated_player_opt_frame(
      ::ChampionFistGame::OperationFrame* player_opt_frame);
  ::ChampionFistGame::OperationFrame* unsafe_arena_release_player_opt_frame();

  // int32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChampionFistGame.C_PlayerFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ChampionFistGame::OperationFrame* player_opt_frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameProtobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GamePlayerInfo

// string name = 1;
inline void GamePlayerInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GamePlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.GamePlayerInfo.name)
  return _internal_name();
}
inline void GamePlayerInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.GamePlayerInfo.name)
}
inline std::string* GamePlayerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ChampionFistGame.GamePlayerInfo.name)
  return _internal_mutable_name();
}
inline const std::string& GamePlayerInfo::_internal_name() const {
  return name_.Get();
}
inline void GamePlayerInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GamePlayerInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChampionFistGame.GamePlayerInfo.name)
}
inline void GamePlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ChampionFistGame.GamePlayerInfo.name)
}
inline void GamePlayerInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChampionFistGame.GamePlayerInfo.name)
}
inline std::string* GamePlayerInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GamePlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:ChampionFistGame.GamePlayerInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GamePlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChampionFistGame.GamePlayerInfo.name)
}

// int32 seat_no = 2;
inline void GamePlayerInfo::clear_seat_no() {
  seat_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GamePlayerInfo::_internal_seat_no() const {
  return seat_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GamePlayerInfo::seat_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.GamePlayerInfo.seat_no)
  return _internal_seat_no();
}
inline void GamePlayerInfo::_internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seat_no_ = value;
}
inline void GamePlayerInfo::set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.GamePlayerInfo.seat_no)
}

// int32 champion_no = 3;
inline void GamePlayerInfo::clear_champion_no() {
  champion_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GamePlayerInfo::_internal_champion_no() const {
  return champion_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GamePlayerInfo::champion_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.GamePlayerInfo.champion_no)
  return _internal_champion_no();
}
inline void GamePlayerInfo::_internal_set_champion_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  champion_no_ = value;
}
inline void GamePlayerInfo::set_champion_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_champion_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.GamePlayerInfo.champion_no)
}

// -------------------------------------------------------------------

// S_Initialize

// int32 seat_no = 1;
inline void S_Initialize::clear_seat_no() {
  seat_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_Initialize::_internal_seat_no() const {
  return seat_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_Initialize::seat_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_Initialize.seat_no)
  return _internal_seat_no();
}
inline void S_Initialize::_internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seat_no_ = value;
}
inline void S_Initialize::set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.S_Initialize.seat_no)
}

// int32 random_seed = 2;
inline void S_Initialize::clear_random_seed() {
  random_seed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_Initialize::_internal_random_seed() const {
  return random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_Initialize::random_seed() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_Initialize.random_seed)
  return _internal_random_seed();
}
inline void S_Initialize::_internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  random_seed_ = value;
}
inline void S_Initialize::set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.S_Initialize.random_seed)
}

// repeated .ChampionFistGame.GamePlayerInfo game_players_info = 3;
inline int S_Initialize::_internal_game_players_info_size() const {
  return game_players_info_.size();
}
inline int S_Initialize::game_players_info_size() const {
  return _internal_game_players_info_size();
}
inline void S_Initialize::clear_game_players_info() {
  game_players_info_.Clear();
}
inline ::ChampionFistGame::GamePlayerInfo* S_Initialize::mutable_game_players_info(int index) {
  // @@protoc_insertion_point(field_mutable:ChampionFistGame.S_Initialize.game_players_info)
  return game_players_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::GamePlayerInfo >*
S_Initialize::mutable_game_players_info() {
  // @@protoc_insertion_point(field_mutable_list:ChampionFistGame.S_Initialize.game_players_info)
  return &game_players_info_;
}
inline const ::ChampionFistGame::GamePlayerInfo& S_Initialize::_internal_game_players_info(int index) const {
  return game_players_info_.Get(index);
}
inline const ::ChampionFistGame::GamePlayerInfo& S_Initialize::game_players_info(int index) const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_Initialize.game_players_info)
  return _internal_game_players_info(index);
}
inline ::ChampionFistGame::GamePlayerInfo* S_Initialize::_internal_add_game_players_info() {
  return game_players_info_.Add();
}
inline ::ChampionFistGame::GamePlayerInfo* S_Initialize::add_game_players_info() {
  // @@protoc_insertion_point(field_add:ChampionFistGame.S_Initialize.game_players_info)
  return _internal_add_game_players_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::GamePlayerInfo >&
S_Initialize::game_players_info() const {
  // @@protoc_insertion_point(field_list:ChampionFistGame.S_Initialize.game_players_info)
  return game_players_info_;
}

// -------------------------------------------------------------------

// S_OtherExit

// int32 seat_no = 1;
inline void S_OtherExit::clear_seat_no() {
  seat_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_OtherExit::_internal_seat_no() const {
  return seat_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_OtherExit::seat_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_OtherExit.seat_no)
  return _internal_seat_no();
}
inline void S_OtherExit::_internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seat_no_ = value;
}
inline void S_OtherExit::set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.S_OtherExit.seat_no)
}

// -------------------------------------------------------------------

// OperationFrame

// bool click_q = 1;
inline void OperationFrame::clear_click_q() {
  click_q_ = false;
}
inline bool OperationFrame::_internal_click_q() const {
  return click_q_;
}
inline bool OperationFrame::click_q() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_q)
  return _internal_click_q();
}
inline void OperationFrame::_internal_set_click_q(bool value) {
  
  click_q_ = value;
}
inline void OperationFrame::set_click_q(bool value) {
  _internal_set_click_q(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_q)
}

// bool click_w = 2;
inline void OperationFrame::clear_click_w() {
  click_w_ = false;
}
inline bool OperationFrame::_internal_click_w() const {
  return click_w_;
}
inline bool OperationFrame::click_w() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_w)
  return _internal_click_w();
}
inline void OperationFrame::_internal_set_click_w(bool value) {
  
  click_w_ = value;
}
inline void OperationFrame::set_click_w(bool value) {
  _internal_set_click_w(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_w)
}

// bool click_e = 3;
inline void OperationFrame::clear_click_e() {
  click_e_ = false;
}
inline bool OperationFrame::_internal_click_e() const {
  return click_e_;
}
inline bool OperationFrame::click_e() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_e)
  return _internal_click_e();
}
inline void OperationFrame::_internal_set_click_e(bool value) {
  
  click_e_ = value;
}
inline void OperationFrame::set_click_e(bool value) {
  _internal_set_click_e(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_e)
}

// bool click_r = 4;
inline void OperationFrame::clear_click_r() {
  click_r_ = false;
}
inline bool OperationFrame::_internal_click_r() const {
  return click_r_;
}
inline bool OperationFrame::click_r() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_r)
  return _internal_click_r();
}
inline void OperationFrame::_internal_set_click_r(bool value) {
  
  click_r_ = value;
}
inline void OperationFrame::set_click_r(bool value) {
  _internal_set_click_r(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_r)
}

// bool click_property = 5;
inline void OperationFrame::clear_click_property() {
  click_property_ = false;
}
inline bool OperationFrame::_internal_click_property() const {
  return click_property_;
}
inline bool OperationFrame::click_property() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_property)
  return _internal_click_property();
}
inline void OperationFrame::_internal_set_click_property(bool value) {
  
  click_property_ = value;
}
inline void OperationFrame::set_click_property(bool value) {
  _internal_set_click_property(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_property)
}

// bool click_mouse = 6;
inline void OperationFrame::clear_click_mouse() {
  click_mouse_ = false;
}
inline bool OperationFrame::_internal_click_mouse() const {
  return click_mouse_;
}
inline bool OperationFrame::click_mouse() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.click_mouse)
  return _internal_click_mouse();
}
inline void OperationFrame::_internal_set_click_mouse(bool value) {
  
  click_mouse_ = value;
}
inline void OperationFrame::set_click_mouse(bool value) {
  _internal_set_click_mouse(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.click_mouse)
}

// bool change_weapon = 7;
inline void OperationFrame::clear_change_weapon() {
  change_weapon_ = false;
}
inline bool OperationFrame::_internal_change_weapon() const {
  return change_weapon_;
}
inline bool OperationFrame::change_weapon() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.change_weapon)
  return _internal_change_weapon();
}
inline void OperationFrame::_internal_set_change_weapon(bool value) {
  
  change_weapon_ = value;
}
inline void OperationFrame::set_change_weapon(bool value) {
  _internal_set_change_weapon(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.change_weapon)
}

// bool change_armor = 8;
inline void OperationFrame::clear_change_armor() {
  change_armor_ = false;
}
inline bool OperationFrame::_internal_change_armor() const {
  return change_armor_;
}
inline bool OperationFrame::change_armor() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.change_armor)
  return _internal_change_armor();
}
inline void OperationFrame::_internal_set_change_armor(bool value) {
  
  change_armor_ = value;
}
inline void OperationFrame::set_change_armor(bool value) {
  _internal_set_change_armor(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.change_armor)
}

// int32 mouse_pos_x = 9;
inline void OperationFrame::clear_mouse_pos_x() {
  mouse_pos_x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::_internal_mouse_pos_x() const {
  return mouse_pos_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::mouse_pos_x() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.mouse_pos_x)
  return _internal_mouse_pos_x();
}
inline void OperationFrame::_internal_set_mouse_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mouse_pos_x_ = value;
}
inline void OperationFrame::set_mouse_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mouse_pos_x(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.mouse_pos_x)
}

// int32 mouse_pos_y = 10;
inline void OperationFrame::clear_mouse_pos_y() {
  mouse_pos_y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::_internal_mouse_pos_y() const {
  return mouse_pos_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::mouse_pos_y() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.mouse_pos_y)
  return _internal_mouse_pos_y();
}
inline void OperationFrame::_internal_set_mouse_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mouse_pos_y_ = value;
}
inline void OperationFrame::set_mouse_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mouse_pos_y(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.mouse_pos_y)
}

// int32 armor_no = 11;
inline void OperationFrame::clear_armor_no() {
  armor_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::_internal_armor_no() const {
  return armor_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::armor_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.armor_no)
  return _internal_armor_no();
}
inline void OperationFrame::_internal_set_armor_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  armor_no_ = value;
}
inline void OperationFrame::set_armor_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_armor_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.armor_no)
}

// int32 low_weapon_no = 12;
inline void OperationFrame::clear_low_weapon_no() {
  low_weapon_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::_internal_low_weapon_no() const {
  return low_weapon_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::low_weapon_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.low_weapon_no)
  return _internal_low_weapon_no();
}
inline void OperationFrame::_internal_set_low_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  low_weapon_no_ = value;
}
inline void OperationFrame::set_low_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_low_weapon_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.low_weapon_no)
}

// int32 middle_weapon_no = 13;
inline void OperationFrame::clear_middle_weapon_no() {
  middle_weapon_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::_internal_middle_weapon_no() const {
  return middle_weapon_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::middle_weapon_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.middle_weapon_no)
  return _internal_middle_weapon_no();
}
inline void OperationFrame::_internal_set_middle_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  middle_weapon_no_ = value;
}
inline void OperationFrame::set_middle_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_middle_weapon_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.middle_weapon_no)
}

// int32 high_weapon_no = 14;
inline void OperationFrame::clear_high_weapon_no() {
  high_weapon_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::_internal_high_weapon_no() const {
  return high_weapon_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationFrame::high_weapon_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.OperationFrame.high_weapon_no)
  return _internal_high_weapon_no();
}
inline void OperationFrame::_internal_set_high_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  high_weapon_no_ = value;
}
inline void OperationFrame::set_high_weapon_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_high_weapon_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.OperationFrame.high_weapon_no)
}

// -------------------------------------------------------------------

// UnsyncFrame

// int32 frame_id = 1;
inline void UnsyncFrame::clear_frame_id() {
  frame_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnsyncFrame::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnsyncFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.UnsyncFrame.frame_id)
  return _internal_frame_id();
}
inline void UnsyncFrame::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_id_ = value;
}
inline void UnsyncFrame::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.UnsyncFrame.frame_id)
}

// repeated .ChampionFistGame.OperationFrame all_players_opt = 2;
inline int UnsyncFrame::_internal_all_players_opt_size() const {
  return all_players_opt_.size();
}
inline int UnsyncFrame::all_players_opt_size() const {
  return _internal_all_players_opt_size();
}
inline void UnsyncFrame::clear_all_players_opt() {
  all_players_opt_.Clear();
}
inline ::ChampionFistGame::OperationFrame* UnsyncFrame::mutable_all_players_opt(int index) {
  // @@protoc_insertion_point(field_mutable:ChampionFistGame.UnsyncFrame.all_players_opt)
  return all_players_opt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::OperationFrame >*
UnsyncFrame::mutable_all_players_opt() {
  // @@protoc_insertion_point(field_mutable_list:ChampionFistGame.UnsyncFrame.all_players_opt)
  return &all_players_opt_;
}
inline const ::ChampionFistGame::OperationFrame& UnsyncFrame::_internal_all_players_opt(int index) const {
  return all_players_opt_.Get(index);
}
inline const ::ChampionFistGame::OperationFrame& UnsyncFrame::all_players_opt(int index) const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.UnsyncFrame.all_players_opt)
  return _internal_all_players_opt(index);
}
inline ::ChampionFistGame::OperationFrame* UnsyncFrame::_internal_add_all_players_opt() {
  return all_players_opt_.Add();
}
inline ::ChampionFistGame::OperationFrame* UnsyncFrame::add_all_players_opt() {
  // @@protoc_insertion_point(field_add:ChampionFistGame.UnsyncFrame.all_players_opt)
  return _internal_add_all_players_opt();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::OperationFrame >&
UnsyncFrame::all_players_opt() const {
  // @@protoc_insertion_point(field_list:ChampionFistGame.UnsyncFrame.all_players_opt)
  return all_players_opt_;
}

// -------------------------------------------------------------------

// S_LogicFrame

// int32 frame_id = 1;
inline void S_LogicFrame::clear_frame_id() {
  frame_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_LogicFrame::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_LogicFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_LogicFrame.frame_id)
  return _internal_frame_id();
}
inline void S_LogicFrame::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_id_ = value;
}
inline void S_LogicFrame::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.S_LogicFrame.frame_id)
}

// repeated .ChampionFistGame.UnsyncFrame unsync_frames = 2;
inline int S_LogicFrame::_internal_unsync_frames_size() const {
  return unsync_frames_.size();
}
inline int S_LogicFrame::unsync_frames_size() const {
  return _internal_unsync_frames_size();
}
inline void S_LogicFrame::clear_unsync_frames() {
  unsync_frames_.Clear();
}
inline ::ChampionFistGame::UnsyncFrame* S_LogicFrame::mutable_unsync_frames(int index) {
  // @@protoc_insertion_point(field_mutable:ChampionFistGame.S_LogicFrame.unsync_frames)
  return unsync_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::UnsyncFrame >*
S_LogicFrame::mutable_unsync_frames() {
  // @@protoc_insertion_point(field_mutable_list:ChampionFistGame.S_LogicFrame.unsync_frames)
  return &unsync_frames_;
}
inline const ::ChampionFistGame::UnsyncFrame& S_LogicFrame::_internal_unsync_frames(int index) const {
  return unsync_frames_.Get(index);
}
inline const ::ChampionFistGame::UnsyncFrame& S_LogicFrame::unsync_frames(int index) const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.S_LogicFrame.unsync_frames)
  return _internal_unsync_frames(index);
}
inline ::ChampionFistGame::UnsyncFrame* S_LogicFrame::_internal_add_unsync_frames() {
  return unsync_frames_.Add();
}
inline ::ChampionFistGame::UnsyncFrame* S_LogicFrame::add_unsync_frames() {
  // @@protoc_insertion_point(field_add:ChampionFistGame.S_LogicFrame.unsync_frames)
  return _internal_add_unsync_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChampionFistGame::UnsyncFrame >&
S_LogicFrame::unsync_frames() const {
  // @@protoc_insertion_point(field_list:ChampionFistGame.S_LogicFrame.unsync_frames)
  return unsync_frames_;
}

// -------------------------------------------------------------------

// C_Connect

// string name = 1;
inline void C_Connect::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& C_Connect::name() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.C_Connect.name)
  return _internal_name();
}
inline void C_Connect::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.C_Connect.name)
}
inline std::string* C_Connect::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ChampionFistGame.C_Connect.name)
  return _internal_mutable_name();
}
inline const std::string& C_Connect::_internal_name() const {
  return name_.Get();
}
inline void C_Connect::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void C_Connect::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ChampionFistGame.C_Connect.name)
}
inline void C_Connect::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ChampionFistGame.C_Connect.name)
}
inline void C_Connect::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ChampionFistGame.C_Connect.name)
}
inline std::string* C_Connect::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* C_Connect::release_name() {
  // @@protoc_insertion_point(field_release:ChampionFistGame.C_Connect.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void C_Connect::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ChampionFistGame.C_Connect.name)
}

// int32 seat_no = 2;
inline void C_Connect::clear_seat_no() {
  seat_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_Connect::_internal_seat_no() const {
  return seat_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_Connect::seat_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.C_Connect.seat_no)
  return _internal_seat_no();
}
inline void C_Connect::_internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seat_no_ = value;
}
inline void C_Connect::set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.C_Connect.seat_no)
}

// int32 champion_no = 3;
inline void C_Connect::clear_champion_no() {
  champion_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_Connect::_internal_champion_no() const {
  return champion_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_Connect::champion_no() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.C_Connect.champion_no)
  return _internal_champion_no();
}
inline void C_Connect::_internal_set_champion_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  champion_no_ = value;
}
inline void C_Connect::set_champion_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_champion_no(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.C_Connect.champion_no)
}

// -------------------------------------------------------------------

// C_PlayerFrame

// int32 frame_id = 1;
inline void C_PlayerFrame::clear_frame_id() {
  frame_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_PlayerFrame::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C_PlayerFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.C_PlayerFrame.frame_id)
  return _internal_frame_id();
}
inline void C_PlayerFrame::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_id_ = value;
}
inline void C_PlayerFrame::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:ChampionFistGame.C_PlayerFrame.frame_id)
}

// .ChampionFistGame.OperationFrame player_opt_frame = 2;
inline bool C_PlayerFrame::_internal_has_player_opt_frame() const {
  return this != internal_default_instance() && player_opt_frame_ != nullptr;
}
inline bool C_PlayerFrame::has_player_opt_frame() const {
  return _internal_has_player_opt_frame();
}
inline void C_PlayerFrame::clear_player_opt_frame() {
  if (GetArena() == nullptr && player_opt_frame_ != nullptr) {
    delete player_opt_frame_;
  }
  player_opt_frame_ = nullptr;
}
inline const ::ChampionFistGame::OperationFrame& C_PlayerFrame::_internal_player_opt_frame() const {
  const ::ChampionFistGame::OperationFrame* p = player_opt_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChampionFistGame::OperationFrame&>(
      ::ChampionFistGame::_OperationFrame_default_instance_);
}
inline const ::ChampionFistGame::OperationFrame& C_PlayerFrame::player_opt_frame() const {
  // @@protoc_insertion_point(field_get:ChampionFistGame.C_PlayerFrame.player_opt_frame)
  return _internal_player_opt_frame();
}
inline void C_PlayerFrame::unsafe_arena_set_allocated_player_opt_frame(
    ::ChampionFistGame::OperationFrame* player_opt_frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_opt_frame_);
  }
  player_opt_frame_ = player_opt_frame;
  if (player_opt_frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChampionFistGame.C_PlayerFrame.player_opt_frame)
}
inline ::ChampionFistGame::OperationFrame* C_PlayerFrame::release_player_opt_frame() {
  
  ::ChampionFistGame::OperationFrame* temp = player_opt_frame_;
  player_opt_frame_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ChampionFistGame::OperationFrame* C_PlayerFrame::unsafe_arena_release_player_opt_frame() {
  // @@protoc_insertion_point(field_release:ChampionFistGame.C_PlayerFrame.player_opt_frame)
  
  ::ChampionFistGame::OperationFrame* temp = player_opt_frame_;
  player_opt_frame_ = nullptr;
  return temp;
}
inline ::ChampionFistGame::OperationFrame* C_PlayerFrame::_internal_mutable_player_opt_frame() {
  
  if (player_opt_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChampionFistGame::OperationFrame>(GetArena());
    player_opt_frame_ = p;
  }
  return player_opt_frame_;
}
inline ::ChampionFistGame::OperationFrame* C_PlayerFrame::mutable_player_opt_frame() {
  // @@protoc_insertion_point(field_mutable:ChampionFistGame.C_PlayerFrame.player_opt_frame)
  return _internal_mutable_player_opt_frame();
}
inline void C_PlayerFrame::set_allocated_player_opt_frame(::ChampionFistGame::OperationFrame* player_opt_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_opt_frame_;
  }
  if (player_opt_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_opt_frame);
    if (message_arena != submessage_arena) {
      player_opt_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_opt_frame, submessage_arena);
    }
    
  } else {
    
  }
  player_opt_frame_ = player_opt_frame;
  // @@protoc_insertion_point(field_set_allocated:ChampionFistGame.C_PlayerFrame.player_opt_frame)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChampionFistGame

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChampionFistGame::ServerCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChampionFistGame::ServerCommandType>() {
  return ::ChampionFistGame::ServerCommandType_descriptor();
}
template <> struct is_proto_enum< ::ChampionFistGame::ClientCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChampionFistGame::ClientCommandType>() {
  return ::ChampionFistGame::ClientCommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameProtobuf_2eproto
