// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: main_server_to_client.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NewChampionFist {

  /// <summary>Holder for reflection information generated from main_server_to_client.proto</summary>
  public static partial class MainServerToClientReflection {

    #region Descriptor
    /// <summary>File descriptor for main_server_to_client.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MainServerToClientReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChttYWluX3NlcnZlcl90b19jbGllbnQucHJvdG8SD05ld0NoYW1waW9uRmlz",
            "dCI7CgdTX1N0YXJ0EhYKDmdhbWVfc2VydmVyX2lwGAEgASgJEhgKEGdhbWVf",
            "c2VydmVyX3BvcnQYAiABKAUqIAoRU2VydmVyQ29tbWFuZFR5cGUSCwoHU19T",
            "VEFSVBAAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NewChampionFist.ServerCommandType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NewChampionFist.S_Start), global::NewChampionFist.S_Start.Parser, new[]{ "GameServerIp", "GameServerPort" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ServerCommandType {
    [pbr::OriginalName("S_START")] SStart = 0,
  }

  #endregion

  #region Messages
  public sealed partial class S_Start : pb::IMessage<S_Start>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<S_Start> _parser = new pb::MessageParser<S_Start>(() => new S_Start());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_Start> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NewChampionFist.MainServerToClientReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_Start() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_Start(S_Start other) : this() {
      gameServerIp_ = other.gameServerIp_;
      gameServerPort_ = other.gameServerPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_Start Clone() {
      return new S_Start(this);
    }

    /// <summary>Field number for the "game_server_ip" field.</summary>
    public const int GameServerIpFieldNumber = 1;
    private string gameServerIp_ = "";
    /// <summary>
    /// room name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameServerIp {
      get { return gameServerIp_; }
      set {
        gameServerIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_server_port" field.</summary>
    public const int GameServerPortFieldNumber = 2;
    private int gameServerPort_;
    /// <summary>
    /// player number in the room
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameServerPort {
      get { return gameServerPort_; }
      set {
        gameServerPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_Start);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_Start other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameServerIp != other.GameServerIp) return false;
      if (GameServerPort != other.GameServerPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameServerIp.Length != 0) hash ^= GameServerIp.GetHashCode();
      if (GameServerPort != 0) hash ^= GameServerPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameServerIp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameServerIp);
      }
      if (GameServerPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameServerPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameServerIp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameServerIp);
      }
      if (GameServerPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameServerPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameServerIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameServerIp);
      }
      if (GameServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameServerPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_Start other) {
      if (other == null) {
        return;
      }
      if (other.GameServerIp.Length != 0) {
        GameServerIp = other.GameServerIp;
      }
      if (other.GameServerPort != 0) {
        GameServerPort = other.GameServerPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameServerIp = input.ReadString();
            break;
          }
          case 16: {
            GameServerPort = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GameServerIp = input.ReadString();
            break;
          }
          case 16: {
            GameServerPort = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
